/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class environs_Environs */

#ifndef _Included_environs_Environs
#define _Included_environs_Environs
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     environs_Environs
 * Method:    LogN
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_LogN
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     environs_Environs
 * Method:    SetNetworkConnectTimeoutN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetNetworkConnectTimeoutN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    CreateEnvironsN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_CreateEnvironsN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    LoadSettingsN
 * Signature: (ILjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_LoadSettingsN
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     environs_Environs
 * Method:    ClearStorageN
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_environs_Environs_ClearStorageN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetUseMediatorLoginDialogN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseMediatorLoginDialogN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseMediatorLoginDialogN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseMediatorLoginDialogN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorLoginDialogDismissDisableN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetMediatorLoginDialogDismissDisableN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorNotificationSubscriptionN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetMediatorNotificationSubscriptionN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorNotificationSubscriptionN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetMediatorNotificationSubscriptionN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetMessagesSubscriptionN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetMessagesSubscriptionN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetMessagesSubscriptionN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetMessagesSubscriptionN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorLoginDialogDismissDisableN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetMediatorLoginDialogDismissDisableN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetUseNotifyDebugMessageN
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseNotifyDebugMessageN
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseNotifyDebugMessageN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseNotifyDebugMessageN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetUseLogFileN
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseLogFileN
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseLogFileN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseLogFileN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetVersionStringN
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetVersionStringN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetVersionMajorN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetVersionMajorN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetVersionMinorN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetVersionMinorN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetVersionRevisionN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetVersionRevisionN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceIDN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDeviceIDN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceIDN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetDeviceIDN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseExtendedtouchN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseExtendedtouchN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceIDFromMediatorN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDeviceIDFromMediatorN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetIPAddressN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetIPAddressN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetSubnetMaskN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetSubnetMaskN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetDirectContactStatusN
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetDirectContactStatusN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetPortalEnabledN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalEnabledN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetPortalIDN
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetPortalIDN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetAppAreaIDN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetAppAreaIDN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    HasDeviceUIDN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_HasDeviceUIDN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetIsReleaseBuildN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetIsReleaseBuildN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceUIDN
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetDeviceUIDN
  (JNIEnv *, jclass, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceNameN
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetDeviceNameN
  (JNIEnv *, jclass, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorUserNameN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetMediatorUserNameN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorUserNameN
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetMediatorUserNameN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseMediatorAnonymousLogonN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseMediatorAnonymousLogonN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseMediatorAnonymousLogonN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseMediatorAnonymousLogonN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorPasswordN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetMediatorPasswordN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUseAuthenticationN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseAuthenticationN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetAppStatusN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetAppStatusN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseTouchRecognizerN
 * Signature: (ILjava/lang/String;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUseTouchRecognizerN
  (JNIEnv *, jclass, jint, jstring, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetUseTouchRecognizerEnableN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseTouchRecognizerEnableN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    AllocPlatformN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_AllocPlatformN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    RegisterAtMediatorsN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_RegisterAtMediatorsN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    ResetCryptLayerN
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_environs_Environs_ResetCryptLayerN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    PushSensorDataN
 * Signature: (IFFF)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_PushSensorDataN
  (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
 * Class:     environs_Environs
 * Method:    PushSensorDataDoublesN
 * Signature: (IDDD)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_PushSensorDataDoublesN
  (JNIEnv *, jclass, jint, jdouble, jdouble, jdouble);

/*
 * Class:     environs_Environs
 * Method:    PushSensorDataExtN
 * Signature: (IDDDFFF)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_PushSensorDataExtN
  (JNIEnv *, jclass, jint, jdouble, jdouble, jdouble, jfloat, jfloat, jfloat);

/*
 * Class:     environs_Environs
 * Method:    SetUseSensorChannelTcpN
 * Signature: (IIZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseSensorChannelTcpN
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseSensorChannelTcpN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetUseSensorChannelTcpN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseSensorRateN
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseSensorRateN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetUseSensorRateN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetUseSensorRateN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetSensorEventSenderN
 * Signature: (IIIIZ)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetSensorEventSenderN
  (JNIEnv *, jclass, jint, jint, jint, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    StartSensorListeningN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_StartSensorListeningN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    StopSensorListeningN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_StopSensorListeningN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    StopSensorListeningAllN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_StopSensorListeningAllN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    StartSensorListeningAllN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_StartSensorListeningAllN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetSensorEventSenderCountN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetSensorEventSenderCountN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    IsSensorAvailableN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_IsSensorAvailableN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    IsSensorEnabledN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_IsSensorEnabledN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetSensorEventSenderFlagsN
 * Signature: (IIIII)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_SetSensorEventSenderFlagsN
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    IsNativeAllocatedN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_IsNativeAllocatedN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    RegisterMainThreadN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_RegisterMainThreadN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    InitStorageN
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_InitStorageN
  (JNIEnv *, jclass, jstring);

/*
 * Class:     environs_Environs
 * Method:    InitWorkDirN
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_InitWorkDirN
  (JNIEnv *, jclass, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetNetworkStatusN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetNetworkStatusN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    InitN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_InitN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    StartN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_StartN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorFilterLevelN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetMediatorFilterLevelN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorFilterLevelN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetMediatorFilterLevelN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetPlatformN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetPlatformN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetPlatformN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetPlatformN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetIsLocationNodeN
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetIsLocationNodeN
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetConnectAllowFromAllN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetConnectAllowFromAllN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetConnectAllowFromAllN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetConnectAllowFromAllN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    AllowConnectN
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_AllowConnectN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    AllowConnectDefaultN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_AllowConnectDefaultN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    DeviceConnectN
 * Signature: (IILjava/lang/String;Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_DeviceConnectN
  (JNIEnv *, jclass, jint, jint, jstring, jstring, jint);

/*
 * Class:     environs_Environs
 * Method:    DeviceDisconnectN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_DeviceDisconnectN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceConnectStatusN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDeviceConnectStatusN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetConnectedDevicesCountN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetConnectedDevicesCountN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    DisposeN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_DisposeN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    StopN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_StopN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    StopNetLayerN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_StopNetLayerN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetStatusN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetStatusN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetPortsN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetPortsN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetBasePortN
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetBasePortN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetOSLevelN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetOSLevelN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetDebugN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetDebugN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceDimsN
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetDeviceDimsN
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetAreaNameN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetAreaNameN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetApplicationNameN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetApplicationNameN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceTypeN
 * Signature: (C)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetDeviceTypeN
  (JNIEnv *, jclass, jchar);

/*
 * Class:     environs_Environs
 * Method:    SetDeviceFlagsN
 * Signature: (IIIIZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetDeviceFlagsN
  (JNIEnv *, jclass, jint, jint, jint, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetPortalViewDimsN
 * Signature: (IIIIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetPortalViewDimsN
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetGCMN
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetGCMN
  (JNIEnv *, jclass, jstring);

/*
 * Class:     environs_Environs
 * Method:    GetUseCLSForMediatorN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseCLSForMediatorN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseCLSForMediatorN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseCLSForMediatorN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseCLSForDevicesN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseCLSForDevicesN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseCLSForDevicesN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseCLSForDevicesN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseCLSForDevicesEnforceN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseCLSForDevicesEnforceN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseCLSForDevicesEnforceN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseCLSForDevicesEnforceN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseCLSForAllTrafficN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseCLSForAllTrafficN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseCLSForAllTrafficN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseCLSForAllTrafficN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetUseStreamN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseStreamN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseStreamN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseStreamN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseNativeDecoderN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseNativeDecoderN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseNativeDecoderN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseNativeDecoderN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseHardwareEncoderN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseHardwareEncoderN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseHardwareEncoderN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseHardwareEncoderN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUsePortalDefaultModulesN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUsePortalDefaultModulesN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseEncoderN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUseEncoderN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUseDecoderN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUseDecoderN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUseRendererN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUseRendererN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUseCapturerN
 * Signature: (ILjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetUseCapturerN
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUseSensorsN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseSensorsN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseSensorsN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseSensorsN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUsePushNotificationsN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUsePushNotificationsN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUsePushNotificationsN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUsePushNotificationsN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetUseDefaultMediatorN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseDefaultMediatorN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseDefaultMediatorN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseDefaultMediatorN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseCustomMediatorN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseCustomMediatorN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseCustomMediatorN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseCustomMediatorN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetMediatorN
 * Signature: (ILjava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetMediatorN
  (JNIEnv *, jclass, jint, jstring, jint);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorPortN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetMediatorPortN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetMediatorIPN
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetMediatorIPN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    WiFiUpdateWithColonMacN
 * Signature: (Ljava/lang/String;Ljava/lang/String;IIII)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_WiFiUpdateWithColonMacN
  (JNIEnv *, jclass, jstring, jstring, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseWifiObserverN
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseWifiObserverN
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseWifiObserverN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseWifiObserverN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetUseWifiIntervalN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseWifiIntervalN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetUseWifiIntervalN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetUseWifiIntervalN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetWifisN
 * Signature: ()Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetWifisN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    BtUpdateWithColonMacN
 * Signature: (Ljava/lang/String;Ljava/lang/String;IIJJI)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_BtUpdateWithColonMacN
  (JNIEnv *, jclass, jstring, jstring, jint, jint, jlong, jlong, jint);

/*
 * Class:     environs_Environs
 * Method:    SetUseBtObserverN
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseBtObserverN
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetUseBtObserverN
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetUseBtObserverN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetUseBtIntervalN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUseBtIntervalN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetUseBtIntervalN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetUseBtIntervalN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetBtsN
 * Signature: ()Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetBtsN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SetPortalNativeResolutionN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetPortalNativeResolutionN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetPortalNativeResolutionN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalNativeResolutionN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetPortalAutoStartN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetPortalAutoStartN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetPortalAutoStartN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalAutoStartN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetPortalTCPN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalTCPN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SetPortalTCPN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetPortalTCPN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    SetPortalViewDimsAutoN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetPortalViewDimsAutoN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetPortalViewDimsAutoN
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalViewDimsAutoN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    GetBufferHeaderSizeN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetBufferHeaderSizeN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetBufferHeaderBytesToSizeN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetBufferHeaderBytesToSizeN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetBufferHeaderBytesToTypeN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetBufferHeaderBytesToTypeN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetBufferHeaderBytesToStartValueN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetBufferHeaderBytesToStartValueN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    SendMessageN
 * Signature: (IILjava/lang/String;Ljava/lang/String;I[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendMessageN
  (JNIEnv *, jclass, jint, jint, jstring, jstring, jint, jbyteArray, jint);

/*
 * Class:     environs_Environs
 * Method:    SendBufferN
 * Signature: (IIIILjava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendBufferN
  (JNIEnv *, jclass, jint, jint, jint, jint, jstring, jbyteArray, jint);

/*
 * Class:     environs_Environs
 * Method:    SendDataUdpN
 * Signature: (III[BII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendDataUdpN
  (JNIEnv *, jclass, jint, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SendTcpPortalN
 * Signature: (IILjava/nio/ByteBuffer;ILjava/nio/ByteBuffer;II)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendTcpPortalN
  (JNIEnv *, jclass, jint, jint, jobject, jint, jobject, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    AcquirePortalSendIDN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_AcquirePortalSendIDN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    ReleasePortalSendIDN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_ReleasePortalSendIDN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    AcquirePortalReceiveIDN
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_AcquirePortalReceiveIDN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    ReleasePortalReceiveIDN
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_ReleasePortalReceiveIDN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    ReceivePortalUnitN
 * Signature: (I)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_ReceivePortalUnitN
  (JNIEnv *, jclass, jint);

/*
 * Class:     environs_Environs
 * Method:    SendFileN
 * Signature: (IIIILjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendFileN
  (JNIEnv *, jclass, jint, jint, jint, jint, jstring, jstring);

/*
 * Class:     environs_Environs
 * Method:    SetUsePlatformPortalGeneratorN
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_SetUsePlatformPortalGeneratorN
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetPortalIDFreeSlotN
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetPortalIDFreeSlotN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    RequestPortalStreamN
 * Signature: (IIIIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_RequestPortalStreamN
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    ProvidePortalStreamN
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_ProvidePortalStreamN
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    ProvideRequestPortalStreamN
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_ProvideRequestPortalStreamN
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    StartPortalStreamN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_StartPortalStreamN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    PausePortalStreamN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_PausePortalStreamN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    StopPortalStreamN
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_StopPortalStreamN
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    SetRenderSurfaceN
 * Signature: (IILandroid/view/Surface;II)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetRenderSurfaceN
  (JNIEnv *, jclass, jint, jint, jobject, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    ReleaseRenderSurfaceN
 * Signature: (III)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_ReleaseRenderSurfaceN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    RequestPortalIntraFrameN
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_RequestPortalIntraFrameN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetRequestedPortalIDN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetRequestedPortalIDN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetPortalInfoN
 * Signature: (ILjava/nio/ByteBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_GetPortalInfoN
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     environs_Environs
 * Method:    SetPortalInfoN
 * Signature: (ILjava/nio/ByteBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SetPortalInfoN
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     environs_Environs
 * Method:    SendPortalInitN
 * Signature: (IIIII)Z
 */
JNIEXPORT jboolean JNICALL Java_environs_Environs_SendPortalInitN
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    TouchDispatchN
 * Signature: (IILjava/nio/ByteBuffer;IZ)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_TouchDispatchN
  (JNIEnv *, jclass, jint, jint, jobject, jint, jboolean);

/*
 * Class:     environs_Environs
 * Method:    GetSizeOfInputPackN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetSizeOfInputPackN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    BridgeForNotifier
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_environs_Environs_BridgeForNotifier
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDevicesCountN
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDevicesCountN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDevicesN
 * Signature: (II)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDevicesN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceN
 * Signature: (IILjava/lang/String;Ljava/lang/String;I)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDeviceN
  (JNIEnv *, jclass, jint, jint, jstring, jstring, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceForPortalN
 * Signature: (II)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDeviceForPortalN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceByObjIDN
 * Signature: (II)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDeviceByObjIDN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceBestMatchN
 * Signature: (II)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDeviceBestMatchN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceInstanceSizeN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDeviceInstanceSizeN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetDevicesHeaderSizeN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetDevicesHeaderSizeN
  (JNIEnv *, jclass);

/*
 * Class:     environs_Environs
 * Method:    GetFilePathN
 * Signature: (IILjava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetFilePathN
  (JNIEnv *, jclass, jint, jint, jstring, jstring, jint);

/*
 * Class:     environs_Environs
 * Method:    GetFilePathForStorageN
 * Signature: (IILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetFilePathForStorageN
  (JNIEnv *, jclass, jint, jint, jstring, jstring);

/*
 * Class:     environs_Environs
 * Method:    GetFilePathNativeN
 * Signature: (III)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_environs_Environs_GetFilePathNativeN
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetFileN
 * Signature: (IILjava/lang/String;Ljava/lang/String;I[BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_environs_Environs_GetFileN
  (JNIEnv *, jclass, jint, jint, jstring, jstring, jint, jbyteArray, jint);

/*
 * Class:     environs_Environs
 * Method:    GetFileNativeN
 * Signature: (III[BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_environs_Environs_GetFileNativeN
  (JNIEnv *, jclass, jint, jint, jint, jbyteArray, jint);

/*
 * Class:     environs_Environs
 * Method:    GetDeviceDisplayPropsN
 * Signature: (II)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_environs_Environs_GetDeviceDisplayPropsN
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     environs_Environs
 * Method:    GetNetworkStatusN
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_environs_Environs_GetNetworkStatusN
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class environs_Environs_ListContext */

#ifndef _Included_environs_Environs_ListContext
#define _Included_environs_Environs_ListContext
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
