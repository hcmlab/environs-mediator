/* DO NOT EDIT THIS FILE - it is machine generated by j2c.jar */
/* Header for environs TypesSource */

/**
 * ------------------------------------------------------------------
 * Copyright (c) Chi-Tai Dang
 *
 * @author	Chi-Tai Dang
 * @version	1.0
 *
 * This file is part of the Environs framework developed at the
 * Lab for Human Centered Multimedia of the University of Augsburg.
 * http://hcm-lab.de/environs
 *
 * Environ is free software; you can redistribute it and/or modify
 * it under the terms of the Eclipse Public License v1.0.
 * A copy of the license may be obtained at:
 * http://www.eclipse.org/org/documents/epl-v10.html
 * --------------------------------------------------------------------
 */
#ifndef INCLUDE_ENVIRONS_TYPESSOURCE
#define INCLUDE_ENVIRONS_TYPESSOURCE

#ifdef __cplusplus
namespace environs {
#endif


	extern const char * resolveName ( int constToResolve );

/**
 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
 *
 * TypesSource.java can be removed prior to build of the library. It just serves for auto-generation of the java/c/cpp/cli headers and type files.
 *
 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
 *
 */
/**
 * Environs native layer status
 */
/** Disposed. */
#define	STATUS_DISPOSED                                   		(-1)
/** Uninitialized. Usually after creation of an Environs object. */
#define	STATUS_UNINITIALIZED                              		(0)
/** Environs is about to be disposed. */
#define	STATUS_DISPOSING                                  		(1)
/** Environs is initializing. */
#define	STATUS_INITIALIZING                               		(2)
/** Environs is initialized. Usually after a call to Environs.Init() */
#define	STATUS_INITIALIZED                                		(3)
/** Environs is stopped. Usually after a call to Environs.Stop() */
#define	STATUS_STOPPED                                    		(4)
/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */
#define	STATUS_STOP_IN_PROGRESS                           		(5)
/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */
#define	STATUS_STOPPING                                   		(6)
/** Environs is about to Start. Thread are being started and resources are being allocated. */
#define	STATUS_STARTING                                   		(7)
/** Environs is started. Usually after a call to Environs.Start() */
#define	STATUS_STARTED                                    		(8)
/** Environs is in connected state and connected to at least one device. */
#define	STATUS_CONNECTED                                  		(9)

/** 
 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
 * */
#ifndef CLI_CPP
	typedef enum Status_t {
			/** Disposed. */
			Status_Disposed            	=	STATUS_DISPOSED,
			/** Uninitialized. Usually after creation of an Environs object. */
			Status_Uninitialized       	=	STATUS_UNINITIALIZED,
			/** Environs is about to be disposed. */
			Status_Disposing           	=	STATUS_DISPOSING,
			/** Environs is initializing. */
			Status_Initializing        	=	STATUS_INITIALIZING,
			/** Environs is initialized. Usually after a call to Environs.Init() */
			Status_Initialized         	=	STATUS_INITIALIZED,
			/** Environs is stopped. Usually after a call to Environs.Stop() */
			Status_Stopped             	=	STATUS_STOPPED,
			/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */
			Status_StopInProgress      	=	STATUS_STOP_IN_PROGRESS,
			/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */
			Status_Stopping            	=	STATUS_STOPPING,
			/** Environs is about to Start. Thread are being started and resources are being allocated. */
			Status_Starting            	=	STATUS_STARTING,
			/** Environs is started. Usually after a call to Environs.Start() */
			Status_Started             	=	STATUS_STARTED,
			/** Environs is in connected state and connected to at least one device. */
			Status_Connected           	=	STATUS_CONNECTED,
		} Status_t;

#	ifdef __cplusplus
	namespace Status {
			const Status_t Disposed            	=	Status_Disposed            ;
			const Status_t Uninitialized       	=	Status_Uninitialized       ;
			const Status_t Disposing           	=	Status_Disposing           ;
			const Status_t Initializing        	=	Status_Initializing        ;
			const Status_t Initialized         	=	Status_Initialized         ;
			const Status_t Stopped             	=	Status_Stopped             ;
			const Status_t StopInProgress      	=	Status_StopInProgress      ;
			const Status_t Stopping            	=	Status_Stopping            ;
			const Status_t Starting            	=	Status_Starting            ;
			const Status_t Started             	=	Status_Started             ;
			const Status_t Connected           	=	Status_Connected           ;
	};
#	endif
#endif



/**
 * Max supported instances of Environs objects that each application can run at the same time.
 * */
#define	ENVIRONS_MAX_ENVIRONS_INSTANCES_MOBILE            		(5)
#define	ENVIRONS_MAX_ENVIRONS_INSTANCES_FULL              		(10)

/**
 * A constant value that identifies an uninitialized display value.
 * */
#define	ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              		(-1)

/**
 * Environs thread states
 */
/** Uninitialized. Usually after creation of an Environs object. */
#define	ENVIRONS_THREAD_NO_THREAD                         		(0)
/** Thread is either created and not yet running or terminated. */
#define	ENVIRONS_THREAD_DETACHEABLE                       		(1)
/** Thread is running. */
#define	ENVIRONS_THREAD_RUNNING                           		(2)


/**
 * Environs thread Status enumeration.
 * */
#ifndef CLI_CPP
	typedef enum ThreadStatus_t {
			/** Uninitialized. Usually after creation of an Environs object. */
			ThreadStatus_NoThread            	=	ENVIRONS_THREAD_NO_THREAD,
			/** Thread is either created and not yet running or terminated. */
			ThreadStatus_Detacheable         	=	ENVIRONS_THREAD_DETACHEABLE,
			/** Thread is running. */
			ThreadStatus_Running             	=	ENVIRONS_THREAD_RUNNING,

		} ThreadStatus_t;

#	ifdef __cplusplus
	namespace ThreadStatus {
			const ThreadStatus_t NoThread            	=	ThreadStatus_NoThread            ;
			const ThreadStatus_t Detacheable         	=	ThreadStatus_Detacheable         ;
			const ThreadStatus_t Running             	=	ThreadStatus_Running             ;
	};
#	endif
#endif




/** Deleteable. Device object has been disabled.&nbsp; 
 * "Garbage Collection" should dispose and delete the object on the next occasion. 
 * */
#define	DEVICE_STATUS_DELETEABLE                          		(0)
/** Device object has just been created. */
#define	DEVICE_STATUS_CREATED                             		(2)
/** Connect in progress. Device object has been created and the connecting task is in progress. */
#define	DEVICE_STATUS_CONNECT_IN_PROGRESS                 		(3)
/** Connected. Device object is connected to the destination device and active. */
#define	DEVICE_STATUS_CONNECTED                           		(4)

/** 
 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
 * */
#ifndef CLI_CPP
	typedef enum DeviceStatus_t {
		/** Deleteable. Device object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */
			DeviceStatus_Deleteable          	=	DEVICE_STATUS_DELETEABLE,
			/** Device object has just been created. */
			DeviceStatus_Created             	=	DEVICE_STATUS_CREATED,
			/** Connect in progress. Device object has been created and the connecting task is in progress. */
			DeviceStatus_ConnectInProgress   	=	DEVICE_STATUS_CONNECT_IN_PROGRESS,
			/** Connected. Device object is connected to the destination device and active. */
			DeviceStatus_Connected           	=	DEVICE_STATUS_CONNECTED,
		} DeviceStatus_t;

#	ifdef __cplusplus
	namespace DeviceStatus {
			const DeviceStatus_t Deleteable          	=	DeviceStatus_Deleteable          ;
			const DeviceStatus_t Created             	=	DeviceStatus_Created             ;
			const DeviceStatus_t ConnectInProgress   	=	DeviceStatus_ConnectInProgress   ;
			const DeviceStatus_t Connected           	=	DeviceStatus_Connected           ;
	};
#	endif
#endif


	
/* 
 * Environs source values which determines the source of an event, data, or message.
 */
/** Sent by native layer. */
#define	SOURCE_NATIVE                                     		(0)
/** Sent by platform specific layer. */
#define	SOURCE_PLATFORM                                   		(1)
/** Sent by another device within the environment.  */
#define	SOURCE_DEVICE                                     		(2)
/** Sent by the app layer. */
#define	SOURCE_APPLICATION                                		(3)

/** 
 * Environs source values which determines the source of an event, data, or message.&nbsp;
 * Represents the same values as for ENVIRONS_SOURCE_* 
 * */
#ifndef CLI_CPP
	typedef enum Source_t {
			/** Sent by native layer. */
			Source_Native              	=	SOURCE_NATIVE,
			/** Sent by platform specific layer. */
			Source_Platform            	=	SOURCE_PLATFORM,
			/** Sent by another device within the environment.  */
			Source_Device              	=	SOURCE_DEVICE,
			/** Sent by the app layer. */
			Source_Application         	=	SOURCE_APPLICATION,
		} Source_t;

#	ifdef __cplusplus
	namespace Source {
			const Source_t Native              	=	Source_Native              ;
			const Source_t Platform            	=	Source_Platform            ;
			const Source_t Device              	=	Source_Device              ;
			const Source_t Application         	=	Source_Application         ;
	};
#	endif
#endif




#define	ENVIRONS_OBJECT_DISPOSED                          		(-1)
#define	ENVIRONS_OBJECT_DISPOSED_PLATFORM                 		(-2)

/*
 * Native payload type class is determined by the upper byte of payload
 */
#define	MSG_NOTIFY_ID                                     		(0xFF00)
#define	MSG_NOTIFY_CLASS                                  		(0xFF0000)
	
/*
 * Native packet data types, first 4 bytes must confirm to one of these types
 * Type: unsigned short 0xFFFF
 */
/** Class: Helo type */
#define	MSG_TYPE_HELO                                     		(0)
// Handshake states
#define	MSG_HANDSHAKE                                     		(0x100)
	
/** Main channel */
// Former 'D'
#define	MSG_HANDSHAKE_MAIN                                		(MSG_HANDSHAKE | 0x10)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_REQ                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_ACK                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_FAIL                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_CLOSED                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4)

#define	MSG_HANDSHAKE_COMDAT                              		(MSG_HANDSHAKE | 0x20)
#define	MSG_HANDSHAKE_COMDAT_REQ                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 1)
#define	MSG_HANDSHAKE_COMDAT_ACK                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 2)
#define	MSG_HANDSHAKE_COMDAT_FAILED                       		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 3)
#define	MSG_HANDSHAKE_COMDAT_CLOSED                       		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 4)

#define	MSG_HANDSHAKE_PROC                                		(MSG_HANDSHAKE | 0x40)
// Former 'P'
#define	MSG_HANDSHAKE_PORTS                               		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1)
#define	MSG_HANDSHAKE_PORTS_ACK                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2)
#define	MSG_HANDSHAKE_CONIG_REQ                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3)
#define	MSG_HANDSHAKE_CONIG_RESP                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4)
#define	MSG_HANDSHAKE_CONIG_RESP_ACK                      		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5)
#define	MSG_HANDSHAKE_CONNECTED                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA)
#define	MSG_HANDSHAKE_DISCONNECTED                        		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB)
#define	MSG_HANDSHAKE_PING                                		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xC)
	

#define	MSG_HANDSHAKE_UDP                                 		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6)
#define	MSG_HANDSHAKE_UDP_ACK                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7)
	
#define	MSG_HANDSHAKE_SUCCESS                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE)
#define	MSG_HANDSHAKE_SUCCESS_ACK                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF)
	
#define	MSG_HANDSHAKE_SHORT_MESSAGE                       		(MSG_HANDSHAKE | 0x81)
#define	MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   		(MSG_HANDSHAKE | 0x82)

#define	NOTIFY_TYPE_CONNECTION                            		((MSG_TYPE_HELO << 16))
#define	NOTIFY_CONNECTION_MAIN_NEW                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ)
#define	NOTIFY_CONNECTION_MAIN_ACK                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK)
#define	NOTIFY_CONNECTION_MAIN_FAILED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL)
#define	NOTIFY_CONNECTION_MAIN_CLOSED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED)
#define	NOTIFY_CONNECTION_COMDAT_NEW                      		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_REQ)
#define	NOTIFY_CONNECTION_COMDAT_ACK                      		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_ACK)
#define	NOTIFY_CONNECTION_COMDAT_FAILED                   		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_FAILED)
#define	NOTIFY_CONNECTION_COMDAT_CLOSED                   		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_CLOSED)
#define	NOTIFY_CONNECTION_DATA_ACK                        		(NOTIFY_TYPE_CONNECTION | 0xA)
#define	NOTIFY_CONNECTION_DATA_CLOSED                     		(NOTIFY_TYPE_CONNECTION | 0xC)

#define	NOTIFY_CONNECTION_PROGRESS                        		(NOTIFY_TYPE_CONNECTION | 0xD)
	
#define	NOTIFY_CONNECTION_ESTABLISHED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS)
#define	NOTIFY_CONNECTION_ESTABLISHED_ACK                 		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK)
#define	NOTIFY_CONNECTION_CLOSED                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED)
	
#define	NOTIFY_SHORT_MESSAGE                              		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE)
#define	NOTIFY_SHORT_MESSAGE_ACK                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK)

/**
 * Notify connection enumeration.
 * */


	
// Stream types
#define	DATA_STREAM                                       		(0x200)
#define	DATA_STREAM_INIT                                  		(1)

#define	DATA_STREAM_IFRAME                                		(0x400)

/** Class: Image type */
#define	MSG_TYPE_IMAGE                                    		(1)
// 0x10
#define	DATA_STREAM_IMAGE                                 		(MSG_TYPE_IMAGE << 4)
#define	DATA_STREAM_IMAGE_INIT                            		(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT)
#define	DATA_STREAM_IMAGE_DATA                            		(DATA_STREAM | DATA_STREAM_IMAGE | 8)
#define	DATA_STREAM_IMAGE_JPEG                            		(DATA_STREAM_IMAGE_DATA | 2)
#define	DATA_STREAM_IMAGE_PNG                             		(DATA_STREAM_IMAGE_DATA | 4)

/** Class: Video type */
#define	MSG_TYPE_STREAM                                   		(2)
// 0x20
#define	DATA_STREAM_VIDEO                                 		(MSG_TYPE_STREAM << 4)
// Initialization protocol version 1 packet with width and height
#define	DATA_STREAM_VIDEO_INIT                            		(DATA_STREAM | DATA_STREAM_VIDEO | DATA_STREAM_INIT)
// Header packets
#define	DATA_STREAM_VIDEO_HDR                             		(DATA_STREAM | DATA_STREAM_VIDEO | 2)
#define	DATA_STREAM_H265_NALUS                            		(DATA_STREAM | DATA_STREAM_VIDEO | 4)
#define	DATA_STREAM_H264_NALUS                            		(DATA_STREAM | DATA_STREAM_VIDEO | 8)

/*
public static final int DATA_STREAM_H264_NAL 			= DATA_STREAM | DATA_STREAM_VIDEO | 4;
 */


/** Class: Portal constants */
#define	MAX_PORTAL_STREAMS_A_DEVICE                       		(6)
#define	MAX_PORTAL_CONTEXT_WORKERS                        		(2)
#define	MAX_PORTAL_OVERLAYS                               		(6)
#define	MAX_PORTAL_GENERATOR_SLOTS                        		(5)
#define	MAX_PORTAL_REQUEST_WAIT_TIME_MS                   		(30000)


/**
 * A portal ID is masked as follows:
 * 0xFFFFFFFF
 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
 * 0x0000F000 portal type
 * 0x00000300 direction
 * 0x000000FF portal id (the same between both devices)
 */

/** Class: Portal type */
#define	PORTAL_TYPE_ANY                                   		(0)
#define	PORTAL_TYPE_SCREEN                                		(0x1000)
#define	PORTAL_TYPE_BACK_CAM                              		(0x2000)
#define	PORTAL_TYPE_FRONT_CAM                             		(0x4000)
#define	PORTAL_TYPE_MASK                                  		(0xF000)
	
/** 
 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
 * */
#ifndef CLI_CPP
	typedef enum PortalType_t {
		/** Any type. The requested portal can be of any type. Which one depends on the application logic.
		 * */
			PortalType_Any                 	=	PORTAL_TYPE_ANY,
			/** The devices screen. */
			PortalType_Screen              	=	PORTAL_TYPE_SCREEN,
			/** The back facing camera. */
			PortalType_BackCam             	=	PORTAL_TYPE_BACK_CAM,
			/** The front facing camera. */
			PortalType_FrontCam            	=	PORTAL_TYPE_FRONT_CAM,
		} PortalType_t;

#	ifdef __cplusplus
	namespace PortalType {
			const PortalType_t Any                 	=	PortalType_Any                 ;
			const PortalType_t Screen              	=	PortalType_Screen              ;
			const PortalType_t BackCam             	=	PortalType_BackCam             ;
			const PortalType_t FrontCam            	=	PortalType_FrontCam            ;
	};
#	endif
#endif



/** Class: Portal status */
#define	PORTAL_STATUS_DISPOSED                            		(ENVIRONS_OBJECT_DISPOSED)
#define	PORTAL_STATUS_CREATED                             		(0)
#define	PORTAL_STATUS_CREATED_FROM_REQUEST                		(1)
#define	PORTAL_STATUS_CREATED_ASK_REQUEST                 		(2)
#define	PORTAL_STATUS_ESTABLISHED                         		(4)
#define	PORTAL_STATUS_STARTED                             		(6)

/**
 * Portal status enumeration.
 * */
#ifndef CLI_CPP
	typedef enum PortalStatus_t {
			PortalStatus_Disposed            	=	PORTAL_STATUS_DISPOSED,
			PortalStatus_Created             	=	PORTAL_STATUS_CREATED,
			PortalStatus_CreatedFromRequest  	=	PORTAL_STATUS_CREATED_FROM_REQUEST,
			PortalStatus_CreatedAskRequest   	=	PORTAL_STATUS_CREATED_ASK_REQUEST,
			PortalStatus_Established         	=	PORTAL_STATUS_ESTABLISHED,
			PortalStatus_Started             	=	PORTAL_STATUS_STARTED,

		} PortalStatus_t;

#	ifdef __cplusplus
	namespace PortalStatus {
			const PortalStatus_t Disposed            	=	PortalStatus_Disposed            ;
			const PortalStatus_t Created             	=	PortalStatus_Created             ;
			const PortalStatus_t CreatedFromRequest  	=	PortalStatus_CreatedFromRequest  ;
			const PortalStatus_t CreatedAskRequest   	=	PortalStatus_CreatedAskRequest   ;
			const PortalStatus_t Established         	=	PortalStatus_Established         ;
			const PortalStatus_t Started             	=	PortalStatus_Started             ;
	};
#	endif
#endif




/**
 * Portal Source Status enumeration.
 * */
#ifndef CLI_CPP
	typedef enum PortalSourceStatus_t {
		/** Deleteable. The portal object has been disabled.&nbsp;
		 * "Garbage Collection" should dispose and delete the object on the next occasion.
		 * */
			PortalSourceStatus_Deleteable          	=	0,
			/** The portal has just been created. */
			PortalSourceStatus_Created             	=	1,
			/** Initialized. The portal is initialized, that is the resources (threads, plugins, the pipeline) has been established or are ready to use */
			PortalSourceStatus_Initialized         	=	2,
			/** Active. The portal is initialized and actively streaming. */
			PortalSourceStatus_Active              	=	3,

		} PortalSourceStatus_t;

#	ifdef __cplusplus
	namespace PortalSourceStatus {
			const PortalSourceStatus_t Deleteable          	=	PortalSourceStatus_Deleteable          ;
			const PortalSourceStatus_t Created             	=	PortalSourceStatus_Created             ;
			const PortalSourceStatus_t Initialized         	=	PortalSourceStatus_Initialized         ;
			const PortalSourceStatus_t Active              	=	PortalSourceStatus_Active              ;
	};
#	endif
#endif




/** Class: Portal stream type */
#define	STREAMTYPE_UNKNOWN                                		(0)
#define	STREAMTYPE_IMAGES                                 		(0x10)
#define	STREAMTYPE_IMAGES_JPEG                            		(STREAMTYPE_IMAGES | 0x1)
#define	STREAMTYPE_IMAGES_PNG                             		(STREAMTYPE_IMAGES | 0x2)
#define	STREAMTYPE_VIDEO                                  		(0x20)
#define	STREAMTYPE_VIDEO_H264                             		(STREAMTYPE_VIDEO | 0x1)
	
/** 
 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
 * */
#ifndef CLI_CPP
	typedef enum PortalStreamType_t {
			PortalStreamType_Unknown             	=	STREAMTYPE_UNKNOWN,
			/** Sequence of jpeg images. 	*/
			PortalStreamType_Images              	=	STREAMTYPE_IMAGES,
			/** Sequence of jpeg images. 	*/
			PortalStreamType_ImagesJPEG          	=	STREAMTYPE_IMAGES_JPEG,
			/** Sequence of png images. 	*/
			PortalStreamType_ImagesPNG           	=	STREAMTYPE_IMAGES_PNG,
			/** Video stream. 						*/
			PortalStreamType_Video               	=	STREAMTYPE_VIDEO,
			/** Video stream H264. 						*/
			PortalStreamType_VideoH264           	=	STREAMTYPE_VIDEO_H264,
		} PortalStreamType_t;

#	ifdef __cplusplus
	namespace PortalStreamType {
			const PortalStreamType_t Unknown             	=	PortalStreamType_Unknown             ;
			const PortalStreamType_t Images              	=	PortalStreamType_Images              ;
			const PortalStreamType_t ImagesJPEG          	=	PortalStreamType_ImagesJPEG          ;
			const PortalStreamType_t ImagesPNG           	=	PortalStreamType_ImagesPNG           ;
			const PortalStreamType_t Video               	=	PortalStreamType_Video               ;
			const PortalStreamType_t VideoH264           	=	PortalStreamType_VideoH264           ;
	};
#	endif
#endif



/** Class: PortalInfo flag bits */
#define	PORTAL_INFO_FLAG_LOCATION                         		(0x1)
#define	PORTAL_INFO_FLAG_ANGLE                            		(0x2)
#define	PORTAL_INFO_FLAG_SIZE                             		(0x4)


/** Class: Portal messages and notifications */
#define	MSG_TYPE_PORTAL                                   		(5)
#define	MSG_PORTAL_ERROR                                  		(0x400)
#define	PORTAL_DIR_INCOMING                               		(0x200)
#define	PORTAL_DIR_OUTGOING                               		(0x100)
#define	PORTAL_DIR_MASK                                   		(0x300)
#define	NOTIFY_PORTAL                                     		(0x800)

#ifndef NDEBUG
	extern const char * MSG_PORTAL_Descriptions [ ];
#endif


#define	NOTIFY_PORTAL_INSTANCE                            		(0x100800)
#define	PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              		(NOTIFY_PORTAL_INSTANCE | 0x1)

// Portal message subtypes
#define	MSG_PORTAL_REQUEST_ID                             		(0)
#define	MSG_PORTAL_REQUEST                                		(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID)
#define	MSG_PORTAL_ASK_FOR_REQUEST_ID                     		(1)
#define	MSG_PORTAL_ASK_FOR_REQUEST                        		(NOTIFY_PORTAL 	| MSG_PORTAL_ASK_FOR_REQUEST_ID)
#define	MSG_PORTAL_PROVIDE_STREAM_ID                      		(2)
#define	MSG_PORTAL_PROVIDE_STREAM                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID)
#define	MSG_PORTAL_PROVIDE_IMAGES_ID                      		(3)
#define	MSG_PORTAL_PROVIDE_IMAGES                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID)
#define	MSG_PORTAL_REQUEST_FAIL_ID                        		(4)
#define	MSG_PORTAL_REQUEST_FAIL                           		(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID)
	
#define	MSG_PORTAL_STOP_ID                                		(5)
#define	MSG_PORTAL_STOP                                   		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID)
#define	MSG_PORTAL_STOP_ACK_ID                            		(6)
#define	MSG_PORTAL_STOP_ACK                               		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID)
#define	MSG_PORTAL_STOP_FAIL_ID                           		(7)
#define	MSG_PORTAL_STOP_FAIL                              		(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID)
#define	MSG_PORTAL_START_ID                               		(8)
#define	MSG_PORTAL_START                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID)
#define	MSG_PORTAL_START_ACK_ID                           		(9)
#define	MSG_PORTAL_START_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID)
#define	MSG_PORTAL_START_FAIL_ID                          		(10)
#define	MSG_PORTAL_START_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID)
#define	MSG_PORTAL_PAUSE_ID                               		(11)
#define	MSG_PORTAL_PAUSE                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID)
#define	MSG_PORTAL_PAUSE_ACK_ID                           		(12)
#define	MSG_PORTAL_PAUSE_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID)
#define	MSG_PORTAL_PAUSE_FAIL_ID                          		(13)
#define	MSG_PORTAL_PAUSE_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID)


#define	MSG_PORTAL_BUFFER_FULL_ID                         		(14)
#define	MSG_PORTAL_BUFFER_FULL                            		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID)
#define	MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  		(15)
#define	MSG_PORTAL_BUFFER_AVAIL_AGAIN                     		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID)
#define	MSG_PORTAL_IFRAME_REQUEST_ID                      		(16)
#define	MSG_PORTAL_IFRAME_REQUEST                         		(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID)

#define	MSG_PORTAL_MAX_COUNT                              		(16 + 1)


#define	NOTIFY_TYPE_PORTAL                                		((MSG_TYPE_PORTAL << 16))
#define	NOTIFY_PORTAL_ESTABLISHED                         		(0x80)
#define	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              		(NOTIFY_TYPE_PORTAL | 0x81)

#define	NOTIFY_PORTAL_REQUEST                             		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST)
#define	NOTIFY_PORTAL_ASK_REQUEST                         		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_ASK_FOR_REQUEST)
#define	NOTIFY_PORTAL_STREAM_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_IMAGES_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_INCOMING_ESTABLISHED                		(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING | NOTIFY_PORTAL_ESTABLISHED)
#define	NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING)
#define	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING)
#define	NOTIFY_PORTAL_PROVIDER_READY                      		(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK | NOTIFY_PORTAL_ESTABLISHED)
#define	NOTIFY_PORTAL_REQUEST_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_PROVIDE_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING)
	
#define	NOTIFY_PORTAL_STREAM_STARTED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK)
#define	NOTIFY_PORTAL_STREAM_PAUSED                       		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK)
#define	NOTIFY_PORTAL_STREAM_STOPPED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK)

#define	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             		(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF)

/**
 * Notify portal enumeration.
 * */



/**
 * Environs options set/get messages
 */
/** Class: Options type */
#define	MSG_TYPE_OPTIONS                                  		(6)
#define	MSG_TYPE_OPTIONS_RESPONSE                         		(7)
#define	MSG_OPTION_TYPE                                   		(0xF00)
#define	MSG_OPTION_SET                                    		(0x100)
#define	MSG_OPTION_GET                                    		(0x200)

// Transport options
#define	MSG_OPTION_TRANSPORT                              		(0x10)
#define	MSG_OPT_TRANSP_TCP_PORTAL                         		(MSG_OPTION_TRANSPORT | 0x1)
#define	MSG_OPT_TRANSP_TCP_PORTAL_SET                     		(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL)
#define	MSG_OPT_TRANSP_TCP_PORTAL_GET                     		(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL)

// Portal options
#define	MSG_OPTION_PORTAL                                 		(0x20)
#define	MSG_OPT_PORTAL_CENTER                             		(MSG_OPTION_PORTAL | 0x1)
#define	MSG_OPT_PORTAL_CENTER_SET                         		(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER)
#define	MSG_OPT_PORTAL_CENTER_GET                         		(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER)
#define	MSG_OPT_PORTAL_WH                                 		(MSG_OPTION_PORTAL | 0x2)
#define	MSG_OPT_PORTAL_WH_SET                             		(MSG_OPTION_SET | MSG_OPT_PORTAL_WH)
#define	MSG_OPT_PORTAL_INFO                               		(MSG_OPTION_PORTAL | 0x4)
#define	MSG_OPT_PORTAL_INFO_SET                           		(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO)
#define	MSG_OPT_PORTAL_INFO_GET                           		(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO)

// Physical contact options
#define	MSG_OPTION_CONTACT                                		(0x40)
#define	MSG_OPT_CONTACT_DIRECT                            		(MSG_OPTION_CONTACT | 0x1)
#define	MSG_OPT_CONTACT_DIRECT_SET                        		(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT)
#define	MSG_OPT_CONTACT_DIRECT_GET                        		(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT)
	
#define	NOTIFY_TYPE_OPTIONS                               		((MSG_TYPE_OPTIONS << 16))
#define	NOTIFY_PORTAL_LOCATION_CHANGED                    		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET)
#define	NOTIFY_PORTAL_SIZE_CHANGED                        		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET)
#define	NOTIFY_CONTACT_DIRECT_CHANGED                     		(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET)

/**
 * Notify options enumeration.
 * */


/*
 * Native file types to app
 */
#define	MSG_TYPE_FILE                                     		(3)
/** Class: File type */
// File types
#define	NATIVE_FILE_TYPE                                  		(0x400)
#define	NATIVE_FILE_TYPE_APP_DEFINED                      		(NATIVE_FILE_TYPE)
#define	NATIVE_FILE_TYPE_EXT_DEFINED                      		(NATIVE_FILE_TYPE | 1)
#define	NATIVE_FILE_TYPE_PARTS                            		(NATIVE_FILE_TYPE | 6)
#define	NATIVE_FILE_TYPE_ACK                              		(NATIVE_FILE_TYPE | 0xF)

#define	MSG_TYPE_MESSAGE                                  		(4)
#define	MESSAGE_FROM_APP                                  		(0x800)
#define	MESSAGE_APP_STRING                                		(MESSAGE_FROM_APP | 1)


#define	NOTIFY_TYPE_FILE                                  		((MSG_TYPE_FILE << 16))
#define	NOTIFY_TYPE_FILE_PROGRESS                         		(NOTIFY_TYPE_FILE | 0x20)

#define	NOTIFY_FILE_SEND_PROGRESS                         		(NOTIFY_TYPE_FILE_PROGRESS | 1)
#define	NOTIFY_FILE_RECEIVE_PROGRESS                      		(NOTIFY_TYPE_FILE_PROGRESS | 2)

/**
 * Notify file enumeration.
 * */
			/* TEst comment */



/*
 * Environs options data identifiers for onData
 */
	
/*
 * Native callback for errors
 */
#define	NOTIFY_TOUCHSOURCE                                		(0x40)
#define	NOTIFY_TOUCHSOURCE_STARTED                        		(NOTIFY_TOUCHSOURCE | 2)
#define	NOTIFY_TOUCHSOURCE_STOPPED                        		(NOTIFY_TOUCHSOURCE | 4)
	
#define	NOTIFY_TOUCHSOURCE_NOTAVAIL                       		(NOTIFY_TOUCHSOURCE | 8)
#define	NOTIFY_TOUCHSOURCE_FAILED                         		(NOTIFY_TOUCHSOURCE | 9)

/**
 * Notify touchsource enumeration.
 * */



/**
 * Environs human input declarations
 */
/**
 * Input types for human input
 * */
#define	INPUT_TYPE_CURSOR                                 		(0)
#define	INPUT_TYPE_FINGER                                 		(1)
#define	INPUT_TYPE_PEN                                    		(2)
#define	INPUT_TYPE_MARKER                                 		(4)
#define	INPUT_TYPE_BLOB                                   		(8)

/**
 * Input type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum InputType_t {
			InputType_Cursor              	=	INPUT_TYPE_CURSOR,
			InputType_Finger              	=	INPUT_TYPE_FINGER,
			InputType_Pen                 	=	INPUT_TYPE_PEN,
			InputType_Marker              	=	INPUT_TYPE_MARKER,
			InputType_Blob                	=	INPUT_TYPE_BLOB,

		} InputType_t;

#	ifdef __cplusplus
	namespace InputType {
			const InputType_t Cursor              	=	InputType_Cursor              ;
			const InputType_t Finger              	=	InputType_Finger              ;
			const InputType_t Pen                 	=	InputType_Pen                 ;
			const InputType_t Marker              	=	InputType_Marker              ;
			const InputType_t Blob                	=	InputType_Blob                ;
	};
#	endif
#endif




/**
 * Native callback for errors
 */
#define	NATIVE_EVENT_ERROR_MISC                           		(0x80)
#define	NATIVE_EVENT_DATA_CON_FAILED                      		(NATIVE_EVENT_ERROR_MISC | 3)
#define	NATIVE_EVENT_TOUCH_SOURCE_FAILED                  		(NATIVE_EVENT_ERROR_MISC | 4)

/**
 * Input states for a particular human input entity
 * */
#define	INPUT_STATE_ADD                                   		(1)
#define	INPUT_STATE_CHANGE                                		(2)
#define	INPUT_STATE_NOCHANGE                              		(3)
#define	INPUT_STATE_DROP                                  		(4)

/**
 * Input state enumeration.
 * */
#ifndef CLI_CPP
	typedef enum InputState_t {
			InputState_Add                 	=	INPUT_STATE_ADD,
			InputState_Change              	=	INPUT_STATE_CHANGE,
			InputState_NoChange            	=	INPUT_STATE_NOCHANGE,
			InputState_Drop                	=	INPUT_STATE_DROP,

		} InputState_t;

#	ifdef __cplusplus
	namespace InputState {
			const InputState_t Add                 	=	InputState_Add                 ;
			const InputState_t Change              	=	InputState_Change              ;
			const InputState_t NoChange            	=	InputState_NoChange            ;
			const InputState_t Drop                	=	InputState_Drop                ;
	};
#	endif
#endif



/**
 * Input commands for a particular human input entity
 * */
#define	INPUTSOURCE_COMMAND_INIT                          		(0)
#define	INPUTSOURCE_COMMAND_ADD                           		(1)
#define	INPUTSOURCE_COMMAND_CHANGE                        		(2)
#define	INPUTSOURCE_COMMAND_DROP                          		(4)
#define	INPUTSOURCE_COMMAND_CANCEL                        		(6)
#define	INPUTSOURCE_COMMAND_FLUSH                         		(8)
#define	INPUTSOURCE_COMMAND_FOLLOWUP                      		(0x80)


/**
 * Input source commands enumeration.
 * */
#ifndef CLI_CPP
	typedef enum InputCommand_t {
			InputCommand_Init                	=	INPUTSOURCE_COMMAND_INIT,
			InputCommand_Add                 	=	INPUTSOURCE_COMMAND_ADD,
			InputCommand_Change              	=	INPUTSOURCE_COMMAND_CHANGE,
			InputCommand_Drop                	=	INPUTSOURCE_COMMAND_DROP,
			InputCommand_Cancel              	=	INPUTSOURCE_COMMAND_CANCEL,
			InputCommand_Flush               	=	INPUTSOURCE_COMMAND_FLUSH,
			InputCommand_FollowUp            	=	INPUTSOURCE_COMMAND_FOLLOWUP,

		} InputCommand_t;

#	ifdef __cplusplus
	namespace InputCommand {
			const InputCommand_t Init                	=	InputCommand_Init                ;
			const InputCommand_t Add                 	=	InputCommand_Add                 ;
			const InputCommand_t Change              	=	InputCommand_Change              ;
			const InputCommand_t Drop                	=	InputCommand_Drop                ;
			const InputCommand_t Cancel              	=	InputCommand_Cancel              ;
			const InputCommand_t Flush               	=	InputCommand_Flush               ;
			const InputCommand_t FollowUp            	=	InputCommand_FollowUp            ;
	};
#	endif
#endif



/**
 * Environs Start notifications
 */
/** Class: Environs type */
#define	MSG_TYPE_ENVIRONS                                 		(8)

#define	NOTIFY_TYPE_ENVIRONS                              		((MSG_TYPE_ENVIRONS << 16))
#define	NOTIFY_START                                      		(NOTIFY_TYPE_ENVIRONS | 0x100)
#define	NOTIFY_START_IN_PROGRESS                          		(NOTIFY_START | 1)
#define	NOTIFY_START_ENABLING_WIFI                        		(NOTIFY_START | 2)
#define	NOTIFY_START_STREAM_DECODER                       		(NOTIFY_START | 3)
#define	NOTIFY_START_INIT                                 		(NOTIFY_START | 4)

#define	NOTIFY_START_INIT_FAILED                          		(NOTIFY_START | 7)
#define	NOTIFY_START_METHOD_FAILED                        		(NOTIFY_START | 8)
#define	NOTIFY_START_DECODER_FAILED                       		(NOTIFY_START | 9)
#define	NOTIFY_START_WIFI_FAILED                          		(NOTIFY_START | 10)
#define	NOTIFY_START_FAILED                               		(NOTIFY_START | 11)

#define	NOTIFY_START_INIT_SUCCESS                         		(NOTIFY_START | 12)
#define	NOTIFY_START_SUCCESS                              		(NOTIFY_START | 13)
#define	NOTIFY_START_LISTEN_SUCCESS                       		(NOTIFY_START | 14)
#define	NOTIFY_START_LISTENDA_SUCCESS                     		(NOTIFY_START | 15)

/**
 * Environs Stop notifications
 */
#define	NOTIFY_STOP                                       		(NOTIFY_TYPE_ENVIRONS | 0x200)
#define	NOTIFY_STOP_BEGIN                                 		(NOTIFY_STOP | 1)
#define	NOTIFY_STOP_IN_PROGRESS                           		(NOTIFY_STOP | 2)
#define	NOTIFY_STOP_FAILED                                		(NOTIFY_STOP | 10)
#define	NOTIFY_STOP_SUCCESS                               		(NOTIFY_STOP | 11)
#define	NOTIFY_STOP_RELEASED                              		(NOTIFY_STOP | 12)
	
/**
 * Environs socket notifications
 */
#define	NOTIFY_SOCKET                                     		(NOTIFY_TYPE_ENVIRONS | 0x400)
#define	NOTIFY_SOCKET_BIND_FAILED                         		(NOTIFY_SOCKET | 7)
#define	NOTIFY_SOCKET_LISTEN_FAILED                       		(NOTIFY_SOCKET | 8)
#define	NOTIFY_SOCKET_FAILED                              		(NOTIFY_SOCKET | 9)

/**
 * Environs socket notifications
 */
#define	NOTIFY_SETTINGS                                   		(NOTIFY_TYPE_ENVIRONS | 0x480)
#define	NOTIFY_SETTINGS_CHANGED                           		(NOTIFY_SETTINGS | 0x1)
	
/**
 * Environs device paring notifications
 */
#define	NOTIFY_PAIRING                                    		(NOTIFY_TYPE_ENVIRONS | 0x800)
#define	NOTIFY_DEVICE_ON_SURFACE                          		(NOTIFY_PAIRING | 1)
#define	NOTIFY_DEVICE_NOT_ON_SURFACE                      		(NOTIFY_PAIRING | 2)
#define	NOTIFY_DEVICE_FLAGS_UPDATE                        		(NOTIFY_PAIRING | 8)


/**
 * Notify environs enumeration.
 * */














/**
 * Environs Start notifications
 */
/** Class: Environs type */
#define	MSG_TYPE_SENSOR                                   		(9)
#define	MSG_TYPE_MAX_COUNT                                		(MSG_TYPE_SENSOR + 1)

/**
 * Environs mediator filter constants
 */
#define	MEDIATOR_FILTER_NONE                              		(0)
#define	MEDIATOR_FILTER_AREA                              		(1)
#define	MEDIATOR_FILTER_AREA_AND_APP                      		(2)
/// Disable all devicelist notifications
#define	MEDIATOR_FILTER_ALL                               		(8)


/**
 * Environs mediator filter enumeration.
 * */
#ifndef CLI_CPP
	typedef enum MediatorFilter_t {
			MediatorFilter_None                	=	MEDIATOR_FILTER_NONE,
			MediatorFilter_Area                	=	MEDIATOR_FILTER_AREA,
			MediatorFilter_AreaAndApp          	=	MEDIATOR_FILTER_AREA_AND_APP,
			MediatorFilter_All                 	=	MEDIATOR_FILTER_ALL,

		} MediatorFilter_t;

#	ifdef __cplusplus
	namespace MediatorFilter {
			const MediatorFilter_t None                	=	MediatorFilter_None                ;
			const MediatorFilter_t Area                	=	MediatorFilter_Area                ;
			const MediatorFilter_t AreaAndApp          	=	MediatorFilter_AreaAndApp          ;
			const MediatorFilter_t All                 	=	MediatorFilter_All                 ;
	};
#	endif
#endif




/**
 * Environs mediator broadcast found values
 */
#define	DEVICEINFO_DEVICE_MEDIATOR                        		(0)
#define	DEVICEINFO_DEVICE_BROADCAST                       		(1)
#define	DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          		(2)


/**
 * Device source type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum DeviceSourceType_t {
			DeviceSourceType_Mediator            	=	DEVICEINFO_DEVICE_MEDIATOR,
			DeviceSourceType_Broadcast           	=	DEVICEINFO_DEVICE_BROADCAST,
			DeviceSourceType_MediatorBroadcast   	=	DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR,

		} DeviceSourceType_t;

#	ifdef __cplusplus
	namespace DeviceSourceType {
			const DeviceSourceType_t Mediator            	=	DeviceSourceType_Mediator            ;
			const DeviceSourceType_t Broadcast           	=	DeviceSourceType_Broadcast           ;
			const DeviceSourceType_t MediatorBroadcast   	=	DeviceSourceType_MediatorBroadcast   ;
	};
#	endif
#endif




/**
 * Environs mediator broadcast message Start bytes
 */
#define	MEDIATOR_BROADCAST_DEVICETYPE_START               		(11)
#define	MEDIATOR_BROADCAST_DEVICEID_START                 		(12)
#define	MEDIATOR_BROADCAST_DEVICEID_ABS_START             		(16)
#define	MEDIATOR_BROADCAST_PORTS_START                    		(20)
#define	MEDIATOR_BROADCAST_PORTS_ABS_START                		(24)
#define	MEDIATOR_BROADCAST_PLATFORM_START                 		(24)
#define	MEDIATOR_BROADCAST_PLATFORM_ABS_START             		(28)
#define	MEDIATOR_BROADCAST_DESC_START                     		(28)
#define	MEDIATOR_BROADCAST_DESC_ABS_START                 		(32)

#define	MEDIATOR_BROADCAST_STATUS_SRCDEVICEID_ABS_START   		(16)
#define	MEDIATOR_BROADCAST_STATUS_DEVICEID_ABS_START      		(20)
#define	MEDIATOR_BROADCAST_STATUS_CLEAR_SET_ABS_START     		(24)
#define	MEDIATOR_BROADCAST_STATUS_FLAGS_ABS_START         		(28)
#define	MEDIATOR_BROADCAST_STATUS_DESC_ABS_START          		(40)

/**
 * Environs mediator broadcast message constants
 */
#define	TYPES_SEPERATOR_1_ENVIRONS                        		(28)
#define	MEDIATOR_BROADCAST_SPARE_ID_LEN                   		(28)

/**
 * Environs DeviceInstance struct Start bytes
 */
#define	MAX_NAMEPROPERTY                                  		(30)
/** Ignore: for Resolver */
#define	MAX_LENGTH_AREA_NAME                              		(MAX_NAMEPROPERTY + 1)
/** Ignore: for Resolver */
#define	MAX_LENGTH_APP_NAME                               		(MAX_NAMEPROPERTY + 1)
/** Ignore: for Resolver */
#define	MAX_LENGTH_DEVICE_NAME                            		(MAX_NAMEPROPERTY + 1)

#define	DEVICEINFO_DEVICEID_START                         		(0)
#define	DEVICEINFO_NATIVE_ID_START                        		(4)
#define	DEVICEINFO_IP_START                               		(DEVICEINFO_NATIVE_ID_START + 4)
#define	DEVICEINFO_IPe_START                              		(DEVICEINFO_IP_START + 4)
#define	DEVICEINFO_TCP_PORT_START                         		(DEVICEINFO_IPe_START + 4)
#define	DEVICEINFO_UDP_PORT_START                         		(DEVICEINFO_TCP_PORT_START + 2)
#define	DEVICEINFO_UPDATES_START                          		(DEVICEINFO_UDP_PORT_START + 2)
#define	DEVICEINFO_PLATFORM_START                         		(DEVICEINFO_UPDATES_START + 4)
#define	DEVICEINFO_BROADCAST_START                        		(DEVICEINFO_PLATFORM_START + 4)
#define	DEVICEINFO_UNAVAILABLE_START                      		(DEVICEINFO_BROADCAST_START + 1)
#define	DEVICEINFO_ISCONNECTED_START                      		(DEVICEINFO_UNAVAILABLE_START + 1)
#define	DEVICEINFO_HASAPPAREA_START                       		(DEVICEINFO_ISCONNECTED_START + 2)
#define	DEVICEINFO_DEVICETYPE_START                       		(DEVICEINFO_ISCONNECTED_START + 2)
#define	DEVICEINFO_DEVICENAME_START                       		(DEVICEINFO_HASAPPAREA_START + 1)
#define	DEVICEINFO_AREANAME_START                         		(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1))
#define	DEVICEINFO_APPNAME_START                          		(DEVICEINFO_AREANAME_START + (MAX_NAMEPROPERTY + 1))
#define	DEVICEINFO_FLAGS_START                            		(DEVICEINFO_APPNAME_START + (MAX_NAMEPROPERTY + 1))
#define	DEVICEINFO_OBJID_START                            		(DEVICEINFO_FLAGS_START + 2)


/**
 * Environs mediator notifications
 */
#define	NOTIFY_MEDIATOR                                   		(NOTIFY_TYPE_ENVIRONS | 0x1000)
#define	NOTIFY_MEDIATOR_SERVER                            		(NOTIFY_MEDIATOR | 0x100)
	
#define	NOTIFY_MEDIATOR_DEVICE_CHANGED                    		(NOTIFY_MEDIATOR | 1)
#define	NOTIFY_MEDIATOR_DEVICE_ADDED                      		(NOTIFY_MEDIATOR | 2)
#define	NOTIFY_MEDIATOR_DEVICE_REMOVED                    		(NOTIFY_MEDIATOR | 4)
#define	NOTIFY_MEDIATOR_SERVER_CONNECTED                  		(NOTIFY_MEDIATOR | 20)
#define	NOTIFY_MEDIATOR_SERVER_DISCONNECTED               		(NOTIFY_MEDIATOR | 21)

#define	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      		(NOTIFY_MEDIATOR | 51)
#define	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               		(NOTIFY_MEDIATOR | 52)

#define	NOTIFY_MEDIATOR_MED_CHANGED                       		(NOTIFY_MEDIATOR | 11)
	
#define	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                		(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  		(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                		(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 		(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER)
	
#define	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              		(NOTIFY_MEDIATOR | 41)
#define	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           		(NOTIFY_MEDIATOR | 42)


/**
 * Notify mediator enumeration.
 * */










/**
 * Deviceflags for internalFlags of DeviceInfo objects
 */
#define	DEVICEFLAGS_INTERNAL_NATIVE_READY                 		(0x1)
#define	DEVICEFLAGS_INTERNAL_PLATFORM_READY               		(0x2)
#define	DEVICEFLAGS_INTERNAL_OBSERVER_READY               		(0x4)
#define	DEVICEFLAGS_INTERNAL_MESSAGE_READY                		(0x8)
#define	DEVICEFLAGS_INTERNAL_DATA_READY                   		(0x10)
#define	DEVICEFLAGS_INTERNAL_SENSOR_READY                 		(0x20)
#define	DEVICEFLAGS_INTERNAL_NOTIFY_MASK                  		(0xFF)
#define	DEVICEFLAGS_INTERNAL_CP_NATIVE_READY              		(0x0100)
#define	DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY            		(0x0200)
#define	DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY            		(0x0400)
#define	DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY             		(0x0800)
#define	DEVICEFLAGS_INTERNAL_CP_DATA_READY                		(0x1000)
#define	DEVICEFLAGS_INTERNAL_CP_SENSOR_READY              		(0x2000)
#define	DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK               		(0xFF00)


/**
 * Deviceflags for internalFlags enumeration.
 * */
#ifndef CLI_CPP
	typedef enum DeviceFlagsInternal_t {
			DeviceFlagsInternal_NativeReady         	=	DEVICEFLAGS_INTERNAL_NATIVE_READY,
			DeviceFlagsInternal_PlatformReady       	=	DEVICEFLAGS_INTERNAL_PLATFORM_READY,
			DeviceFlagsInternal_ObserverReady       	=	DEVICEFLAGS_INTERNAL_OBSERVER_READY,
			DeviceFlagsInternal_MessageReady        	=	DEVICEFLAGS_INTERNAL_MESSAGE_READY,
			DeviceFlagsInternal_DataReady           	=	DEVICEFLAGS_INTERNAL_DATA_READY,
			DeviceFlagsInternal_SensorReady         	=	DEVICEFLAGS_INTERNAL_SENSOR_READY,
			DeviceFlagsInternal_NotifyMask          	=	DEVICEFLAGS_INTERNAL_NOTIFY_MASK,

			DeviceFlagsInternal_CPNativeReady       	=	DEVICEFLAGS_INTERNAL_CP_NATIVE_READY,
			DeviceFlagsInternal_CPPlatformReady     	=	DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY,
			DeviceFlagsInternal_CPObserverReady     	=	DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY,
			DeviceFlagsInternal_CPMessageReady      	=	DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY,
			DeviceFlagsInternal_CPDataReady         	=	DEVICEFLAGS_INTERNAL_CP_DATA_READY,
			DeviceFlagsInternal_CPSensorReady       	=	DEVICEFLAGS_INTERNAL_CP_SENSOR_READY,
			DeviceFlagsInternal_CPNotifyMask        	=	DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK,

		} DeviceFlagsInternal_t;

#	ifdef __cplusplus
	namespace DeviceFlagsInternal {
			const DeviceFlagsInternal_t NativeReady         	=	DeviceFlagsInternal_NativeReady         ;
			const DeviceFlagsInternal_t PlatformReady       	=	DeviceFlagsInternal_PlatformReady       ;
			const DeviceFlagsInternal_t ObserverReady       	=	DeviceFlagsInternal_ObserverReady       ;
			const DeviceFlagsInternal_t MessageReady        	=	DeviceFlagsInternal_MessageReady        ;
			const DeviceFlagsInternal_t DataReady           	=	DeviceFlagsInternal_DataReady           ;
			const DeviceFlagsInternal_t SensorReady         	=	DeviceFlagsInternal_SensorReady         ;
			const DeviceFlagsInternal_t NotifyMask          	=	DeviceFlagsInternal_NotifyMask          ;
			const DeviceFlagsInternal_t CPNativeReady       	=	DeviceFlagsInternal_CPNativeReady       ;
			const DeviceFlagsInternal_t CPPlatformReady     	=	DeviceFlagsInternal_CPPlatformReady     ;
			const DeviceFlagsInternal_t CPObserverReady     	=	DeviceFlagsInternal_CPObserverReady     ;
			const DeviceFlagsInternal_t CPMessageReady      	=	DeviceFlagsInternal_CPMessageReady      ;
			const DeviceFlagsInternal_t CPDataReady         	=	DeviceFlagsInternal_CPDataReady         ;
			const DeviceFlagsInternal_t CPSensorReady       	=	DeviceFlagsInternal_CPSensorReady       ;
			const DeviceFlagsInternal_t CPNotifyMask        	=	DeviceFlagsInternal_CPNotifyMask        ;
	};
#	endif
#endif




/**
 * Environs network notifications
 */
#define	NOTIFY_NETWORK                                    		(NOTIFY_TYPE_ENVIRONS | 0x2000)
#define	NOTIFY_NETWORK_CHANGED                            		(NOTIFY_NETWORK | 0x1)

/**
 * Notify network enumeration.
 * */


/** Ignore: for Resolver */
#define	META_MSG_IDENT                                    		("~META~:")
/** Ignore: for Resolver */
#define	META_MSG_NAME_ID                                  		(" NAME ")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_AREA_NAME                        		("Environs")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_APP_NAME                         		("HCMDefaultApp")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_DEVICE_NAME                      		("DefaultDevice")
/** Ignore: for Resolver */
#define	ENVIRONS_STUNT_MAX_TRY                            		(15)
/** Ignore: for Resolver */
#define	ENVIRONS_STUN_MAX_TRY                             		(10)


/**
 * Environs network notifications
 */
#define	NOTIFY_TRACKER                                    		(NOTIFY_TYPE_ENVIRONS | 0x4000)

#define	NOTIFY_TRACKER_FAILED_FLAG                        		(0x8)

#define	NOTIFY_TRACKER_ENABLED                            		(NOTIFY_TRACKER | 0x1)
#define	NOTIFY_TRACKER_CHANGED                            		(NOTIFY_TRACKER | 0x2)
#define	NOTIFY_TRACKER_DISABLED                           		(NOTIFY_TRACKER | 0x4)
#define	NOTIFY_TRACKER_ENABLE_FAILED                      		(NOTIFY_TRACKER | NOTIFY_TRACKER_FAILED_FLAG)

#define	NOTIFY_TRACKER_STATE_INIT_SENSOR                  		(NOTIFY_TRACKER | 0x10)
#define	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           		(NOTIFY_TRACKER_STATE_INIT_SENSOR | NOTIFY_TRACKER_FAILED_FLAG)
#define	NOTIFY_TRACKER_STATE_START                        		(NOTIFY_TRACKER | 0x20)
#define	NOTIFY_TRACKER_STATE_START_FAILED                 		(NOTIFY_TRACKER | NOTIFY_TRACKER_STATE_START | NOTIFY_TRACKER_FAILED_FLAG)
#define	NOTIFY_TRACKER_STATE_STOP                         		(NOTIFY_TRACKER | 0x40)

/**
 * Notify tracker enumeration.
 * */






/**
 * Device types. Obsolete. Should not be used anymore.
 * Type: char
 */
#define	DEVICE_TYPE_DISPLAY                               		('D')
#define	DEVICE_TYPE_MULTITACTION                          		('M')
#define	DEVICE_TYPE_SURFACE1                              		('R')
#define	DEVICE_TYPE_SURFACE2                              		('S')
#define	DEVICE_TYPE_TABLET                                		('T')
#define	DEVICE_TYPE_UNKNOWN                               		('U')
#define	DEVICE_TYPE_SMARTPHONE                            		('P')


/**
 * Device queue commands.
 * Type: int
 */
#define	DEVICELIST_QUEUE_COMMAND_RELOAD                   		(0)
#define	DEVICELIST_QUEUE_COMMAND_CLEAR                    		(1)
#define	DEVICELIST_QUEUE_COMMAND_APPEND                   		(2)
#define	DEVICELIST_QUEUE_COMMAND_UPDATE                   		(3)
#define	DEVICELIST_QUEUE_COMMAND_INSERT_AT                		(4)
#define	DEVICELIST_QUEUE_COMMAND_REMOVE_AT                		(5)
#define	DEVICELIST_QUEUE_COMMAND_INSERT_CALL              		(6)
#define	DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             		(7)
#define	DEVICELIST_QUEUE_COMMAND_LOCK                     		(8)


/**
 * Device display orientation types used in Device.Display.h
 * Type: char
 */
#define	DISPLAY_ORIENTATION_LANDSCAPE                     		(0)
#define	DISPLAY_ORIENTATION_PORTRAIT                      		(1)


/**
 * Device activity / connectivity flags
 * Type: int
 */
#define	DEVICE_ACTIVITY_MAIN_CONNECTED                    		(0x1)
#define	DEVICE_ACTIVITY_COMDAT_CONNECTED                  		(0x2)
#define	DEVICE_ACTIVITY_UDP_CONNECTED                     		(0x4)
#define	DEVICE_ACTIVITY_CONNECTED                         		(0x10)
#define	DEVICE_ACTIVITY_REQUESTOR                         		(0x100)
#define	DEVICE_ACTIVITY_RESPONDER                         		(0x200)
#define	DEVICE_ACTIVITY_LISTENER_CLOSED                   		(0x8000)
#define	DEVICE_ACTIVITY_PLATFORM_DISPOSED                 		(0x1000)
#define	DEVICE_ACTIVITY_PLATFORM_PREDISPOSED              		(0x2000)
#define	DEVICE_ACTIVITY_ABORTED                           		(0x4000)

#define	DEVICE_ACTIVITY_MAIN_INIT                         		(0x10000)
#define	DEVICE_ACTIVITY_COMDAT_INIT                       		(0x20000)
#define	DEVICE_ACTIVITY_UDP_INIT                          		(0x40000)


/**
 * Environs common native declarations
 *  
 */
#define	MEDIATOR_BUFFER_SIZE_MAX                          		(65535)
#define	MEDIATOR_REC_BUFFER_SIZE_MAX_MOBILE               		((350 * 1024))
#define	MEDIATOR_REC_BUFFER_SIZE_MAX_FULL                 		((650 * 1024))
#define	ENVIRONS_SEND_SIZE_MAX                            		((40 * 1024 * 1024))



/**
 * Extension plugin interface type
 * Type: int
 */
#define	INTERFACE_TYPE_UNKNOWN                            		(0)
/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
#define	INTERFACE_TYPE_CAPTURE                            		(1)
/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
#define	INTERFACE_TYPE_RENDER                             		(2)
/** An Encoder encodes the rendered image to a target format / stream. */
#define	INTERFACE_TYPE_ENCODER                            		(3)
/** A Decoder decodes stream packets to images */
#define	INTERFACE_TYPE_DECODER                            		(4)
/** A Tracker that analyzes raw images for objects, touches, etc. */
#define	INTERFACE_TYPE_TRACKER                            		(5)
/** A Sensor that implements a sensor of type SensorType_t */
#define	INTERFACE_TYPE_SENSOR                             		(6)
/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
#define	INTERFACE_TYPE_INPUT_RECOGNIZER                   		(10)
/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
#define	INTERFACE_TYPE_ORIENTATION_RECOGNIZER             		(11)
/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
#define	INTERFACE_TYPE_EXTENSION_THREAD                   		(12)


/** 
 * Extension plugin interface type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum InterfaceType_t {
			InterfaceType_Unknown             	=	INTERFACE_TYPE_UNKNOWN,
			/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
			InterfaceType_Capture             	=	INTERFACE_TYPE_CAPTURE,
			/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
			InterfaceType_Render              	=	INTERFACE_TYPE_RENDER,
			/** An Encoder encodes the rendered image to a target format / stream. */
			InterfaceType_Encoder             	=	INTERFACE_TYPE_ENCODER,
			/** A Decoder decodes stream packets to images */
			InterfaceType_Decoder             	=	INTERFACE_TYPE_DECODER,
			/** A Tracker that analyzes raw images for objects, touches, etc. */
			InterfaceType_Tracker             	=	INTERFACE_TYPE_TRACKER,
			/** A Sensor that implements a sensor of type SensorType_t */
			InterfaceType_Sensor              	=	INTERFACE_TYPE_SENSOR,
			/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InterfaceType_InputRecognizer     	=	INTERFACE_TYPE_INPUT_RECOGNIZER,
			/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InterfaceType_OrientationRecognizer          	=	INTERFACE_TYPE_ORIENTATION_RECOGNIZER,
			/** An external implementation of a thread function. */
			InterfaceType_ExtThread           	=	INTERFACE_TYPE_EXTENSION_THREAD,

		} InterfaceType_t;

#	ifdef __cplusplus
	namespace InterfaceType {
			const InterfaceType_t Unknown             	=	InterfaceType_Unknown             ;
			const InterfaceType_t Capture             	=	InterfaceType_Capture             ;
			const InterfaceType_t Render              	=	InterfaceType_Render              ;
			const InterfaceType_t Encoder             	=	InterfaceType_Encoder             ;
			const InterfaceType_t Decoder             	=	InterfaceType_Decoder             ;
			const InterfaceType_t Tracker             	=	InterfaceType_Tracker             ;
			const InterfaceType_t Sensor              	=	InterfaceType_Sensor              ;
			const InterfaceType_t InputRecognizer     	=	InterfaceType_InputRecognizer     ;
			const InterfaceType_t OrientationRecognizer          	=	InterfaceType_OrientationRecognizer          ;
			const InterfaceType_t ExtThread           	=	InterfaceType_ExtThread           ;
	};
#	endif
#endif




/**
 * Capture subtype
 * Type: int
 */
#define	CAPTURE_TYPE_UNKNOWN                              		(0)
/** A screen such as the dekstop window,
 *  where the device may cover only part of the display.
 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
#define	CAPTURE_TYPE_SCREEN                               		(1)
/** An application window, where each device may have a different app window and may cover only part of the window. */
#define	CAPTURE_TYPE_APP_WINDOW                           		(2)
/** Camera */
#define	CAPTURE_TYPE_CAMERA                               		(6)

/** 
 * Capture subtype enumeration.
 * */
#ifndef CLI_CPP
	typedef enum CaptureType_t {
			CaptureType_Unknown             	=	CAPTURE_TYPE_UNKNOWN,
		/** A screen such as the dekstop window, 
		 *  where the device may cover only part of the display.
		 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
			CaptureType_Screen              	=	CAPTURE_TYPE_SCREEN,
			/** An application window, where each device may have a different app window and may cover only part of the window. */
			CaptureType_AppWindow           	=	CAPTURE_TYPE_APP_WINDOW,
			/** Camera */
			CaptureType_Camera              	=	CAPTURE_TYPE_CAMERA,
		} CaptureType_t;

#	ifdef __cplusplus
	namespace CaptureType {
			const CaptureType_t Unknown             	=	CaptureType_Unknown             ;
			const CaptureType_t Screen              	=	CaptureType_Screen              ;
			const CaptureType_t AppWindow           	=	CaptureType_AppWindow           ;
			const CaptureType_t Camera              	=	CaptureType_Camera              ;
	};
#	endif
#endif




/**
 * Portal stage buffer data type
 * Type: int
 */
#define	PORTAL_BUFFERTYPE_UNKNOWN                         		(0)
/** Windows ARGB. */
#define	PORTAL_BUFFERTYPE_ARGB                            		(0x1)
/** Windows ARGB and the associated HBITMAP handle. */
#define	PORTAL_BUFFERTYPE_ARGB_HANDLE                     		(0x2)
/** iOS ARGB. */
#define	PORTAL_BUFFERTYPE_BGRA                            		(0x3)
/** RGB 24bit. */
#define	PORTAL_BUFFERTYPE_RGB                             		(0x4)
/** BGR 24bit. */
#define	PORTAL_BUFFERTYPE_BGR                             		(0x5)
/** I420. */
#define	PORTAL_BUFFERTYPE_YUV420                          		(0x10)
/** YV12. */
#define	PORTAL_BUFFERTYPE_YV12                            		(0x12)
/** YUY2. */
#define	PORTAL_BUFFERTYPE_YUV2                            		(0x14)
/** NV12. */
#define	PORTAL_BUFFERTYPE_NV12                            		(0x16)
/** GDIBitmap. */
#define	PORTAL_BUFFERTYPE_GDI_BITMAP                      		(0x100)
/** The data follows either D3D or OpenGL texture format. */
#define	PORTAL_BUFFERTYPE_TEXTURE_3D                      		(0x1000)
/** The data follows either D3D or OpenGL buffer format. */
#define	PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  		(0x2000)
/** CVPixelBufferRef of apple platforms. */
#define	PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              		(0x3000)

/** 
 * Portal stage buffer data type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum PortalBufferType_t {
			PortalBufferType_Unknown             	=	PORTAL_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			PortalBufferType_ARGB                	=	PORTAL_BUFFERTYPE_ARGB,
			/** Windows ARGB and the associated HBITMAP handle. */
			PortalBufferType_ARGBHandle          	=	PORTAL_BUFFERTYPE_ARGB_HANDLE,
			/** iOS ARGB. */
			PortalBufferType_BGRA                	=	PORTAL_BUFFERTYPE_BGRA,
			/** RGB 24bit. */
			PortalBufferType_RGB                 	=	PORTAL_BUFFERTYPE_RGB,
			/** BGR 24bit. */
			PortalBufferType_BGR                 	=	PORTAL_BUFFERTYPE_BGR,
			/** I420. */
			PortalBufferType_YUV420              	=	PORTAL_BUFFERTYPE_YUV420,
			/** YV12. */
			PortalBufferType_YV12                	=	PORTAL_BUFFERTYPE_YV12,
			/** YUY2. */
			PortalBufferType_YUY2                	=	PORTAL_BUFFERTYPE_YUV2,
			/** NV12. */
			PortalBufferType_NV12                	=	PORTAL_BUFFERTYPE_NV12,
			/** GDIBitmap. */
			PortalBufferType_GDIBitmap           	=	PORTAL_BUFFERTYPE_GDI_BITMAP,
			/** The data follows either D3D or OpenGL texture format. */
			PortalBufferType_Texture3D           	=	PORTAL_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			PortalBufferType_PixelBuffer3D       	=	PORTAL_BUFFERTYPE_PIXELBUFFER_3D,
			/** CVPixelBufferRef of apple platforms. */
			PortalBufferType_CVPixelBufferIOSX   	=	PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX,
		} PortalBufferType_t;

#	ifdef __cplusplus
	namespace PortalBufferType {
			const PortalBufferType_t Unknown             	=	PortalBufferType_Unknown             ;
			const PortalBufferType_t ARGB                	=	PortalBufferType_ARGB                ;
			const PortalBufferType_t ARGBHandle          	=	PortalBufferType_ARGBHandle          ;
			const PortalBufferType_t BGRA                	=	PortalBufferType_BGRA                ;
			const PortalBufferType_t RGB                 	=	PortalBufferType_RGB                 ;
			const PortalBufferType_t BGR                 	=	PortalBufferType_BGR                 ;
			const PortalBufferType_t YUV420              	=	PortalBufferType_YUV420              ;
			const PortalBufferType_t YV12                	=	PortalBufferType_YV12                ;
			const PortalBufferType_t YUY2                	=	PortalBufferType_YUY2                ;
			const PortalBufferType_t NV12                	=	PortalBufferType_NV12                ;
			const PortalBufferType_t GDIBitmap           	=	PortalBufferType_GDIBitmap           ;
			const PortalBufferType_t Texture3D           	=	PortalBufferType_Texture3D           ;
			const PortalBufferType_t PixelBuffer3D       	=	PortalBufferType_PixelBuffer3D       ;
			const PortalBufferType_t CVPixelBufferIOSX   	=	PortalBufferType_CVPixelBufferIOSX   ;
	};
#	endif
#endif




/**
 * Capture plugin data buffer type
 * Type: int
 */
#define	CAPTURE_BUFFERTYPE_UNKNOWN                        		(0)
/** The data is stored as pixel data usually in rgba order. */
#define	CAPTURE_BUFFERTYPE_PIXELBUFFER                    		(1)
/** The data follows either D3D or OpenGL texture format. */
#define	CAPTURE_BUFFERTYPE_TEXTURE_3D                     		(10)
/** The data follows either D3D or OpenGL buffer format. */
#define	CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 		(11)

/**
 * Capture plugin data buffer type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum CaptureBufferType_t {
			CaptureBufferType_Unknown             	=	CAPTURE_BUFFERTYPE_UNKNOWN,
			/** The data is stored as pixel data usually in rgba order. */
			CaptureBufferType_PixelBuffer         	=	CAPTURE_BUFFERTYPE_PIXELBUFFER,
			/** The data follows either D3D or OpenGL texture format. */
			CaptureBufferType_Texture3D           	=	CAPTURE_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			CaptureBufferType_PixelBuffer3D       	=	CAPTURE_BUFFERTYPE_PIXELBUFFER_3D,

		} CaptureBufferType_t;

#	ifdef __cplusplus
	namespace CaptureBufferType {
			const CaptureBufferType_t Unknown             	=	CaptureBufferType_Unknown             ;
			const CaptureBufferType_t PixelBuffer         	=	CaptureBufferType_PixelBuffer         ;
			const CaptureBufferType_t Texture3D           	=	CaptureBufferType_Texture3D           ;
			const CaptureBufferType_t PixelBuffer3D       	=	CaptureBufferType_PixelBuffer3D       ;
	};
#	endif
#endif




/**
 * Encoder buffer data type
 * Type: int
 */
#define	ENCODER_BUFFERTYPE_UNKNOWN                        		(0)
/** Windows ARGB. */
#define	ENCODER_BUFFERTYPE_ARGB                           		(1)
/** I420. */
#define	ENCODER_BUFFERTYPE_YUV420                         		(10)

/** 
 * Encoder buffer data type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum EncoderBufferType_t {
			EncoderBufferType_Unknown             	=	ENCODER_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			EncoderBufferType_ARGB                	=	ENCODER_BUFFERTYPE_ARGB,
			/** I420. */
			EncoderBufferType_YUV420              	=	ENCODER_BUFFERTYPE_YUV420,
		} EncoderBufferType_t;

#	ifdef __cplusplus
	namespace EncoderBufferType {
			const EncoderBufferType_t Unknown             	=	EncoderBufferType_Unknown             ;
			const EncoderBufferType_t ARGB                	=	EncoderBufferType_ARGB                ;
			const EncoderBufferType_t YUV420              	=	EncoderBufferType_YUV420              ;
	};
#	endif
#endif




/**
 * Input recognizer states
 * Type: int
 */
#define	RECOGNIZER_GIVE_BACK_INPUTS                       		(-1)
#define	RECOGNIZER_REJECT                                 		(0)
#define	RECOGNIZER_HANDLED                                		(1)
#define	RECOGNIZER_TAKEN_OVER_INPUTS                      		(2)


#define	NETWORK_CONNECTION_TRIGGER_UPDATE                 		(-3)
#define	NETWORK_CONNECTION_UNKNOWN                        		(-2)
#define	NETWORK_CONNECTION_NO_NETWORK                     		(-1)
#define	NETWORK_CONNECTION_NO_INTERNET                    		(0)
#define	NETWORK_CONNECTION_MOBILE_DATA                    		(1)
#define	NETWORK_CONNECTION_WIFI                           		(2)
#define	NETWORK_CONNECTION_LAN                            		(3)

/**
 * Network connection enumeration.
 * */
#ifndef CLI_CPP
	typedef enum NetworkConnection_t {
			NetworkConnection_TriggerUpdate       	=	NETWORK_CONNECTION_TRIGGER_UPDATE,
			NetworkConnection_Unknown             	=	NETWORK_CONNECTION_UNKNOWN,
			NetworkConnection_NoNetwork           	=	NETWORK_CONNECTION_NO_NETWORK,
			NetworkConnection_NoInternet          	=	NETWORK_CONNECTION_NO_INTERNET,
			NetworkConnection_MobileData          	=	NETWORK_CONNECTION_MOBILE_DATA,
			NetworkConnection_WiFi                	=	NETWORK_CONNECTION_WIFI,
			NetworkConnection_LAN                 	=	NETWORK_CONNECTION_LAN,

		} NetworkConnection_t;

#	ifdef __cplusplus
	namespace NetworkConnection {
			const NetworkConnection_t TriggerUpdate       	=	NetworkConnection_TriggerUpdate       ;
			const NetworkConnection_t Unknown             	=	NetworkConnection_Unknown             ;
			const NetworkConnection_t NoNetwork           	=	NetworkConnection_NoNetwork           ;
			const NetworkConnection_t NoInternet          	=	NetworkConnection_NoInternet          ;
			const NetworkConnection_t MobileData          	=	NetworkConnection_MobileData          ;
			const NetworkConnection_t WiFi                	=	NetworkConnection_WiFi                ;
			const NetworkConnection_t LAN                 	=	NetworkConnection_LAN                 ;
	};
#	endif
#endif




#define	ERR_LEVEL                                         		(-1)
#define	WARN_LEVEL                                        		(-2)


#define	DEVICE_INFO_ATTR_DISPOSED                         		(0x1)
#define	DEVICE_INFO_ATTR_ISCONNECTED                      		(0x2)
#define	DEVICE_INFO_ATTR_CONNECT_PROGRESS                 		(0x4)
#define	DEVICE_INFO_ATTR_USER_NAME                        		(0x10)

#define	DEVICE_INFO_ATTR_IDENTITY                         		(0x20)

#define	DEVICE_INFO_ATTR_DEVICE_PLATFORM                  		(0x40)
#define	DEVICE_INFO_ATTR_DEVICE_TYPE                      		(0x41)
#define	DEVICE_INFO_ATTR_NATIVEID                         		(0x80)
#define	DEVICE_INFO_ATTR_IP                               		(0x100)
#define	DEVICE_INFO_ATTR_IPE                              		(0x200)
#define	DEVICE_INFO_ATTR_TCP_PORT                         		(0x400)
#define	DEVICE_INFO_ATTR_UDP_PORT                         		(0x800)
#define	DEVICE_INFO_ATTR_UNAVAILABLE                      		(0x1000)
#define	DEVICE_INFO_ATTR_BROADCAST_FOUND                  		(0x2000)
#define	DEVICE_INFO_ATTR_DIRECT_CONTACT                   		(0x4000)
#define	DEVICE_INFO_ATTR_APP_CONTEXT                      		(0x8000)
#define	DEVICE_INFO_ATTR_PORTAL_CREATED                   		(0x10000)
#define	DEVICE_INFO_ATTR_OBJID                            		(0x20000)
#define	DEVICE_INFO_ATTR_FLAGS                            		(0x40000)


/**
 * DeviceInfoAttr attribute enumeration.
 * */
#ifndef CLI_CPP
	typedef enum DeviceInfoFlag_t {
			DeviceInfoFlag_Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			DeviceInfoFlag_DisposedChanged     	=	DEVICE_INFO_ATTR_DISPOSED,
			DeviceInfoFlag_IsConnected         	=	DEVICE_INFO_ATTR_ISCONNECTED,
			DeviceInfoFlag_ConnectProgress     	=	DEVICE_INFO_ATTR_CONNECT_PROGRESS,
			DeviceInfoFlag_UserName            	=	DEVICE_INFO_ATTR_USER_NAME,
			DeviceInfoFlag_Identity            	=	DEVICE_INFO_ATTR_IDENTITY,
			DeviceInfoFlag_Platform            	=	DEVICE_INFO_ATTR_DEVICE_PLATFORM,
			DeviceInfoFlag_DeviceType          	=	DEVICE_INFO_ATTR_DEVICE_TYPE,
			DeviceInfoFlag_NativeID            	=	DEVICE_INFO_ATTR_NATIVEID,
			DeviceInfoFlag_IP                  	=	DEVICE_INFO_ATTR_IP,
			DeviceInfoFlag_IPe                 	=	DEVICE_INFO_ATTR_IPE,
			DeviceInfoFlag_TcpPort             	=	DEVICE_INFO_ATTR_TCP_PORT,
			DeviceInfoFlag_UdpPort             	=	DEVICE_INFO_ATTR_UDP_PORT,
			DeviceInfoFlag_Unavailable         	=	DEVICE_INFO_ATTR_UNAVAILABLE,
			DeviceInfoFlag_BroadcastFound      	=	DEVICE_INFO_ATTR_BROADCAST_FOUND,
			DeviceInfoFlag_DirectContact       	=	DEVICE_INFO_ATTR_DIRECT_CONTACT,
			DeviceInfoFlag_AppContext          	=	DEVICE_INFO_ATTR_APP_CONTEXT,
			DeviceInfoFlag_PortalCreated       	=	DEVICE_INFO_ATTR_PORTAL_CREATED,
			DeviceInfoFlag_ObjectID            	=	DEVICE_INFO_ATTR_OBJID,
			DeviceInfoFlag_Flags               	=	DEVICE_INFO_ATTR_FLAGS,

		} DeviceInfoFlag_t;

#	ifdef __cplusplus
	namespace DeviceInfoFlag {
			const DeviceInfoFlag_t Disposed            	=	DeviceInfoFlag_Disposed            ;
			const DeviceInfoFlag_t DisposedChanged     	=	DeviceInfoFlag_DisposedChanged     ;
			const DeviceInfoFlag_t IsConnected         	=	DeviceInfoFlag_IsConnected         ;
			const DeviceInfoFlag_t ConnectProgress     	=	DeviceInfoFlag_ConnectProgress     ;
			const DeviceInfoFlag_t UserName            	=	DeviceInfoFlag_UserName            ;
			const DeviceInfoFlag_t Identity            	=	DeviceInfoFlag_Identity            ;
			const DeviceInfoFlag_t Platform            	=	DeviceInfoFlag_Platform            ;
			const DeviceInfoFlag_t DeviceType          	=	DeviceInfoFlag_DeviceType          ;
			const DeviceInfoFlag_t NativeID            	=	DeviceInfoFlag_NativeID            ;
			const DeviceInfoFlag_t IP                  	=	DeviceInfoFlag_IP                  ;
			const DeviceInfoFlag_t IPe                 	=	DeviceInfoFlag_IPe                 ;
			const DeviceInfoFlag_t TcpPort             	=	DeviceInfoFlag_TcpPort             ;
			const DeviceInfoFlag_t UdpPort             	=	DeviceInfoFlag_UdpPort             ;
			const DeviceInfoFlag_t Unavailable         	=	DeviceInfoFlag_Unavailable         ;
			const DeviceInfoFlag_t BroadcastFound      	=	DeviceInfoFlag_BroadcastFound      ;
			const DeviceInfoFlag_t DirectContact       	=	DeviceInfoFlag_DirectContact       ;
			const DeviceInfoFlag_t AppContext          	=	DeviceInfoFlag_AppContext          ;
			const DeviceInfoFlag_t PortalCreated       	=	DeviceInfoFlag_PortalCreated       ;
			const DeviceInfoFlag_t ObjectID            	=	DeviceInfoFlag_ObjectID            ;
			const DeviceInfoFlag_t Flags               	=	DeviceInfoFlag_Flags               ;
	};
#	endif
#endif




#define	FILE_INFO_ATTR_CREATED                            		(0x10000)
#define	FILE_INFO_ATTR_AVAILABLE                          		(0x20000)
#define	FILE_INFO_ATTR_SEND_PROGRESS                      		(0x40000)
#define	FILE_INFO_ATTR_RECEIVE_PROGRESS                   		(0x80000)


/**
 * FileInfo attribute enumeration.
 * */
#ifndef CLI_CPP
	typedef enum FileInfoFlag_t {
			FileInfoFlag_Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			FileInfoFlag_Created             	=	FILE_INFO_ATTR_CREATED,
			FileInfoFlag_Available           	=	FILE_INFO_ATTR_AVAILABLE,
			FileInfoFlag_SendProgress        	=	FILE_INFO_ATTR_SEND_PROGRESS,
			FileInfoFlag_ReceiveProgress     	=	FILE_INFO_ATTR_RECEIVE_PROGRESS,

		} FileInfoFlag_t;

#	ifdef __cplusplus
	namespace FileInfoFlag {
			const FileInfoFlag_t Disposed            	=	FileInfoFlag_Disposed            ;
			const FileInfoFlag_t Created             	=	FileInfoFlag_Created             ;
			const FileInfoFlag_t Available           	=	FileInfoFlag_Available           ;
			const FileInfoFlag_t SendProgress        	=	FileInfoFlag_SendProgress        ;
			const FileInfoFlag_t ReceiveProgress     	=	FileInfoFlag_ReceiveProgress     ;
	};
#	endif
#endif



#define	MESSAGE_INFO_ATTR_CREATED                         		(0x200000)

/**
 * MessageInfo attribute enumeration.
 * */
#ifndef CLI_CPP
	typedef enum MessageInfoFlag_t {
			MessageInfoFlag_Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			MessageInfoFlag_Created             	=	MESSAGE_INFO_ATTR_CREATED,

		} MessageInfoFlag_t;

#	ifdef __cplusplus
	namespace MessageInfoFlag {
			const MessageInfoFlag_t Disposed            	=	MessageInfoFlag_Disposed            ;
			const MessageInfoFlag_t Created             	=	MessageInfoFlag_Created             ;
	};
#	endif
#endif




#define	APP_STATUS_ACTIVE                                 		(0)
#define	APP_STATUS_SLEEPING                               		(1)

#define	ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               		(60)

#define	MAX_TCP_SEND_PACKET_SIZE                          		(1200000)


/**
 * Environs detectable platform constants
 * Type: int
 */
#define	ENVIRONS_PLATFORMS_UNKNOWN                        		(0)
/** MS Surface Tabletops */
#define	ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 		(0x1000)
/** Surface 1 tabletop */
#define	ENVIRONS_PLATFORMS_MSSUR01                        		(0x1001)
/** Samsung SUR40 PixelSense */
#define	ENVIRONS_PLATFORMS_SAMSUR40                       		(0x1002)
/** iPad */
#define	ENVIRONS_PLATFORMS_IPAD_FLAG                      		(0x2000)
#define	ENVIRONS_PLATFORMS_IPAD1                          		(0x2011)
#define	ENVIRONS_PLATFORMS_IPAD2                          		(0x2021)
#define	ENVIRONS_PLATFORMS_IPAD2MINI                      		(0x2022)
#define	ENVIRONS_PLATFORMS_IPAD3                          		(0x2031)
#define	ENVIRONS_PLATFORMS_IPAD4                          		(0x2041)
#define	ENVIRONS_PLATFORMS_IPAD4AIR                       		(0x2042)
#define	ENVIRONS_PLATFORMS_IPAD4MINI                      		(0x2043)
#define	ENVIRONS_PLATFORMS_IPAD4MINI3                     		(0x2044)
#define	ENVIRONS_PLATFORMS_IPAD5AIR2                      		(0x2051)
/** iPhones */
#define	ENVIRONS_PLATFORMS_IPHONE_FLAG                    		(0x4000)
#define	ENVIRONS_PLATFORMS_IPHONE4                        		(0x4041)
#define	ENVIRONS_PLATFORMS_IPHONE5                        		(0x4051)
#define	ENVIRONS_PLATFORMS_IPHONE6                        		(0x4061)
#define	ENVIRONS_PLATFORMS_IPHONE6P                       		(0x4062)
/** MultiTaction Cells */
#define	ENVIRONS_PLATFORMS_MULTITACTION_FLAG              		(0x8000)
/** MultiTaction Cell 55. */
#define	ENVIRONS_PLATFORMS_MULTITACTION55                 		(0x8055)

#define	ENVIRONS_PLATFORMS_OSX_FLAG                       		(0x10000)
#define	ENVIRONS_PLATFORMS_MACBOOK_FLAG                   		(0x10010)
#define	ENVIRONS_PLATFORMS_MACMINI_FLAG                   		(0x10020)

#define	ENVIRONS_PLATFORMS_LINUX_FLAG                     		(0x40000)
#define	ENVIRONS_PLATFORMS_RASPBERRY                      		(0x40100)

#define	ENVIRONS_PLATFORMS_WINDOWS_FLAG                   		(0x20000)
#define	ENVIRONS_PLATFORMS_WINDOWSVISTA                   		(0x20050)
#define	ENVIRONS_PLATFORMS_WINDOWSXP                      		(0x20060)
#define	ENVIRONS_PLATFORMS_WINDOWS7                       		(0x20070)
#define	ENVIRONS_PLATFORMS_WINDOWS8                       		(0x20080)
#define	ENVIRONS_PLATFORMS_WINDOWS10                      		(0x20100)

#define	ENVIRONS_PLATFORMS_TABLET_FLAG                    		(0x100000)
#define	ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                		(0x200000)
#define	ENVIRONS_PLATFORMS_TABLETOP_FLAG                  		(0x400000)
#define	ENVIRONS_PLATFORMS_DISPLAY_FLAG                   		(0x800000)

#define	ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              		(0x1000000)

/**
 * Environs detectable platforms.
 * */
#ifndef CLI_CPP
	typedef enum Platforms_t {
			Platforms_Unknown             	=	ENVIRONS_PLATFORMS_UNKNOWN,
			/** MS Surface Tabletops */
			Platforms_MSSurface_Flag      	=	ENVIRONS_PLATFORMS_MSSURFACE_FLAG,
			/** Surface 1 tabletop */
			Platforms_MSSUR01             	=	ENVIRONS_PLATFORMS_MSSUR01,
			/** Samsung SUR40 PixelSense */
			Platforms_SAMSUR40            	=	ENVIRONS_PLATFORMS_SAMSUR40,

			/** iPad */
			Platforms_iPad_Flag           	=	ENVIRONS_PLATFORMS_IPAD_FLAG,
			Platforms_iPad1               	=	ENVIRONS_PLATFORMS_IPAD1,
			Platforms_iPad2               	=	ENVIRONS_PLATFORMS_IPAD2,
			Platforms_iPad2Mini           	=	ENVIRONS_PLATFORMS_IPAD2MINI,
			Platforms_iPad3               	=	ENVIRONS_PLATFORMS_IPAD3,
			Platforms_iPad4               	=	ENVIRONS_PLATFORMS_IPAD4,
			Platforms_iPad4Air            	=	ENVIRONS_PLATFORMS_IPAD4AIR,
			Platforms_iPad4Mini           	=	ENVIRONS_PLATFORMS_IPAD4MINI,
			Platforms_iPad4Mini3          	=	ENVIRONS_PLATFORMS_IPAD4MINI3,
			Platforms_iPad5Air2           	=	ENVIRONS_PLATFORMS_IPAD5AIR2,

			/** iPhones */
			Platforms_iPhone_Flag         	=	ENVIRONS_PLATFORMS_IPHONE_FLAG,
			Platforms_iPhone4             	=	ENVIRONS_PLATFORMS_IPHONE4,
			Platforms_iPhone5             	=	ENVIRONS_PLATFORMS_IPHONE5,
			Platforms_iPhone6             	=	ENVIRONS_PLATFORMS_IPHONE6,
			Platforms_iPhone6p            	=	ENVIRONS_PLATFORMS_IPHONE6P,

			/** MultiTaction Cells */
			Platforms_MultiTaction_Flag   	=	ENVIRONS_PLATFORMS_MULTITACTION_FLAG,
			/** MultiTaction Cell 55. */
			Platforms_MultiTaction55      	=	ENVIRONS_PLATFORMS_MULTITACTION55,

			Platforms_OSX_Flag            	=	ENVIRONS_PLATFORMS_OSX_FLAG,
			Platforms_MacBook_Flag        	=	ENVIRONS_PLATFORMS_MACBOOK_FLAG,
			Platforms_MacMini_Flag        	=	ENVIRONS_PLATFORMS_MACMINI_FLAG,

			Platforms_Linux_Flag          	=	ENVIRONS_PLATFORMS_LINUX_FLAG,
			Platforms_Raspberry_Flag      	=	ENVIRONS_PLATFORMS_RASPBERRY,

			Platforms_Windows_Flag        	=	ENVIRONS_PLATFORMS_WINDOWS_FLAG,
			Platforms_WindowsVista        	=	ENVIRONS_PLATFORMS_WINDOWSVISTA,
			Platforms_WindowsXP           	=	ENVIRONS_PLATFORMS_WINDOWSXP,
			Platforms_Windows7            	=	ENVIRONS_PLATFORMS_WINDOWS7,
			Platforms_Windows8            	=	ENVIRONS_PLATFORMS_WINDOWS8,
			Platforms_Windows10           	=	ENVIRONS_PLATFORMS_WINDOWS10,

			Platforms_Tablet_Flag         	=	ENVIRONS_PLATFORMS_TABLET_FLAG,
			Platforms_Smartphone_Flag     	=	ENVIRONS_PLATFORMS_SMARTPHONE_FLAG,
			Platforms_Tabletop_Flag       	=	ENVIRONS_PLATFORMS_TABLETOP_FLAG,
			Platforms_Display_Flag        	=	ENVIRONS_PLATFORMS_DISPLAY_FLAG,

			Platforms_LocationNode_Flag   	=	ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG,








		} Platforms_t;

#	ifdef __cplusplus
	namespace Platforms {
			const Platforms_t Unknown             	=	Platforms_Unknown             ;
			const Platforms_t MSSurface_Flag      	=	Platforms_MSSurface_Flag      ;
			const Platforms_t MSSUR01             	=	Platforms_MSSUR01             ;
			const Platforms_t SAMSUR40            	=	Platforms_SAMSUR40            ;
			const Platforms_t iPad_Flag           	=	Platforms_iPad_Flag           ;
			const Platforms_t iPad1               	=	Platforms_iPad1               ;
			const Platforms_t iPad2               	=	Platforms_iPad2               ;
			const Platforms_t iPad2Mini           	=	Platforms_iPad2Mini           ;
			const Platforms_t iPad3               	=	Platforms_iPad3               ;
			const Platforms_t iPad4               	=	Platforms_iPad4               ;
			const Platforms_t iPad4Air            	=	Platforms_iPad4Air            ;
			const Platforms_t iPad4Mini           	=	Platforms_iPad4Mini           ;
			const Platforms_t iPad4Mini3          	=	Platforms_iPad4Mini3          ;
			const Platforms_t iPad5Air2           	=	Platforms_iPad5Air2           ;
			const Platforms_t iPhone_Flag         	=	Platforms_iPhone_Flag         ;
			const Platforms_t iPhone4             	=	Platforms_iPhone4             ;
			const Platforms_t iPhone5             	=	Platforms_iPhone5             ;
			const Platforms_t iPhone6             	=	Platforms_iPhone6             ;
			const Platforms_t iPhone6p            	=	Platforms_iPhone6p            ;
			const Platforms_t MultiTaction_Flag   	=	Platforms_MultiTaction_Flag   ;
			const Platforms_t MultiTaction55      	=	Platforms_MultiTaction55      ;
			const Platforms_t OSX_Flag            	=	Platforms_OSX_Flag            ;
			const Platforms_t MacBook_Flag        	=	Platforms_MacBook_Flag        ;
			const Platforms_t MacMini_Flag        	=	Platforms_MacMini_Flag        ;
			const Platforms_t Linux_Flag          	=	Platforms_Linux_Flag          ;
			const Platforms_t Raspberry_Flag      	=	Platforms_Raspberry_Flag      ;
			const Platforms_t Windows_Flag        	=	Platforms_Windows_Flag        ;
			const Platforms_t WindowsVista        	=	Platforms_WindowsVista        ;
			const Platforms_t WindowsXP           	=	Platforms_WindowsXP           ;
			const Platforms_t Windows7            	=	Platforms_Windows7            ;
			const Platforms_t Windows8            	=	Platforms_Windows8            ;
			const Platforms_t Windows10           	=	Platforms_Windows10           ;
			const Platforms_t Tablet_Flag         	=	Platforms_Tablet_Flag         ;
			const Platforms_t Smartphone_Flag     	=	Platforms_Smartphone_Flag     ;
			const Platforms_t Tabletop_Flag       	=	Platforms_Tabletop_Flag       ;
			const Platforms_t Display_Flag        	=	Platforms_Display_Flag        ;
			const Platforms_t LocationNode_Flag   	=	Platforms_LocationNode_Flag   ;
	};
#	endif
#endif



/*
 * Mediator device class types used for GetDevicesFrom ( type )
 */
#define	MEDIATOR_DEVICE_CLASS_ALL                         		(0)
#define	MEDIATOR_DEVICE_CLASS_NEARBY                      		(1)
#define	MEDIATOR_DEVICE_CLASS_MEDIATOR                    		(2)

/*
 * Crypt declarations
 */
#define	ENVIRONS_DEVICES_KEYSIZE                          		(2048)
#define	ENVIRONS_CRYPT_PAD_OAEP                           		((1 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1                          		((2 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1SHA1                      		((4 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1SHA256                    		((8 << 24))

#define	MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   		(0x1FFFF)
#define	DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  		(MEDIATOR_CLIENT_MAX_BUFFER_SIZE)


/**
 * Mediator device class types enumeration.
 * */
#ifndef CLI_CPP
	typedef enum DeviceClass_t {
			DeviceClass_All                 	=	MEDIATOR_DEVICE_CLASS_ALL,
			DeviceClass_Nearby              	=	MEDIATOR_DEVICE_CLASS_NEARBY,
			DeviceClass_Mediator            	=	MEDIATOR_DEVICE_CLASS_MEDIATOR,

		} DeviceClass_t;

#	ifdef __cplusplus
	namespace DeviceClass {
			const DeviceClass_t All                 	=	DeviceClass_All                 ;
			const DeviceClass_t Nearby              	=	DeviceClass_Nearby              ;
			const DeviceClass_t Mediator            	=	DeviceClass_Mediator            ;
	};
#	endif
#endif



/**
 * Environs call flags
 * Type: int
 */
#define	CALL_WAIT                                         		(0)
#define	CALL_NOWAIT                                       		(1)


/**
 * Environs call enumeration.
 * */
#ifndef CLI_CPP
	typedef enum Call_t {
			Call_Wait                	=	CALL_WAIT,
			Call_NoWait              	=	CALL_NOWAIT,

		} Call_t;

#	ifdef __cplusplus
	namespace Call {
			const Call_t Wait                	=	Call_Wait                ;
			const Call_t NoWait              	=	Call_NoWait              ;
	};
#	endif
#endif




/**
 * Environs RENDER_CALLBACK_TYPES
 * Type: int
 */
#define	RENDER_CALLBACK_TYPE_ALL                          		(0)
/** Call back with received ByteBuffer */
#define	RENDER_CALLBACK_TYPE_INIT                         		(0x10)
/** Call back with EnvironsAVContext */
#define	RENDER_CALLBACK_TYPE_AVCONTEXT                    		(0x20)
/** Call back with IPortalDecoder */
#define	RENDER_CALLBACK_TYPE_DECODER                      		(0x40)
/** Call back with received ByteBuffer */
#define	RENDER_CALLBACK_TYPE_IMAGE                        		(0x80)

/**
 * Environs RENDER_CALLBACK_TYPES enumeration.
 * */
#ifndef CLI_CPP
	typedef enum RenderCallbackType_t {
			RenderCallbackType_All                 	=	RENDER_CALLBACK_TYPE_ALL,
			RenderCallbackType_Init                	=	RENDER_CALLBACK_TYPE_INIT,
			RenderCallbackType_AvContext           	=	RENDER_CALLBACK_TYPE_AVCONTEXT,
			RenderCallbackType_Decoder             	=	RENDER_CALLBACK_TYPE_DECODER,
			RenderCallbackType_Image               	=	RENDER_CALLBACK_TYPE_IMAGE,

		} RenderCallbackType_t;

#	ifdef __cplusplus
	namespace RenderCallbackType {
			const RenderCallbackType_t All                 	=	RenderCallbackType_All                 ;
			const RenderCallbackType_t Init                	=	RenderCallbackType_Init                ;
			const RenderCallbackType_t AvContext           	=	RenderCallbackType_AvContext           ;
			const RenderCallbackType_t Decoder             	=	RenderCallbackType_Decoder             ;
			const RenderCallbackType_t Image               	=	RenderCallbackType_Image               ;
	};
#	endif
#endif



/**
 * Environs AVCONTEXT_TYPES
 * Type: int
 */
#define	DECODER_AVCONTEXT_TYPE_PIXELS                     		(0)
#define	DECODER_AVCONTEXT_TYPE_AVCONTEXT                  		(RENDER_CALLBACK_TYPE_AVCONTEXT)
#define	DECODER_AVCONTEXT_TYPE_JPG                        		(2)
#define	DECODER_AVCONTEXT_TYPE_PNG                        		(3)

/**
 * Environs AVCONTEXT_TYPES enumeration.
 * */
#ifndef CLI_CPP
	typedef enum DecoderContextType_t {
			DecoderContextType_AvContext           	=	DECODER_AVCONTEXT_TYPE_AVCONTEXT,
			DecoderContextType_Jpg                 	=	DECODER_AVCONTEXT_TYPE_JPG,
			DecoderContextType_Png                 	=	DECODER_AVCONTEXT_TYPE_PNG,

		} DecoderContextType_t;

#	ifdef __cplusplus
	namespace DecoderContextType {
			const DecoderContextType_t AvContext           	=	DecoderContextType_AvContext           ;
			const DecoderContextType_t Jpg                 	=	DecoderContextType_Jpg                 ;
			const DecoderContextType_t Png                 	=	DecoderContextType_Png                 ;
	};
#	endif
#endif



/**
 * Environs AVCONTEXT_SUBTYPES
 * Type: int
 */
#define	ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    		(0)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   		(1)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   		(2)

#define	ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    		(6)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   		(7)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   		(8)

#define	TYPES_SEPERATOR_2_ENVIRONS                        		(0)

/**
 * Environs SENSOR_TYPES
 * Type: int
 */
#define	ENVIRONS_SENSOR_TYPE_ACCELEROMETER                		(0)
#define	ENVIRONS_SENSOR_TYPE_ACCELERATION                 		(1)
#define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                		(2)
#define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION         		(3)
#define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB        		(4)
#define	ENVIRONS_SENSOR_TYPE_GYROSCOPE                    		(5)
#define	ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB            		(6)
#define	ENVIRONS_SENSOR_TYPE_ORIENTATION                  		(7)
#define	ENVIRONS_SENSOR_TYPE_LIGHT                        		(8)
#define	ENVIRONS_SENSOR_TYPE_LOCATION                     		(9)
#define	ENVIRONS_SENSOR_TYPE_HEADING                      		(10)
#define	ENVIRONS_SENSOR_TYPE_TEMPERATURE                  		(11)
#define	ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT           		(12)
#define	ENVIRONS_SENSOR_TYPE_PRESSURE                     		(13)
#define	ENVIRONS_SENSOR_TYPE_ATTITUDE                     		(14)
#define	ENVIRONS_SENSOR_TYPE_ROTATION                     		(15)
#define	ENVIRONS_SENSOR_TYPE_ROTATION_GAME                		(16)
#define	ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC         		(17)
#define	ENVIRONS_SENSOR_TYPE_GRAVITY                      		(18)
#define	ENVIRONS_SENSOR_TYPE_STEPPER                      		(10)
#define	ENVIRONS_SENSOR_TYPE_STEPS                        		(20)
#define	ENVIRONS_SENSOR_TYPE_TILT                         		(21)
#define	ENVIRONS_SENSOR_TYPE_HEARTRATE                    		(22)
#define	ENVIRONS_SENSOR_TYPE_PROXIMITY                    		(23)
#define	ENVIRONS_SENSOR_TYPE_VOC                          		(24)
#define	ENVIRONS_SENSOR_TYPE_CO2                          		(25)
#define	ENVIRONS_SENSOR_TYPE_HUMIDITY                     		(26)
#define	ENVIRONS_SENSOR_TYPE_CUSTOM                       		(27)
#define	ENVIRONS_SENSOR_TYPE_MAX                          		(28)

/**
 * Sensor type enumeration.
 * */
#ifndef CLI_CPP
	typedef enum SensorType_t {
			SensorType_All                 	=	-1,
			SensorType_Accelerometer       	=	ENVIRONS_SENSOR_TYPE_ACCELEROMETER,
			SensorType_Acceleration        	=	ENVIRONS_SENSOR_TYPE_ACCELERATION,
			SensorType_MagneticField       	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD,
			SensorType_MagneticFieldMotion 	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION,
			SensorType_MagneticFieldUncalib	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB,
			SensorType_Gyroscope           	=	ENVIRONS_SENSOR_TYPE_GYROSCOPE,
			SensorType_GyroscopeUncalib    	=	ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB,
			SensorType_Orientation         	=	ENVIRONS_SENSOR_TYPE_ORIENTATION,
			SensorType_Light               	=	ENVIRONS_SENSOR_TYPE_LIGHT,
			SensorType_Location            	=	ENVIRONS_SENSOR_TYPE_LOCATION,
			SensorType_Heading             	=	ENVIRONS_SENSOR_TYPE_HEADING,
			SensorType_Temperature         	=	ENVIRONS_SENSOR_TYPE_TEMPERATURE,
			SensorType_MotionSignificant   	=	ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT,
			SensorType_Pressure            	=	ENVIRONS_SENSOR_TYPE_PRESSURE,
			SensorType_Attitude            	=	ENVIRONS_SENSOR_TYPE_ATTITUDE,
			SensorType_Rotation            	=	ENVIRONS_SENSOR_TYPE_ROTATION,
			SensorType_RotationGame        	=	ENVIRONS_SENSOR_TYPE_ROTATION_GAME,
			SensorType_RotationGeomagnetic 	=	ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC,
			SensorType_Gravity             	=	ENVIRONS_SENSOR_TYPE_GRAVITY,
			SensorType_Stepper             	=	ENVIRONS_SENSOR_TYPE_STEPPER,
			SensorType_Steps               	=	ENVIRONS_SENSOR_TYPE_STEPS,
			SensorType_Tilt                	=	ENVIRONS_SENSOR_TYPE_TILT,
			SensorType_Heartrate           	=	ENVIRONS_SENSOR_TYPE_HEARTRATE,
			SensorType_Proximity           	=	ENVIRONS_SENSOR_TYPE_PROXIMITY,
			SensorType_VOC                 	=	ENVIRONS_SENSOR_TYPE_VOC,
			SensorType_CO2                 	=	ENVIRONS_SENSOR_TYPE_CO2,
			SensorType_Humidity            	=	ENVIRONS_SENSOR_TYPE_HUMIDITY,
			SensorType_Custom              	=	ENVIRONS_SENSOR_TYPE_CUSTOM,
			SensorType_Max                 	=	ENVIRONS_SENSOR_TYPE_MAX,

		} SensorType_t;

#	ifdef __cplusplus
	namespace SensorType {
			const SensorType_t All                 	=	SensorType_All                 ;
			const SensorType_t Accelerometer       	=	SensorType_Accelerometer       ;
			const SensorType_t Acceleration        	=	SensorType_Acceleration        ;
			const SensorType_t MagneticField       	=	SensorType_MagneticField       ;
			const SensorType_t MagneticFieldMotion 	=	SensorType_MagneticFieldMotion ;
			const SensorType_t MagneticFieldUncalib	=	SensorType_MagneticFieldUncalib;
			const SensorType_t Gyroscope           	=	SensorType_Gyroscope           ;
			const SensorType_t GyroscopeUncalib    	=	SensorType_GyroscopeUncalib    ;
			const SensorType_t Orientation         	=	SensorType_Orientation         ;
			const SensorType_t Light               	=	SensorType_Light               ;
			const SensorType_t Location            	=	SensorType_Location            ;
			const SensorType_t Heading             	=	SensorType_Heading             ;
			const SensorType_t Temperature         	=	SensorType_Temperature         ;
			const SensorType_t MotionSignificant   	=	SensorType_MotionSignificant   ;
			const SensorType_t Pressure            	=	SensorType_Pressure            ;
			const SensorType_t Attitude            	=	SensorType_Attitude            ;
			const SensorType_t Rotation            	=	SensorType_Rotation            ;
			const SensorType_t RotationGame        	=	SensorType_RotationGame        ;
			const SensorType_t RotationGeomagnetic 	=	SensorType_RotationGeomagnetic ;
			const SensorType_t Gravity             	=	SensorType_Gravity             ;
			const SensorType_t Stepper             	=	SensorType_Stepper             ;
			const SensorType_t Steps               	=	SensorType_Steps               ;
			const SensorType_t Tilt                	=	SensorType_Tilt                ;
			const SensorType_t Heartrate           	=	SensorType_Heartrate           ;
			const SensorType_t Proximity           	=	SensorType_Proximity           ;
			const SensorType_t VOC                 	=	SensorType_VOC                 ;
			const SensorType_t CO2                 	=	SensorType_CO2                 ;
			const SensorType_t Humidity            	=	SensorType_Humidity            ;
			const SensorType_t Custom              	=	SensorType_Custom              ;
			const SensorType_t Max                 	=	SensorType_Max                 ;
	};
#	endif
#endif



	extern const char * sensorFlagDescriptions [ ];

/** Ignore: for Resolver */
#define	ENVIRONS_SENSOR_PACK_TYPE_EXT                     		(0x40000000)
/** Ignore: for Resolver */
#define	ENVIRONS_SENSOR_PACK_TYPE_DOUBLES                 		(0x80000000)


/**
 * Sensor type bit field declarations.
 * If number of sensor flags exceed the 32 Bitfield, then another complete FLAG2 type has to be used.
 *
 * */
#define	ENVIRONS_SENSOR_FLAG_ACCELEROMETER                		(0x1)
#define	ENVIRONS_SENSOR_FLAG_ACCELERATION                 		(0x2)
#define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                		(0x4)
#define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_MOTION         		(0x8)
#define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_UNCALIB        		(0x10)
#define	ENVIRONS_SENSOR_FLAG_GYROSCOPE                    		(0x20)
#define	ENVIRONS_SENSOR_FLAG_GYROSCOPE_UNCALIB            		(0x40)
#define	ENVIRONS_SENSOR_FLAG_ORIENTATION                  		(0x80)
#define	ENVIRONS_SENSOR_FLAG_LIGHT                        		(0x100)
#define	ENVIRONS_SENSOR_FLAG_LOCATION                     		(0x200)
#define	ENVIRONS_SENSOR_FLAG_HEADING                      		(0x400)
#define	ENVIRONS_SENSOR_FLAG_TEMPERATURE                  		(0x800)
#define	ENVIRONS_SENSOR_FLAG_MOTION_SIGNIFICANT           		(0x1000)
#define	ENVIRONS_SENSOR_FLAG_PRESSURE                     		(0x2000)
#define	ENVIRONS_SENSOR_FLAG_ATTITUDE                     		(0x4000)
#define	ENVIRONS_SENSOR_FLAG_ROTATION                     		(0x8000)
#define	ENVIRONS_SENSOR_FLAG_ROTATION_GAME                		(0x10000)
#define	ENVIRONS_SENSOR_FLAG_ROTATION_GEOMAGNETIC         		(0x20000)
#define	ENVIRONS_SENSOR_FLAG_GRAVITY                      		(0x40000)
#define	ENVIRONS_SENSOR_FLAG_STEPPER                      		(0x80000)
#define	ENVIRONS_SENSOR_FLAG_STEPS                        		(0x100000)
#define	ENVIRONS_SENSOR_FLAG_TILT                         		(0x200000)
#define	ENVIRONS_SENSOR_FLAG_HEARTRATE                    		(0x400000)
#define	ENVIRONS_SENSOR_FLAG_PROXIMITY                    		(0x800000)
#define	ENVIRONS_SENSOR_FLAG_VOC                          		(0x1000000)
#define	ENVIRONS_SENSOR_FLAG_CO2                          		(0x2000000)
#define	ENVIRONS_SENSOR_FLAG_HUMIDITY                     		(0x4000000)
#define	ENVIRONS_SENSOR_FLAG_CUSTOM                       		(0x8000000)

#define	MAX_ENVIRONS_SENSOR_TYPE_VALUE                    		(ENVIRONS_SENSOR_FLAG_CUSTOM)

	extern int sensorFlags [ ];


	extern bool sensorChannelTcpDefault [ ];


#define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MIN               		(30000)
#define	ENVIRONS_WIFI_OBSERVER_INTERVAL_CHECK_MIN         		(2000)
#define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_MIN        		(20000)
#define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_CHECK_MIN  		(2000)


#define	ENVIRONS_BT_OBSERVER_INTERVAL_MIN                 		(30000)
#define	ENVIRONS_BT_OBSERVER_INTERVAL_CHECK_MIN           		(10000)
#define	ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_MIN          		(20000)
#define	ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_CHECK_MIN    		(10000)


/** Ignore: for CLI all the remaining content*/

/**
 * Environs Option keys
 * Type: String
 */
/** Ignore: for Resolver */
#define	APPENV_MAPPINGS                                   		("mappings")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT             		("optDefaultMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM              		("optCustomMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT_N           		("optDNefaultMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM_N            		("optCNustomMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_USERNAME            		("optMediatorUsername")
/** Ignore: for Resolver */
#define	APPENV_SETTING_INITIALS                           		("optInitialSettings")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_NATIVE_DECODER              		("optUseNativeDecoder")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_HARDWARE_DECODER            		("optUseHardwareEncoder")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_SHOW_DEBUG_LOGS             		("useShowDebugStatus")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_LOG_FILE                    		("useLogFile")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_BT_OBSERVER                 		("useBtObserver")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_BT_INTERVAL                 		("useBtInterval")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_WIFI_OBSERVER               		("useWifiObserver")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_WIFI_INTERVAL               		("useWifiInterval")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_PUSH_NOTIFS                 		("optUsePushNotifications")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_SENSORS                     		("optUseSensors")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_AUTOSTART               		("optPortalAutoStart")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_DEFAULT_MEDIATOR               		("optUseDefaultMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOM_MEDIATOR                		("optUseCustomMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_TCP                     		("optPortalTCP")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_NATIVE_RESOLUTION              		("optNativeResolution")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_STREAM                         		("optUseStream")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_MEDIATOR                   		("useCLSMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_DEVICE                     		("useCLSDevice")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_DEV_ENFORCE                		("useCLSDevEnforce")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_AUTH                           		("useAuth")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_ANONYMOUS                      		("useAnonymous")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_AUTOACCEPT              		("portalAutoAccept")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_ID                          		("optDeviceID")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_UID                         		("uid")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_NAME                        		("optDeviceName")

/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_MEDIATOR_LOGIN_DLG             		("useMediatorLoginDialog")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOMMEDIATOR_PORT            		("optMediatorPort")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOMMEDIATOR_IP              		("optMediatorIP")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTALVIEW_DIMS_AUTO           		("optUsePortalViewDimsAuto")






#ifdef __cplusplus
namespace Notify {

#ifndef CLI_CPP
	/**
	 * Notify connection enumeration.
	 * */
	typedef enum Connection_t {
			Connection_type                    	=	NOTIFY_TYPE_CONNECTION,
			Connection_MainNew                 	=	NOTIFY_CONNECTION_MAIN_NEW,
			Connection_MainAck                 	=	NOTIFY_CONNECTION_MAIN_ACK,
			Connection_MainFailed              	=	NOTIFY_CONNECTION_MAIN_FAILED,
			Connection_MainClosed              	=	NOTIFY_CONNECTION_MAIN_CLOSED,
			Connection_ComDatNew               	=	NOTIFY_CONNECTION_COMDAT_NEW,
			Connection_ComDatAck               	=	NOTIFY_CONNECTION_COMDAT_ACK,
			Connection_ComDatFailed            	=	NOTIFY_CONNECTION_COMDAT_FAILED,
			Connection_ComDatClosed            	=	NOTIFY_CONNECTION_COMDAT_CLOSED,
			Connection_DataAck                 	=	NOTIFY_CONNECTION_DATA_ACK,
			Connection_DataClosed              	=	NOTIFY_CONNECTION_DATA_CLOSED,
			Connection_Progress                	=	NOTIFY_CONNECTION_PROGRESS,
			Connection_Established             	=	NOTIFY_CONNECTION_ESTABLISHED,
			Connection_EstablishedAck          	=	NOTIFY_CONNECTION_ESTABLISHED_ACK,
			Connection_Closed                  	=	NOTIFY_CONNECTION_CLOSED,
	} Connection_t;

	typedef	Connection_t	Connectione_t;

	/**
	 * Notify connection enumeration.
	 * */
#	ifdef __cplusplus

	namespace Connection {
			const Connection_t type                    	=	Connection_type;
			const Connection_t MainNew                 	=	Connection_MainNew;
			const Connection_t MainAck                 	=	Connection_MainAck;
			const Connection_t MainFailed              	=	Connection_MainFailed;
			const Connection_t MainClosed              	=	Connection_MainClosed;
			const Connection_t ComDatNew               	=	Connection_ComDatNew;
			const Connection_t ComDatAck               	=	Connection_ComDatAck;
			const Connection_t ComDatFailed            	=	Connection_ComDatFailed;
			const Connection_t ComDatClosed            	=	Connection_ComDatClosed;
			const Connection_t DataAck                 	=	Connection_DataAck;
			const Connection_t DataClosed              	=	Connection_DataClosed;
			const Connection_t Progress                	=	Connection_Progress;
			const Connection_t Established             	=	Connection_Established;
			const Connection_t EstablishedAck          	=	Connection_EstablishedAck;
			const Connection_t Closed                  	=	Connection_Closed;
	};

	namespace Connectione = Connection;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify portal enumeration.
	 * */
	typedef enum Portal_t {
			Portal_Disposed                	=	ENVIRONS_OBJECT_DISPOSED,
			Portal_Zero                    	=	0,
			Portal_type                    	=	NOTIFY_TYPE_PORTAL,
			Portal_Established             	=	NOTIFY_PORTAL_ESTABLISHED,
			Portal_EstablishedResolution   	=	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION,
			Portal_Request                 	=	NOTIFY_PORTAL_REQUEST,
			Portal_AskRequest              	=	NOTIFY_PORTAL_ASK_REQUEST,
			Portal_StreamIncoming          	=	NOTIFY_PORTAL_STREAM_INCOMING,
			Portal_ImagesIncoming          	=	NOTIFY_PORTAL_IMAGES_INCOMING,
			Portal_IncomingEstablished     	=	NOTIFY_PORTAL_INCOMING_ESTABLISHED,
			Portal_ProvideStreamAck        	=	NOTIFY_PORTAL_PROVIDE_STREAM_ACK,
			Portal_ProvideImagesAck        	=	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK,
			Portal_ProviderReady           	=	NOTIFY_PORTAL_PROVIDER_READY,
			Portal_RequestFail             	=	NOTIFY_PORTAL_REQUEST_FAIL,
			Portal_ProvideFail             	=	NOTIFY_PORTAL_PROVIDE_FAIL,
			Portal_StreamStarted           	=	NOTIFY_PORTAL_STREAM_STARTED,
			Portal_StreamPaused            	=	NOTIFY_PORTAL_STREAM_PAUSED,
			Portal_StreamStopped           	=	NOTIFY_PORTAL_STREAM_STOPPED,
			Portal_StreamReceiverStarted   	=	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED,
			Portal_LocationChanged         	=	NOTIFY_PORTAL_LOCATION_CHANGED,
			Portal_SizeChanged             	=	NOTIFY_PORTAL_SIZE_CHANGED,
			Portal_ContactChanged          	=	NOTIFY_CONTACT_DIRECT_CHANGED,
	} Portal_t;

	typedef	Portal_t	Portale_t;

	/**
	 * Notify portal enumeration.
	 * */
#	ifdef __cplusplus

	namespace Portal {
			const Portal_t Disposed                	=	Portal_Disposed;
			const Portal_t Zero                    	=	Portal_Zero;
			const Portal_t type                    	=	Portal_type;
			const Portal_t Established             	=	Portal_Established;
			const Portal_t EstablishedResolution   	=	Portal_EstablishedResolution;
			const Portal_t Request                 	=	Portal_Request;
			const Portal_t AskRequest              	=	Portal_AskRequest;
			const Portal_t StreamIncoming          	=	Portal_StreamIncoming;
			const Portal_t ImagesIncoming          	=	Portal_ImagesIncoming;
			const Portal_t IncomingEstablished     	=	Portal_IncomingEstablished;
			const Portal_t ProvideStreamAck        	=	Portal_ProvideStreamAck;
			const Portal_t ProvideImagesAck        	=	Portal_ProvideImagesAck;
			const Portal_t ProviderReady           	=	Portal_ProviderReady;
			const Portal_t RequestFail             	=	Portal_RequestFail;
			const Portal_t ProvideFail             	=	Portal_ProvideFail;
			const Portal_t StreamStarted           	=	Portal_StreamStarted;
			const Portal_t StreamPaused            	=	Portal_StreamPaused;
			const Portal_t StreamStopped           	=	Portal_StreamStopped;
			const Portal_t StreamReceiverStarted   	=	Portal_StreamReceiverStarted;
			const Portal_t LocationChanged         	=	Portal_LocationChanged;
			const Portal_t SizeChanged             	=	Portal_SizeChanged;
			const Portal_t ContactChanged          	=	Portal_ContactChanged;
	};

	namespace Portale = Portal;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify options enumeration.
	 * */
	typedef enum Options_t {
			Options_type                    	=	NOTIFY_TYPE_OPTIONS,
			Options_PortalLocationChanged   	=	NOTIFY_PORTAL_LOCATION_CHANGED,
			Options_PortalSizeChanged       	=	NOTIFY_PORTAL_SIZE_CHANGED,
			Options_DirectContactChanged    	=	NOTIFY_CONTACT_DIRECT_CHANGED,
	} Options_t;

	typedef	Options_t	Optionse_t;

	/**
	 * Notify options enumeration.
	 * */
#	ifdef __cplusplus

	namespace Options {
			const Options_t type                    	=	Options_type;
			const Options_t PortalLocationChanged   	=	Options_PortalLocationChanged;
			const Options_t PortalSizeChanged       	=	Options_PortalSizeChanged;
			const Options_t DirectContactChanged    	=	Options_DirectContactChanged;
	};

	namespace Optionse = Options;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify file enumeration.
	 * */
	typedef enum File_t {
		/* TEst comment */
			File_type                    	=	NOTIFY_TYPE_FILE,
			File_FileProgress            	=	NOTIFY_TYPE_FILE_PROGRESS,
			File_SendProgress            	=	NOTIFY_FILE_SEND_PROGRESS,
			File_ReceiveProgress         	=	NOTIFY_FILE_RECEIVE_PROGRESS,
	} File_t;

	typedef	File_t	Filee_t;

	/**
	 * Notify file enumeration.
	 * */
#	ifdef __cplusplus

	namespace File {
			const File_t type                    	=	File_type;
			const File_t FileProgress            	=	File_FileProgress;
			const File_t SendProgress            	=	File_SendProgress;
			const File_t ReceiveProgress         	=	File_ReceiveProgress;
	};

	namespace Filee = File;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify touchsource enumeration.
	 * */
	typedef enum TouchSource_t {
			TouchSource_type                    	=	NOTIFY_TOUCHSOURCE,
			TouchSource_Started                 	=	NOTIFY_TOUCHSOURCE_STARTED,
			TouchSource_Stopped                 	=	NOTIFY_TOUCHSOURCE_STOPPED,
			TouchSource_NotAvailable            	=	NOTIFY_TOUCHSOURCE_NOTAVAIL,
			TouchSource_Failed                  	=	NOTIFY_TOUCHSOURCE_FAILED,
	} TouchSource_t;

	typedef	TouchSource_t	TouchSourcee_t;

	/**
	 * Notify touchsource enumeration.
	 * */
#	ifdef __cplusplus

	namespace TouchSource {
			const TouchSource_t type                    	=	TouchSource_type;
			const TouchSource_t Started                 	=	TouchSource_Started;
			const TouchSource_t Stopped                 	=	TouchSource_Stopped;
			const TouchSource_t NotAvailable            	=	TouchSource_NotAvailable;
			const TouchSource_t Failed                  	=	TouchSource_Failed;
	};

	namespace TouchSourcee = TouchSource;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify environs enumeration.
	 * */
	typedef enum Environs_t {
			Environs_type                    	=	NOTIFY_TYPE_ENVIRONS,
			Environs_Start                   	=	NOTIFY_START,
			Environs_StartInProgress         	=	NOTIFY_START_IN_PROGRESS,
			Environs_StartEnablingWifi       	=	NOTIFY_START_ENABLING_WIFI,
			Environs_StartStreamDecoder      	=	NOTIFY_START_STREAM_DECODER,
			Environs_StartInit               	=	NOTIFY_START_INIT,

			Environs_InitFailed              	=	NOTIFY_START_INIT_FAILED,
			Environs_MethodFailed            	=	NOTIFY_START_METHOD_FAILED,
			Environs_DecoderFailed           	=	NOTIFY_START_DECODER_FAILED,
			Environs_WifiFailed              	=	NOTIFY_START_WIFI_FAILED,
			Environs_StartFailed             	=	NOTIFY_START_FAILED,

			Environs_StartInitSuccess        	=	NOTIFY_START_INIT_SUCCESS,
			Environs_StartSuccess            	=	NOTIFY_START_SUCCESS,
			Environs_StartListenSuccess      	=	NOTIFY_START_LISTEN_SUCCESS,
			Environs_StartListenDataSuccess  	=	NOTIFY_START_LISTENDA_SUCCESS,

			Environs_Stop                    	=	NOTIFY_STOP,
			Environs_StopBegin               	=	NOTIFY_STOP_BEGIN,
			Environs_StopInProgress          	=	NOTIFY_STOP_IN_PROGRESS,
			Environs_StopFailed              	=	NOTIFY_STOP_FAILED,
			Environs_StopSuccess             	=	NOTIFY_STOP_SUCCESS,
			Environs_StopReleased            	=	NOTIFY_STOP_RELEASED,

			Environs_Socket                  	=	NOTIFY_SOCKET,
			Environs_SocketBindFailed        	=	NOTIFY_SOCKET_BIND_FAILED,
			Environs_SocketListenFailed      	=	NOTIFY_SOCKET_LISTEN_FAILED,
			Environs_SocketFailed            	=	NOTIFY_SOCKET_FAILED,

			Environs_Settings                	=	NOTIFY_SETTINGS,
			Environs_SettingsChanged         	=	NOTIFY_SETTINGS_CHANGED,

			Environs_Pairing                 	=	NOTIFY_PAIRING,
			Environs_DeviceOnSurface         	=	NOTIFY_DEVICE_ON_SURFACE,
			Environs_DeviceNotOnSurface      	=	NOTIFY_DEVICE_NOT_ON_SURFACE,
			Environs_DeviceFlagsUpdate       	=	NOTIFY_DEVICE_FLAGS_UPDATE,
	} Environs_t;

	typedef	Environs_t	Environse_t;

	/**
	 * Notify environs enumeration.
	 * */
#	ifdef __cplusplus

	namespace Environs {
			const Environs_t type                    	=	Environs_type;
			const Environs_t Start                   	=	Environs_Start;
			const Environs_t StartInProgress         	=	Environs_StartInProgress;
			const Environs_t StartEnablingWifi       	=	Environs_StartEnablingWifi;
			const Environs_t StartStreamDecoder      	=	Environs_StartStreamDecoder;
			const Environs_t StartInit               	=	Environs_StartInit;
			const Environs_t InitFailed              	=	Environs_InitFailed;
			const Environs_t MethodFailed            	=	Environs_MethodFailed;
			const Environs_t DecoderFailed           	=	Environs_DecoderFailed;
			const Environs_t WifiFailed              	=	Environs_WifiFailed;
			const Environs_t StartFailed             	=	Environs_StartFailed;
			const Environs_t StartInitSuccess        	=	Environs_StartInitSuccess;
			const Environs_t StartSuccess            	=	Environs_StartSuccess;
			const Environs_t StartListenSuccess      	=	Environs_StartListenSuccess;
			const Environs_t StartListenDataSuccess  	=	Environs_StartListenDataSuccess;
			const Environs_t Stop                    	=	Environs_Stop;
			const Environs_t StopBegin               	=	Environs_StopBegin;
			const Environs_t StopInProgress          	=	Environs_StopInProgress;
			const Environs_t StopFailed              	=	Environs_StopFailed;
			const Environs_t StopSuccess             	=	Environs_StopSuccess;
			const Environs_t StopReleased            	=	Environs_StopReleased;
			const Environs_t Socket                  	=	Environs_Socket;
			const Environs_t SocketBindFailed        	=	Environs_SocketBindFailed;
			const Environs_t SocketListenFailed      	=	Environs_SocketListenFailed;
			const Environs_t SocketFailed            	=	Environs_SocketFailed;
			const Environs_t Settings                	=	Environs_Settings;
			const Environs_t SettingsChanged         	=	Environs_SettingsChanged;
			const Environs_t Pairing                 	=	Environs_Pairing;
			const Environs_t DeviceOnSurface         	=	Environs_DeviceOnSurface;
			const Environs_t DeviceNotOnSurface      	=	Environs_DeviceNotOnSurface;
			const Environs_t DeviceFlagsUpdate       	=	Environs_DeviceFlagsUpdate;
	};

	namespace Environse = Environs;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify mediator enumeration.
	 * */
	typedef enum Mediator_t {
			Mediator_type                    	=	NOTIFY_MEDIATOR,
			Mediator_Server                  	=	NOTIFY_MEDIATOR_SERVER,
			Mediator_DeviceChanged           	=	NOTIFY_MEDIATOR_DEVICE_CHANGED,
			Mediator_DeviceAdded             	=	NOTIFY_MEDIATOR_DEVICE_ADDED,
			Mediator_DeviceRemoved           	=	NOTIFY_MEDIATOR_DEVICE_REMOVED,
			Mediator_ServerConnected         	=	NOTIFY_MEDIATOR_SERVER_CONNECTED,
			Mediator_ServerDisconnected      	=	NOTIFY_MEDIATOR_SERVER_DISCONNECTED,

			Mediator_DeviceListUpdateAvailable          	=	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE,
			Mediator_DeviceListChanged       	=	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED,

			Mediator_MediatorChanged         	=	NOTIFY_MEDIATOR_MED_CHANGED,

			Mediator_ServerDeviceChanged     	=	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED,
			Mediator_ServerDeviceAdded       	=	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED,
			Mediator_ServerDeviceRemoved     	=	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED,
			Mediator_ServerSTUNTRegisterRequest                    	=	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ,

			Mediator_ServerPasswordFail      	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL,
			Mediator_ServerPasswordMissing   	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING,
	} Mediator_t;

	typedef	Mediator_t	Mediatore_t;

	/**
	 * Notify mediator enumeration.
	 * */
#	ifdef __cplusplus

	namespace Mediator {
			const Mediator_t type                    	=	Mediator_type;
			const Mediator_t Server                  	=	Mediator_Server;
			const Mediator_t DeviceChanged           	=	Mediator_DeviceChanged;
			const Mediator_t DeviceAdded             	=	Mediator_DeviceAdded;
			const Mediator_t DeviceRemoved           	=	Mediator_DeviceRemoved;
			const Mediator_t ServerConnected         	=	Mediator_ServerConnected;
			const Mediator_t ServerDisconnected      	=	Mediator_ServerDisconnected;
			const Mediator_t DeviceListUpdateAvailable          	=	Mediator_DeviceListUpdateAvailable;
			const Mediator_t DeviceListChanged       	=	Mediator_DeviceListChanged;
			const Mediator_t MediatorChanged         	=	Mediator_MediatorChanged;
			const Mediator_t ServerDeviceChanged     	=	Mediator_ServerDeviceChanged;
			const Mediator_t ServerDeviceAdded       	=	Mediator_ServerDeviceAdded;
			const Mediator_t ServerDeviceRemoved     	=	Mediator_ServerDeviceRemoved;
			const Mediator_t ServerSTUNTRegisterRequest                    	=	Mediator_ServerSTUNTRegisterRequest;
			const Mediator_t ServerPasswordFail      	=	Mediator_ServerPasswordFail;
			const Mediator_t ServerPasswordMissing   	=	Mediator_ServerPasswordMissing;
	};

	namespace Mediatore = Mediator;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify network enumeration.
	 * */
	typedef enum Network_t {
			Network_type                    	=	NOTIFY_NETWORK,
			Network_Changed                 	=	NOTIFY_NETWORK_CHANGED,
	} Network_t;

	typedef	Network_t	Networke_t;

	/**
	 * Notify network enumeration.
	 * */
#	ifdef __cplusplus

	namespace Network {
			const Network_t type                    	=	Network_type;
			const Network_t Changed                 	=	Network_Changed;
	};

	namespace Networke = Network;

#	endif
#endif


#ifndef CLI_CPP
	/**
	 * Notify tracker enumeration.
	 * */
	typedef enum Tracker_t {
			Tracker_type                    	=	NOTIFY_TRACKER,
			Tracker_Failed                  	=	NOTIFY_TRACKER_FAILED_FLAG,

			Tracker_Enabled                 	=	NOTIFY_TRACKER_ENABLED,
			Tracker_Changed                 	=	NOTIFY_TRACKER_CHANGED,
			Tracker_Disabled                	=	NOTIFY_TRACKER_DISABLED,
			Tracker_EnableFailed            	=	NOTIFY_TRACKER_ENABLE_FAILED,

			Tracker_InitSensor              	=	NOTIFY_TRACKER_STATE_INIT_SENSOR,
			Tracker_InitSensorFailed        	=	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED,
			Tracker_Start                   	=	NOTIFY_TRACKER_STATE_START,
			Tracker_StartFailed             	=	NOTIFY_TRACKER_STATE_START_FAILED,
			Tracker_Stop                    	=	NOTIFY_TRACKER_STATE_STOP,
	} Tracker_t;

	typedef	Tracker_t	Trackere_t;

	/**
	 * Notify tracker enumeration.
	 * */
#	ifdef __cplusplus

	namespace Tracker {
			const Tracker_t type                    	=	Tracker_type;
			const Tracker_t Failed                  	=	Tracker_Failed;
			const Tracker_t Enabled                 	=	Tracker_Enabled;
			const Tracker_t Changed                 	=	Tracker_Changed;
			const Tracker_t Disabled                	=	Tracker_Disabled;
			const Tracker_t EnableFailed            	=	Tracker_EnableFailed;
			const Tracker_t InitSensor              	=	Tracker_InitSensor;
			const Tracker_t InitSensorFailed        	=	Tracker_InitSensorFailed;
			const Tracker_t Start                   	=	Tracker_Start;
			const Tracker_t StartFailed             	=	Tracker_StartFailed;
			const Tracker_t Stop                    	=	Tracker_Stop;
	};

	namespace Trackere = Tracker;

#	endif
#endif


}
#endif


#ifdef __cplusplus
} /// -> namespace environs
#endif



#endif /// -> INCLUDE_ENVIRONS_TYPESSOURCE