/* DO NOT EDIT THIS FILE - it is machine generated by j2c.jar (see Environs.framework) */
/* Header for environs Types */

/**
 * Types - This class defines integer values which are used as constant
 * for status values, events, message types and so on
 * delivered by the environment.
 * ------------------------------------------------------------------
 * Copyright (c) Chi-Tai Dang
 *
 * @author	Chi-Tai Dang
 * @version	1.0
 * @remarks
 *
 * This file is part of the Environs framework developed at the
 * Lab for Human Centered Multimedia of the University of Augsburg.
 * http://hcm-lab.de/environs
 *
 * Environ is free software; you can redistribute it and/or modify
 * it under the terms of the Eclipse Public License v1.0.
 * A copy of the license may be obtained at:
 * http://www.eclipse.org/org/documents/epl-v10.html
 * --------------------------------------------------------------------
 */
/** 
 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
 * 
 */
#ifndef INCLUDE_ENVIRONS_TYPES
#define INCLUDE_ENVIRONS_TYPES

#ifdef __cplusplus
namespace environs {
#endif


	extern const char * resolveName ( int constToResolve );

	
/**
 * Environs native layer status
 */
/** Uninitialized. Usually after creation of an Environs object. */
#define	STATUS_UNINITIALIZED                              		(0)
/** Environs is about to be disposed. */
#define	STATUS_DISPOSING                                  		(1)
/** Environs is initializing. */
#define	STATUS_INITIALIZING                               		(2)
/** Environs is initialized. Usually after a call to Environs.Init() */
#define	STATUS_INITIALIZED                                		(3)
/** Environs is stopped. Usually after a call to Environs.Stop() */
#define	STATUS_STOPPED                                    		(4)
/** Environs is about to Stop. Thread are being shut down and allocated resources are being released. */
#define	STATUS_STOPPING                                   		(5)
/** Environs is about to Start. Thread are being started and resources are being allocated. */
#define	STATUS_STARTING                                   		(6)
/** Environs is started. Usually after a call to Environs.Start() */
#define	STATUS_STARTED                                    		(7)
/** Environs is in connected state and connected to at least one device. */
#define	STATUS_CONNECTED                                  		(8)

/** 
 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
 * */
	typedef enum Status_t {
			/** Uninitialized. Usually after creation of an Environs object. */
			Status_Uninitialized       	=	STATUS_UNINITIALIZED,
			/** Environs is about to be disposed. */
			Status_Disposing           	=	STATUS_DISPOSING,
			/** Environs is initializing. */
			Status_Initializing        	=	STATUS_INITIALIZING,
			/** Environs is initialized. Usually after a call to Environs.Init() */
			Status_Initialized         	=	STATUS_INITIALIZED,
			/** Environs is stopped. Usually after a call to Environs.Stop() */
			Status_Stopped             	=	STATUS_STOPPED,
			/** Environs is about to Stop. Thread are being shut down and allocated resources are being released. */
			Status_Stopping            	=	STATUS_STOPPING,
			/** Environs is about to Start. Thread are being started and resources are being allocated. */
			Status_Starting            	=	STATUS_STARTING,
			/** Environs is started. Usually after a call to Environs.Start() */
			Status_Started             	=	STATUS_STARTED,
			/** Environs is in connected state and connected to at least one device. */
			Status_Connected           	=	STATUS_CONNECTED,
		} Status_t;

#ifdef __cplusplus
	namespace Status {
			const Status_t Uninitialized       	=	Status_Uninitialized       ;
			const Status_t Disposing           	=	Status_Disposing           ;
			const Status_t Initializing        	=	Status_Initializing        ;
			const Status_t Initialized         	=	Status_Initialized         ;
			const Status_t Stopped             	=	Status_Stopped             ;
			const Status_t Stopping            	=	Status_Stopping            ;
			const Status_t Starting            	=	Status_Starting            ;
			const Status_t Started             	=	Status_Started             ;
			const Status_t Connected           	=	Status_Connected           ;
	};
#endif



/**
 * Max supported instances of Environs objects that each application can run at the same time.
 * */
#define	ENVIRONS_MAX_ENVIRONS_INSTANCES                   		(10)

/**
 * A constant value that identifies an uninitialized display value.
 * */
#define	ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              		(-1)

/**
 * Environs thread states
 */
/** Uninitialized. Usually after creation of an Environs object. */
#define	ENVIRONS_THREAD_NO_THREAD                         		(0)
/** Thread is either created and not yet running or terminated. */
#define	ENVIRONS_THREAD_DETACHEABLE                       		(1)
/** Thread is running. */
#define	ENVIRONS_THREAD_RUNNING                           		(2)



/** Deleteable. Device object has been disabled.&nbsp; 
 * "Garbage Collection" should dispose and delete the object on the next occasion. 
 * */
#define	DEVICE_STATUS_DELETEABLE                          		(0)
/** Device object has just been created. */
#define	DEVICE_STATUS_CREATED                             		(2)
/** Connect in progress. Device object has been created and the connecting task is in progress. */
#define	DEVICE_STATUS_CONNECT_IN_PROGRESS                 		(3)
/** Connected. Device object is connected to the destination device and active. */
#define	DEVICE_STATUS_CONNECTED                           		(4)

/** 
 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
 * */
	typedef enum DeviceStatus_t {
		/** Deleteable. Device object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */
			DeviceStatus_Deleteable          	=	DEVICE_STATUS_DELETEABLE,
			/** Device object has just been created. */
			DeviceStatus_Created             	=	DEVICE_STATUS_CREATED,
			/** Connect in progress. Device object has been created and the connecting task is in progress. */
			DeviceStatus_ConnectInProgress   	=	DEVICE_STATUS_CONNECT_IN_PROGRESS,
			/** Connected. Device object is connected to the destination device and active. */
			DeviceStatus_Connected           	=	DEVICE_STATUS_CONNECTED,
		} DeviceStatus_t;

#ifdef __cplusplus
	namespace DeviceStatus {
			const DeviceStatus_t Deleteable          	=	DeviceStatus_Deleteable          ;
			const DeviceStatus_t Created             	=	DeviceStatus_Created             ;
			const DeviceStatus_t ConnectInProgress   	=	DeviceStatus_ConnectInProgress   ;
			const DeviceStatus_t Connected           	=	DeviceStatus_Connected           ;
	};
#endif


	
/* 
 * Environs source values which determines the source of an event, data, or message.
 */
/** Sent by native layer. */
#define	SOURCE_NATIVE                                     		(0)
/** Sent by platform specific layer. */
#define	SOURCE_PLATFORM                                   		(1)
/** Sent by another device within the environment.  */
#define	SOURCE_DEVICE                                     		(2)
/** Sent by the app layer. */
#define	SOURCE_APPLICATION                                		(3)

/** 
 * Environs source values which determines the source of an event, data, or message.&nbsp;
 * Represents the same values as for ENVIRONS_SOURCE_* 
 * */
	typedef enum Source_t {
			/** Sent by native layer. */
			Source_Native              	=	SOURCE_NATIVE,
			/** Sent by platform specific layer. */
			Source_Platform            	=	SOURCE_PLATFORM,
			/** Sent by another device within the environment.  */
			Source_Device              	=	SOURCE_DEVICE,
			/** Sent by the app layer. */
			Source_Application         	=	SOURCE_APPLICATION,
		} Source_t;

#ifdef __cplusplus
	namespace Source {
			const Source_t Native              	=	Source_Native              ;
			const Source_t Platform            	=	Source_Platform            ;
			const Source_t Device              	=	Source_Device              ;
			const Source_t Application         	=	Source_Application         ;
	};
#endif




#define	ENVIRONS_OBJECT_DISPOSED                          		(-1)
#define	ENVIRONS_OBJECT_DISPOSED_PLATFORM                 		(-2)

/*
 * Native payload type class is determined by the upper byte of payload
 */
#define	MSG_NOTIFY_ID                                     		(0xFF00)
#define	MSG_NOTIFY_CLASS                                  		(0xFF0000)
	
/*
 * Native packet data types, first 4 bytes must confirm to one of these types
 * Type: unsigned short 0xFFFF
 */
/** Class: Helo type */
#define	MSG_TYPE_HELO                                     		(0)
// Handshake states
#define	MSG_HANDSHAKE                                     		(0x100)
	
/** Main channel */
// Former 'D'
#define	MSG_HANDSHAKE_MAIN                                		(MSG_HANDSHAKE | 0x10)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_REQ                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_ACK                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_FAIL                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3)
// Former 'D'
#define	MSG_HANDSHAKE_MAIN_CLOSED                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4)

#define	MSG_HANDSHAKE_BULK                                		(MSG_HANDSHAKE | 0x20)
#define	MSG_HANDSHAKE_BULK_REQ                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 1)
#define	MSG_HANDSHAKE_BULK_ACK                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 2)
#define	MSG_HANDSHAKE_BULK_FAILED                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 3)
#define	MSG_HANDSHAKE_BULK_CLOSED                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 4)

#define	MSG_HANDSHAKE_PROC                                		(MSG_HANDSHAKE | 0x40)
// Former 'P'
#define	MSG_HANDSHAKE_PORTS                               		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1)
#define	MSG_HANDSHAKE_PORTS_ACK                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2)
#define	MSG_HANDSHAKE_CONIG_REQ                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3)
#define	MSG_HANDSHAKE_CONIG_RESP                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4)
#define	MSG_HANDSHAKE_CONIG_RESP_ACK                      		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5)
#define	MSG_HANDSHAKE_CONNECTED                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA)
#define	MSG_HANDSHAKE_DISCONNECTED                        		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB)
	

#define	MSG_HANDSHAKE_UDP                                 		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6)
#define	MSG_HANDSHAKE_UDP_ACK                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7)
	
#define	MSG_HANDSHAKE_SUCCESS                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE)
#define	MSG_HANDSHAKE_SUCCESS_ACK                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF)
	
#define	MSG_HANDSHAKE_SHORT_MESSAGE                       		(MSG_HANDSHAKE | 0x81)
#define	MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   		(MSG_HANDSHAKE | 0x82)

#define	NOTIFY_TYPE_CONNECTION                            		((MSG_TYPE_HELO << 16))
#define	NOTIFY_CONNECTION_MAIN_NEW                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ)
#define	NOTIFY_CONNECTION_MAIN_ACK                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK)
#define	NOTIFY_CONNECTION_MAIN_FAILED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL)
#define	NOTIFY_CONNECTION_MAIN_CLOSED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED)
#define	NOTIFY_CONNECTION_BULK_NEW                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_REQ)
#define	NOTIFY_CONNECTION_BULK_ACK                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_ACK)
#define	NOTIFY_CONNECTION_BULK_FAILED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_FAILED)
#define	NOTIFY_CONNECTION_BULK_CLOSED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_CLOSED)
#define	NOTIFY_CONNECTION_DATA_ACK                        		(NOTIFY_TYPE_CONNECTION | 0xA)
#define	NOTIFY_CONNECTION_DATA_CLOSED                     		(NOTIFY_TYPE_CONNECTION | 0xC)

#define	NOTIFY_CONNECTION_PROGRESS                        		(NOTIFY_TYPE_CONNECTION | 0xD)
	
#define	NOTIFY_CONNECTION_ESTABLISHED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS)
#define	NOTIFY_CONNECTION_ESTABLISHED_ACK                 		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK)
#define	NOTIFY_CONNECTION_CLOSED                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED)
	
#define	NOTIFY_SHORT_MESSAGE                              		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE)
#define	NOTIFY_SHORT_MESSAGE_ACK                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK)
	
	
// Stream types
#define	DATA_STREAM                                       		(0x200)
#define	DATA_STREAM_INIT                                  		(1)

#define	DATA_STREAM_IFRAME                                		(0x400)

/** Class: Image type */
#define	MSG_TYPE_IMAGE                                    		(1)
// 0x10
#define	DATA_STREAM_IMAGE                                 		(MSG_TYPE_IMAGE << 4)
#define	DATA_STREAM_IMAGE_INIT                            		(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT)
#define	DATA_STREAM_IMAGE_DATA                            		(DATA_STREAM | DATA_STREAM_IMAGE | 8)
#define	DATA_STREAM_IMAGE_JPEG                            		(DATA_STREAM_IMAGE_DATA | 2)
#define	DATA_STREAM_IMAGE_PNG                             		(DATA_STREAM_IMAGE_DATA | 4)

/** Class: Video type */
#define	MSG_TYPE_STREAM                                   		(2)
// 0x20
#define	DATA_STREAM_H264                                  		(MSG_TYPE_STREAM << 4)
// Initialization protocol version 1 packet with width and height
#define	DATA_STREAM_H264_INIT                             		(DATA_STREAM | DATA_STREAM_H264 | DATA_STREAM_INIT)
// Header packets of h264
#define	DATA_STREAM_H264_HDR                              		(DATA_STREAM | DATA_STREAM_H264 | 2)
#define	DATA_STREAM_H264_NAL                              		(DATA_STREAM | DATA_STREAM_H264 | 4)
#define	DATA_STREAM_H264_NALUS                            		(DATA_STREAM | DATA_STREAM_H264 | 8)


/** 
 * Portal Source Status enumeration.
 * */
	typedef enum PortalStatus_t {
		/** Deleteable. The portal object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */
			PortalStatus_Deleteable          	=	0,
			/** The portal has just been created. */
			PortalStatus_Created             	=	1,
			/** Initialized. The portal is initialized, that is the resources (threads, plugins, the pipeline) has been established or are ready to use */
			PortalStatus_Initialized         	=	2,
			/** Active. The portal is initialized and actively streaming. */
			PortalStatus_Active              	=	3,
		} PortalStatus_t;

#ifdef __cplusplus
	namespace PortalStatus {
			const PortalStatus_t Deleteable          	=	PortalStatus_Deleteable          ;
			const PortalStatus_t Created             	=	PortalStatus_Created             ;
			const PortalStatus_t Initialized         	=	PortalStatus_Initialized         ;
			const PortalStatus_t Active              	=	PortalStatus_Active              ;
	};
#endif



/** Class: Portal constants */
#define	MAX_PORTAL_STREAMS_A_DEVICE                       		(6)
#define	MAX_PORTAL_CONTEXT_WORKERS                        		(2)
#define	MAX_PORTAL_OVERLAYS                               		(6)
#define	MAX_PORTAL_GENERATOR_SLOTS                        		(5)
#define	MAX_PORTAL_REQUEST_WAIT_TIME_MS                   		(30000)


/**
 * A portal ID is masked as follows:
 * 0xFFFFFFFF
 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
 * 0x0000F000 portal type
 * 0x00000300 direction
 * 0x000000FF portal id (the same between both devices)
 */

/** Class: Portal type */
#define	PORTAL_TYPE_ANY                                   		(0)
#define	PORTAL_TYPE_SCREEN                                		(0x1000)
#define	PORTAL_TYPE_BACK_CAM                              		(0x2000)
#define	PORTAL_TYPE_FRONT_CAM                             		(0x4000)
#define	PORTAL_TYPE_MASK                                  		(0xF000)
	
/** 
 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
 * */
	typedef enum PortalType_t {
		/** Any type. The requested portal can be of any type. Which one depends on the application logic.
		 * */
			PortalType_Any                 	=	PORTAL_TYPE_ANY,
			/** The devices screen. */
			PortalType_Screen              	=	PORTAL_TYPE_SCREEN,
			/** The back facing camera. */
			PortalType_BackCam             	=	PORTAL_TYPE_BACK_CAM,
			/** The front facing camera. */
			PortalType_FrontCam            	=	PORTAL_TYPE_FRONT_CAM,
		} PortalType_t;

#ifdef __cplusplus
	namespace PortalType {
			const PortalType_t Any                 	=	PortalType_Any                 ;
			const PortalType_t Screen              	=	PortalType_Screen              ;
			const PortalType_t BackCam             	=	PortalType_BackCam             ;
			const PortalType_t FrontCam            	=	PortalType_FrontCam            ;
	};
#endif



/** Class: Portal status */
#define	PORTAL_STATUS_DISPOSED                            		(ENVIRONS_OBJECT_DISPOSED)
#define	PORTAL_STATUS_CREATED                             		(0)
#define	PORTAL_STATUS_CREATED_FROM_REQUEST                		(1)
#define	PORTAL_STATUS_CREATED_ASK_REQUEST                 		(2)
#define	PORTAL_STATUS_ESTABLISHED                         		(4)
#define	PORTAL_STATUS_STARTED                             		(6)


/** Class: Portal stream type */
#define	STREAMTYPE_UNKNOWN                                		(0)
#define	STREAMTYPE_IMAGES                                 		(0x10)
#define	STREAMTYPE_IMAGES_JPEG                            		(STREAMTYPE_IMAGES | 0x1)
#define	STREAMTYPE_IMAGES_PNG                             		(STREAMTYPE_IMAGES | 0x2)
#define	STREAMTYPE_VIDEO                                  		(0x20)
#define	STREAMTYPE_VIDEO_H264                             		(STREAMTYPE_VIDEO | 0x1)
	
/** 
 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
 * */
	typedef enum PortalStreamType_t {
			PortalStreamType_Unknown             	=	STREAMTYPE_UNKNOWN,
			/** Sequence of jpeg images. 	*/
			PortalStreamType_Images              	=	STREAMTYPE_IMAGES,
			/** Sequence of jpeg images. 	*/
			PortalStreamType_ImagesJPEG          	=	STREAMTYPE_IMAGES_JPEG,
			/** Sequence of png images. 	*/
			PortalStreamType_ImagesPNG           	=	STREAMTYPE_IMAGES_PNG,
			/** Video stream. 						*/
			PortalStreamType_Video               	=	STREAMTYPE_VIDEO,
			/** Video stream H264. 						*/
			PortalStreamType_VideoH264           	=	STREAMTYPE_VIDEO_H264,
		} PortalStreamType_t;

#ifdef __cplusplus
	namespace PortalStreamType {
			const PortalStreamType_t Unknown             	=	PortalStreamType_Unknown             ;
			const PortalStreamType_t Images              	=	PortalStreamType_Images              ;
			const PortalStreamType_t ImagesJPEG          	=	PortalStreamType_ImagesJPEG          ;
			const PortalStreamType_t ImagesPNG           	=	PortalStreamType_ImagesPNG           ;
			const PortalStreamType_t Video               	=	PortalStreamType_Video               ;
			const PortalStreamType_t VideoH264           	=	PortalStreamType_VideoH264           ;
	};
#endif



/** Class: PortalInfo flag bits */
#define	PORTAL_INFO_FLAG_LOCATION                         		(0x1)
#define	PORTAL_INFO_FLAG_ANGLE                            		(0x2)
#define	PORTAL_INFO_FLAG_SIZE                             		(0x4)


/** Class: Portal messages and notifications */
#define	MSG_TYPE_PORTAL                                   		(5)
#define	MSG_PORTAL_ERROR                                  		(0x400)
#define	PORTAL_DIR_INCOMING                               		(0x200)
#define	PORTAL_DIR_OUTGOING                               		(0x100)
#define	PORTAL_DIR_MASK                                   		(0x300)
#define	NOTIFY_PORTAL                                     		(0x800)


#define	NOTIFY_PORTAL_INSTANCE                            		(0x100800)
#define	PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              		(NOTIFY_PORTAL_INSTANCE | 0x1)

// Portal message subtypes
#define	MSG_PORTAL_REQUEST_ID                             		(0)
#define	MSG_PORTAL_REQUEST                                		(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID)
#define	MSG_PORTAL_ASK_FOR_REQUEST_ID                     		(1)
#define	MSG_PORTAL_ASK_FOR_REQUEST                        		(NOTIFY_PORTAL 	| MSG_PORTAL_ASK_FOR_REQUEST_ID)
#define	MSG_PORTAL_PROVIDE_STREAM_ID                      		(2)
#define	MSG_PORTAL_PROVIDE_STREAM                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID)
#define	MSG_PORTAL_PROVIDE_IMAGES_ID                      		(3)
#define	MSG_PORTAL_PROVIDE_IMAGES                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID)
#define	MSG_PORTAL_REQUEST_FAIL_ID                        		(4)
#define	MSG_PORTAL_REQUEST_FAIL                           		(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID)
	
#define	MSG_PORTAL_STOP_ID                                		(5)
#define	MSG_PORTAL_STOP                                   		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID)
#define	MSG_PORTAL_STOP_ACK_ID                            		(6)
#define	MSG_PORTAL_STOP_ACK                               		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID)
#define	MSG_PORTAL_STOP_FAIL_ID                           		(7)
#define	MSG_PORTAL_STOP_FAIL                              		(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID)
#define	MSG_PORTAL_START_ID                               		(8)
#define	MSG_PORTAL_START                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID)
#define	MSG_PORTAL_START_ACK_ID                           		(9)
#define	MSG_PORTAL_START_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID)
#define	MSG_PORTAL_START_FAIL_ID                          		(10)
#define	MSG_PORTAL_START_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID)
#define	MSG_PORTAL_PAUSE_ID                               		(11)
#define	MSG_PORTAL_PAUSE                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID)
#define	MSG_PORTAL_PAUSE_ACK_ID                           		(12)
#define	MSG_PORTAL_PAUSE_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID)
#define	MSG_PORTAL_PAUSE_FAIL_ID                          		(13)
#define	MSG_PORTAL_PAUSE_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID)


#define	MSG_PORTAL_BUFFER_FULL_ID                         		(14)
#define	MSG_PORTAL_BUFFER_FULL                            		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID)
#define	MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  		(15)
#define	MSG_PORTAL_BUFFER_AVAIL_AGAIN                     		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID)
#define	MSG_PORTAL_IFRAME_REQUEST_ID                      		(16)
#define	MSG_PORTAL_IFRAME_REQUEST                         		(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID)

#define	MSG_PORTAL_MAX_COUNT                              		(16 + 1)


#define	NOTIFY_TYPE_PORTAL                                		((MSG_TYPE_PORTAL << 16))
#define	NOTIFY_PORTAL_ESTABLISHED                         		(0x80)
#define	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              		(NOTIFY_TYPE_PORTAL | 0x81)

#define	NOTIFY_PORTAL_REQUEST                             		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST)
#define	NOTIFY_PORTAL_ASK_REQUEST                         		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_ASK_FOR_REQUEST)
#define	NOTIFY_PORTAL_STREAM_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_IMAGES_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_INCOMING_ESTABLISHED                		(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING | NOTIFY_PORTAL_ESTABLISHED)
#define	NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING)
#define	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING)
#define	NOTIFY_PORTAL_PROVIDER_READY                      		(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK | NOTIFY_PORTAL_ESTABLISHED)
#define	NOTIFY_PORTAL_REQUEST_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING)
#define	NOTIFY_PORTAL_PROVIDE_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING)
	
#define	NOTIFY_PORTAL_STREAM_STARTED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK)
#define	NOTIFY_PORTAL_STREAM_PAUSED                       		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK)
#define	NOTIFY_PORTAL_STREAM_STOPPED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK)

#define	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             		(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF)


/**
 * Environs options set/get messages
 */
/** Class: Options type */
#define	MSG_TYPE_OPTIONS                                  		(6)
#define	MSG_TYPE_OPTIONS_RESPONSE                         		(7)
#define	MSG_OPTION_TYPE                                   		(0xF00)
#define	MSG_OPTION_SET                                    		(0x100)
#define	MSG_OPTION_GET                                    		(0x200)

// Transport options
#define	MSG_OPTION_TRANSPORT                              		(0x10)
#define	MSG_OPT_TRANSP_TCP_PORTAL                         		(MSG_OPTION_TRANSPORT | 0x1)
#define	MSG_OPT_TRANSP_TCP_PORTAL_SET                     		(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL)
#define	MSG_OPT_TRANSP_TCP_PORTAL_GET                     		(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL)

// Portal options
#define	MSG_OPTION_PORTAL                                 		(0x20)
#define	MSG_OPT_PORTAL_CENTER                             		(MSG_OPTION_PORTAL | 0x1)
#define	MSG_OPT_PORTAL_CENTER_SET                         		(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER)
#define	MSG_OPT_PORTAL_CENTER_GET                         		(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER)
#define	MSG_OPT_PORTAL_WH                                 		(MSG_OPTION_PORTAL | 0x2)
#define	MSG_OPT_PORTAL_WH_SET                             		(MSG_OPTION_SET | MSG_OPT_PORTAL_WH)
#define	MSG_OPT_PORTAL_INFO                               		(MSG_OPTION_PORTAL | 0x4)
#define	MSG_OPT_PORTAL_INFO_SET                           		(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO)
#define	MSG_OPT_PORTAL_INFO_GET                           		(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO)

// Physical contact options
#define	MSG_OPTION_CONTACT                                		(0x40)
#define	MSG_OPT_CONTACT_DIRECT                            		(MSG_OPTION_CONTACT | 0x1)
#define	MSG_OPT_CONTACT_DIRECT_SET                        		(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT)
#define	MSG_OPT_CONTACT_DIRECT_GET                        		(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT)
	
#define	NOTIFY_TYPE_OPTIONS                               		((MSG_TYPE_OPTIONS << 16))
#define	NOTIFY_PORTAL_LOCATION_CHANGED                    		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET)
#define	NOTIFY_PORTAL_SIZE_CHANGED                        		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET)
#define	NOTIFY_CONTACT_DIRECT_CHANGED                     		(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET)


/*
 * Native file types to app
 */
#define	MSG_TYPE_FILE                                     		(3)
/** Class: File type */
// File types
#define	NATIVE_FILE_TYPE                                  		(0x400)
#define	NATIVE_FILE_TYPE_APP_DEFINED                      		(NATIVE_FILE_TYPE)
#define	NATIVE_FILE_TYPE_EXT_DEFINED                      		(NATIVE_FILE_TYPE | 1)
#define	NATIVE_FILE_TYPE_CHUNKED                          		(NATIVE_FILE_TYPE | 6)
#define	NATIVE_FILE_TYPE_ACK                              		(NATIVE_FILE_TYPE | 0xF)

#define	MSG_TYPE_MESSAGE                                  		(4)
#define	MESSAGE_FROM_APP                                  		(0x800)
#define	MESSAGE_APP_STRING                                		(MESSAGE_FROM_APP | 1)


#define	NOTIFY_TYPE_FILE                                  		((MSG_TYPE_FILE << 16))
#define	NOTIFY_TYPE_FILE_PROGRESS                         		(NOTIFY_TYPE_FILE | 0x20)

#define	NOTIFY_FILE_SEND_PROGRESS                         		(NOTIFY_TYPE_FILE_PROGRESS | 1)
#define	NOTIFY_FILE_RECEIVE_PROGRESS                      		(NOTIFY_TYPE_FILE_PROGRESS | 2)


/*
 * Environs options data identifiers for onData
 */
	
/*
 * Native callback for errors
 */
#define	NOTIFY_TOUCHSOURCE                                		(0x40)
#define	NOTIFY_TOUCHSOURCE_STARTED                        		(NOTIFY_TOUCHSOURCE | 2)
#define	NOTIFY_TOUCHSOURCE_STOPPED                        		(NOTIFY_TOUCHSOURCE | 4)
	
#define	NOTIFY_TOUCHSOURCE_NOTAVAIL                       		(NOTIFY_TOUCHSOURCE | 8)
#define	NOTIFY_TOUCHSOURCE_FAILED                         		(NOTIFY_TOUCHSOURCE | 9)


/**
 * Environs human input declarations
 */
/**
 * Input types for human input
 * */
#define	INPUT_TYPE_CURSOR                                 		(0)
#define	INPUT_TYPE_FINGER                                 		(1)
#define	INPUT_TYPE_PEN                                    		(2)
#define	INPUT_TYPE_MARKER                                 		(4)
#define	INPUT_TYPE_BLOB                                   		(8)
	
/**
 * Native callback for errors
 */
#define	NATIVE_EVENT_ERROR_MISC                           		(0x80)
#define	NATIVE_EVENT_DATA_CON_FAILED                      		(NATIVE_EVENT_ERROR_MISC | 3)
#define	NATIVE_EVENT_TOUCH_SOURCE_FAILED                  		(NATIVE_EVENT_ERROR_MISC | 4)

/**
 * Input states for a particular human input entity
 * */
#define	INPUT_STATE_ADD                                   		(1)
#define	INPUT_STATE_CHANGE                                		(2)
#define	INPUT_STATE_NOCHANGE                              		(3)
#define	INPUT_STATE_DROP                                  		(4)

/**
 * Input commands for a particular human input entity
 * */
#define	INPUTSOURCE_COMMAND_INIT                          		(0)
#define	INPUTSOURCE_COMMAND_ADD                           		(1)
#define	INPUTSOURCE_COMMAND_CHANGE                        		(2)
#define	INPUTSOURCE_COMMAND_DROP                          		(4)
#define	INPUTSOURCE_COMMAND_CANCEL                        		(6)
#define	INPUTSOURCE_COMMAND_FLUSH                         		(8)
#define	INPUTSOURCE_COMMAND_FOLLOWUP                      		(0x80)

/**
 * Environs Start notifications
 */
/** Class: Environs type */
#define	MSG_TYPE_ENVIRONS                                 		(8)
#define	MSG_TYPE_MAX_COUNT                                		(MSG_TYPE_ENVIRONS + 1)

#define	NOTIFY_TYPE_ENVIRONS                              		((MSG_TYPE_ENVIRONS << 16))
#define	NOTIFY_START                                      		(NOTIFY_TYPE_ENVIRONS | 0x100)
#define	NOTIFY_START_IN_PROGRESS                          		(NOTIFY_START | 1)
#define	NOTIFY_START_ENABLING_WIFI                        		(NOTIFY_START | 2)
#define	NOTIFY_START_STREAM_DECODER                       		(NOTIFY_START | 3)
#define	NOTIFY_START_INIT                                 		(NOTIFY_START | 4)

#define	NOTIFY_START_INIT_FAILED                          		(NOTIFY_START | 7)
#define	NOTIFY_START_METHOD_FAILED                        		(NOTIFY_START | 8)
#define	NOTIFY_START_DECODER_FAILED                       		(NOTIFY_START | 9)
#define	NOTIFY_START_WIFI_FAILED                          		(NOTIFY_START | 10)
#define	NOTIFY_START_FAILED                               		(NOTIFY_START | 11)

#define	NOTIFY_START_INIT_SUCCESS                         		(NOTIFY_START | 12)
#define	NOTIFY_START_SUCCESS                              		(NOTIFY_START | 13)
#define	NOTIFY_START_LISTEN_SUCCESS                       		(NOTIFY_START | 14)
#define	NOTIFY_START_LISTENDA_SUCCESS                     		(NOTIFY_START | 15)

/**
 * Environs Stop notifications
 */
#define	NOTIFY_STOP                                       		(NOTIFY_TYPE_ENVIRONS | 0x200)
#define	NOTIFY_STOP_IN_PROGRESS                           		(NOTIFY_STOP | 1)
#define	NOTIFY_STOP_FAILED                                		(NOTIFY_STOP | 10)
#define	NOTIFY_STOP_SUCCESS                               		(NOTIFY_STOP | 11)
#define	NOTIFY_STOP_RELEASED                              		(NOTIFY_STOP | 12)
	
/**
 * Environs socket notifications
 */
#define	NOTIFY_SOCKET                                     		(NOTIFY_TYPE_ENVIRONS | 0x400)
#define	NOTIFY_SOCKET_BIND_FAILED                         		(NOTIFY_SOCKET | 7)
#define	NOTIFY_SOCKET_LISTEN_FAILED                       		(NOTIFY_SOCKET | 8)
#define	NOTIFY_SOCKET_FAILED                              		(NOTIFY_SOCKET | 9)

/**
 * Environs socket notifications
 */
#define	NOTIFY_SETTINGS                                   		(NOTIFY_TYPE_ENVIRONS | 0x480)
#define	NOTIFY_SETTINGS_CHANGED                           		(NOTIFY_SETTINGS | 0x1)
	
/**
 * Environs device paring notifications
 */
#define	NOTIFY_PAIRING                                    		(NOTIFY_TYPE_ENVIRONS | 0x800)
#define	NOTIFY_DEVICE_ON_SURFACE                          		(NOTIFY_PAIRING | 1)
#define	NOTIFY_DEVICE_NOT_ON_SURFACE                      		(NOTIFY_PAIRING | 2)

/**
 * Environs mediator filter constants
 */
#define	MEDIATOR_FILTER_NONE                              		(0)
#define	MEDIATOR_FILTER_AREA                              		(1)
#define	MEDIATOR_FILTER_AREA_AND_APP                      		(2)
/// Disable all devicelist notifications
#define	MEDIATOR_FILTER_ALL                               		(8)


/**
 * Environs mediator broadcast found values
 */
#define	DEVICEINFO_DEVICE_MEDIATOR                        		(0)
#define	DEVICEINFO_DEVICE_BROADCAST                       		(1)
#define	DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          		(2)

/**
 * Environs mediator broadcast message Start bytes
 */
#define	MEDIATOR_BROADCAST_DEVICETYPE_START               		(11)
#define	MEDIATOR_BROADCAST_DEVICEID_START                 		(12)
#define	MEDIATOR_BROADCAST_PORTS_START                    		(20)
#define	MEDIATOR_BROADCAST_PLATFORM_START                 		(24)
#define	MEDIATOR_BROADCAST_DESC_START                     		(28)

/**
 * Environs mediator broadcast message constants
 */
#define	TYPES_SEPERATOR_1_ENVIRONS                        		(28)
#define	MEDIATOR_BROADCAST_SPARE_ID_LEN                   		(28)

/**
 * Environs DeviceInstance struct Start bytes
 */
#define	MAX_NAMEPROPERTY                                  		(30)
/** Ignore: for Resolver */
#define	MAX_LENGTH_AREA_NAME                              		(MAX_NAMEPROPERTY + 1)
/** Ignore: for Resolver */
#define	MAX_LENGTH_APP_NAME                               		(MAX_NAMEPROPERTY + 1)
/** Ignore: for Resolver */
#define	MAX_LENGTH_DEVICE_NAME                            		(MAX_NAMEPROPERTY + 1)

#define	DEVICEINFO_DEVICEID_START                         		(0)
#define	DEVICEINFO_NATIVE_ID_START                        		(4)
#define	DEVICEINFO_IP_START                               		(DEVICEINFO_NATIVE_ID_START + 4)
#define	DEVICEINFO_IPe_START                              		(DEVICEINFO_IP_START + 4)
#define	DEVICEINFO_TCP_PORT_START                         		(DEVICEINFO_IPe_START + 4)
#define	DEVICEINFO_UDP_PORT_START                         		(DEVICEINFO_TCP_PORT_START + 2)
#define	DEVICEINFO_UPDATES_START                          		(DEVICEINFO_UDP_PORT_START + 2)
#define	DEVICEINFO_PLATFORM_START                         		(DEVICEINFO_UPDATES_START + 4)
#define	DEVICEINFO_BROADCAST_START                        		(DEVICEINFO_PLATFORM_START + 4)
#define	DEVICEINFO_UNAVAILABLE_START                      		(DEVICEINFO_BROADCAST_START + 1)
#define	DEVICEINFO_ISCONNECTED_START                      		(DEVICEINFO_UNAVAILABLE_START + 1)
#define	DEVICEINFO_DEVICETYPE_START                       		(DEVICEINFO_ISCONNECTED_START + 2)
#define	DEVICEINFO_DEVICENAME_START                       		(DEVICEINFO_DEVICETYPE_START + 1)
#define	DEVICEINFO_AREANAME_START                         		(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1))
#define	DEVICEINFO_APPNAME_START                          		(DEVICEINFO_AREANAME_START + (MAX_NAMEPROPERTY + 1))
#define	DEVICEINFO_OBJID_START                            		(DEVICEINFO_APPNAME_START + (MAX_NAMEPROPERTY + 1) + 2)


/**
 * Environs mediator notifications
 */
#define	NOTIFY_MEDIATOR                                   		(NOTIFY_TYPE_ENVIRONS | 0x1000)
#define	NOTIFY_MEDIATOR_SERVER                            		(NOTIFY_MEDIATOR | 0x100)
	
#define	NOTIFY_MEDIATOR_DEVICE_CHANGED                    		(NOTIFY_MEDIATOR | 1)
#define	NOTIFY_MEDIATOR_DEVICE_ADDED                      		(NOTIFY_MEDIATOR | 2)
#define	NOTIFY_MEDIATOR_DEVICE_REMOVED                    		(NOTIFY_MEDIATOR | 4)
#define	NOTIFY_MEDIATOR_SERVER_CONNECTED                  		(NOTIFY_MEDIATOR | 20)
#define	NOTIFY_MEDIATOR_SERVER_DISCONNECTED               		(NOTIFY_MEDIATOR | 21)

#define	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      		(NOTIFY_MEDIATOR | 51)
#define	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               		(NOTIFY_MEDIATOR | 52)

#define	NOTIFY_MEDIATOR_MED_CHANGED                       		(NOTIFY_MEDIATOR | 11)
	
#define	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                		(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  		(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                		(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER)
#define	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 		(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER)
	
#define	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              		(NOTIFY_MEDIATOR | 41)
#define	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           		(NOTIFY_MEDIATOR | 42)


/**
 * Environs network notifications
 */
#define	NOTIFY_NETWORK                                    		(NOTIFY_TYPE_ENVIRONS | 0x2000)
#define	NOTIFY_NETWORK_CHANGED                            		(NOTIFY_NETWORK | 0x1)


/** Ignore: for Resolver */
#define	META_MSG_IDENT                                    		("~META~:")
/** Ignore: for Resolver */
#define	META_MSG_NAME_ID                                  		(" NAME ")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_AREA_NAME                        		("Environs")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_APP_NAME                         		("HCMDefaultApp")
/** Ignore: for Resolver */
#define	ENVIRONS_DEFAULT_DEVICE_NAME                      		("DefaultDevice")
/** Ignore: for Resolver */
#define	ENVIRONS_STUNT_MAX_TRY                            		(15)
/** Ignore: for Resolver */
#define	ENVIRONS_STUN_MAX_TRY                             		(10)


/**
 * Environs network notifications
 */
#define	NOTIFY_TRACKER                                    		(NOTIFY_TYPE_ENVIRONS | 0x4000)

#define	NOTIFY_TRACKER_FAILED_FLAG                        		(0x8)

#define	NOTIFY_TRACKER_ENABLED                            		(NOTIFY_TRACKER | 0x1)
#define	NOTIFY_TRACKER_CHANGED                            		(NOTIFY_TRACKER | 0x2)
#define	NOTIFY_TRACKER_DISABLED                           		(NOTIFY_TRACKER | 0x4)
#define	NOTIFY_TRACKER_ENABLE_FAILED                      		(NOTIFY_TRACKER | NOTIFY_TRACKER_FAILED_FLAG)

#define	NOTIFY_TRACKER_STATE_INIT_SENSOR                  		(NOTIFY_TRACKER | 0x10)
#define	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           		(NOTIFY_TRACKER_STATE_INIT_SENSOR | NOTIFY_TRACKER_FAILED_FLAG)
#define	NOTIFY_TRACKER_STATE_START                        		(NOTIFY_TRACKER | 0x20)
#define	NOTIFY_TRACKER_STATE_START_FAILED                 		(NOTIFY_TRACKER | NOTIFY_TRACKER_STATE_START | NOTIFY_TRACKER_FAILED_FLAG)
#define	NOTIFY_TRACKER_STATE_STOP                         		(NOTIFY_TRACKER | 0x40)

/**
 * Device types. Obsolete. Should not be used anymore.
 * Type: char
 */
#define	DEVICE_TYPE_DISPLAY                               		('D')
#define	DEVICE_TYPE_MULTITACTION                          		('M')
#define	DEVICE_TYPE_SURFACE1                              		('R')
#define	DEVICE_TYPE_SURFACE2                              		('S')
#define	DEVICE_TYPE_TABLET                                		('T')
#define	DEVICE_TYPE_UNKNOWN                               		('U')
#define	DEVICE_TYPE_SMARTPHONE                            		('P')


/**
 * Device queue commands.
 * Type: int
 */
#define	DEVICELIST_QUEUE_COMMAND_RELOAD                   		(0)
#define	DEVICELIST_QUEUE_COMMAND_CLEAR                    		(1)
#define	DEVICELIST_QUEUE_COMMAND_APPEND                   		(2)
#define	DEVICELIST_QUEUE_COMMAND_UPDATE                   		(3)
#define	DEVICELIST_QUEUE_COMMAND_INSERT_AT                		(4)
#define	DEVICELIST_QUEUE_COMMAND_REMOVE_AT                		(5)
#define	DEVICELIST_QUEUE_COMMAND_INSERT_CALL              		(6)
#define	DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             		(7)
#define	DEVICELIST_QUEUE_COMMAND_LOCK                     		(8)


/**
 * Device display orientation types used in Device.Display.h
 * Type: char
 */
#define	DISPLAY_ORIENTATION_LANDSCAPE                     		(0)
#define	DISPLAY_ORIENTATION_PORTRAIT                      		(1)


/**
 * Device activity / connectivity flags
 * Type: int
 */
#define	DEVICE_ACTIVITY_MAIN_CONNECTED                    		(0x1)
#define	DEVICE_ACTIVITY_BULK_CONNECTED                    		(0x2)
#define	DEVICE_ACTIVITY_UDP_CONNECTED                     		(0x4)
#define	DEVICE_ACTIVITY_CONNECTED                         		(0x10)
#define	DEVICE_ACTIVITY_REQUESTOR                         		(0x100)
#define	DEVICE_ACTIVITY_RESPONDER                         		(0x200)
#define	DEVICE_ACTIVITY_LISTENER_CLOSED                   		(0x8000)
#define	DEVICE_ACTIVITY_PLATFORM_DISPOSED                 		(0x1000)
	
/**
 * Environs common native declarations
 *  
 */
#define	MEDIATOR_BUFFER_SIZE_MAX                          		(65535)
#define	ENVIRONS_SEND_SIZE_MAX                            		((40 * 1024 * 1024))

/** 
 * Extension plugin interface type enumeration.
 * */
	typedef enum InterfaceType_t {
			InterfaceType_Unknown             	=	0,
			/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
			InterfaceType_Capture             	=	1,
			/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
			InterfaceType_Render              	=	2,
			/** An Encoder encodes the rendered image to a target format / stream. */
			InterfaceType_Encoder             	=	3,
			/** A Decoder decodes stream packets to images */
			InterfaceType_Decoder             	=	4,
			/** A Tracker that analyzes raw images for objects, touches, etc. */
			InterfaceType_Tracker             	=	5,
			/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InterfaceType_InputRecognizer     	=	10,
			/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InterfaceType_OrientationRecognizer          	=	11,
		} InterfaceType_t;

#ifdef __cplusplus
	namespace InterfaceType {
			const InterfaceType_t Unknown             	=	InterfaceType_Unknown             ;
			const InterfaceType_t Capture             	=	InterfaceType_Capture             ;
			const InterfaceType_t Render              	=	InterfaceType_Render              ;
			const InterfaceType_t Encoder             	=	InterfaceType_Encoder             ;
			const InterfaceType_t Decoder             	=	InterfaceType_Decoder             ;
			const InterfaceType_t Tracker             	=	InterfaceType_Tracker             ;
			const InterfaceType_t InputRecognizer     	=	InterfaceType_InputRecognizer     ;
			const InterfaceType_t OrientationRecognizer          	=	InterfaceType_OrientationRecognizer          ;
	};
#endif



/** 
 * Capture subtype enumeration.
 * */
	typedef enum CaptureType_t {
			CaptureType_Unknown             	=	0,
		/** A screen such as the dekstop window, 
		 *  where the device may cover only part of the display.
		 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
			CaptureType_Screen              	=	1,
			/** An application window, where each device may have a different app window and may cover only part of the window. */
			CaptureType_AppWindow           	=	2,
			/** Camera */
			CaptureType_Camera              	=	6,
		} CaptureType_t;

#ifdef __cplusplus
	namespace CaptureType {
			const CaptureType_t Unknown             	=	CaptureType_Unknown             ;
			const CaptureType_t Screen              	=	CaptureType_Screen              ;
			const CaptureType_t AppWindow           	=	CaptureType_AppWindow           ;
			const CaptureType_t Camera              	=	CaptureType_Camera              ;
	};
#endif



/** 
 * Capture plugin data buffer type enumeration.
 * */
	typedef enum CaptureBufferType_t {
			CaptureBufferType_Unknown             	=	0,
			/** The data is stored as pixel data usually in rgba order. */
			CaptureBufferType_PixelBuffer         	=	1,
			/** The data follows either D3D or OpenGL texture format. */
			CaptureBufferType_Texture3D           	=	10,
			/** The data follows either D3D or OpenGL buffer format. */
			CaptureBufferType_PixelBuffer3D       	=	11,
		} CaptureBufferType_t;

#ifdef __cplusplus
	namespace CaptureBufferType {
			const CaptureBufferType_t Unknown             	=	CaptureBufferType_Unknown             ;
			const CaptureBufferType_t PixelBuffer         	=	CaptureBufferType_PixelBuffer         ;
			const CaptureBufferType_t Texture3D           	=	CaptureBufferType_Texture3D           ;
			const CaptureBufferType_t PixelBuffer3D       	=	CaptureBufferType_PixelBuffer3D       ;
	};
#endif



/** 
 * Portal stage buffer data type enumeration.
 * */
	typedef enum PortalBufferType_t {
			PortalBufferType_Unknown             	=	0,
			/** Windows ARGB. */
			PortalBufferType_ARGB                	=	0x1,
			/** Windows ARGB and the associated HBITMAP handle. */
			PortalBufferType_ARGBHandle          	=	0x2,
			/** iOS ARGB. */
			PortalBufferType_BGRA                	=	0x3,
			/** RGB 24bit. */
			PortalBufferType_RGB                 	=	0x4,
			/** I420. */
			PortalBufferType_YUV420              	=	0x10,
			/** YV12. */
			PortalBufferType_YV12                	=	0x12,
			/** YUY2. */
			PortalBufferType_YUY2                	=	0x14,
			/** GDIBitmap. */
			PortalBufferType_GDIBitmap           	=	0x100,
			/** The data follows either D3D or OpenGL texture format. */
			PortalBufferType_Texture3D           	=	0x1000,
			/** The data follows either D3D or OpenGL buffer format. */
			PortalBufferType_PixelBuffer3D       	=	0x2000,
			/** CVPixelBufferRef of apple platforms. */
			PortalBufferType_CVPixelBufferIOSX   	=	0x3000,
		} PortalBufferType_t;

#ifdef __cplusplus
	namespace PortalBufferType {
			const PortalBufferType_t Unknown             	=	PortalBufferType_Unknown             ;
			const PortalBufferType_t ARGB                	=	PortalBufferType_ARGB                ;
			const PortalBufferType_t ARGBHandle          	=	PortalBufferType_ARGBHandle          ;
			const PortalBufferType_t BGRA                	=	PortalBufferType_BGRA                ;
			const PortalBufferType_t RGB                 	=	PortalBufferType_RGB                 ;
			const PortalBufferType_t YUV420              	=	PortalBufferType_YUV420              ;
			const PortalBufferType_t YV12                	=	PortalBufferType_YV12                ;
			const PortalBufferType_t YUY2                	=	PortalBufferType_YUY2                ;
			const PortalBufferType_t GDIBitmap           	=	PortalBufferType_GDIBitmap           ;
			const PortalBufferType_t Texture3D           	=	PortalBufferType_Texture3D           ;
			const PortalBufferType_t PixelBuffer3D       	=	PortalBufferType_PixelBuffer3D       ;
			const PortalBufferType_t CVPixelBufferIOSX   	=	PortalBufferType_CVPixelBufferIOSX   ;
	};
#endif



/** 
 * Encoder buffer data type enumeration.
 * */
	typedef enum EncoderBufferType_t {
			EncoderBufferType_Unknown             	=	0,
			/** Windows ARGB. */
			EncoderBufferType_ARGB                	=	1,
			/** I420. */
			EncoderBufferType_YUV420              	=	10,
		} EncoderBufferType_t;

#ifdef __cplusplus
	namespace EncoderBufferType {
			const EncoderBufferType_t Unknown             	=	EncoderBufferType_Unknown             ;
			const EncoderBufferType_t ARGB                	=	EncoderBufferType_ARGB                ;
			const EncoderBufferType_t YUV420              	=	EncoderBufferType_YUV420              ;
	};
#endif




/**
 * Input recognizer states
 * Type: int
 */
#define	RECOGNIZER_GIVE_BACK_INPUTS                       		(-1)
#define	RECOGNIZER_REJECT                                 		(0)
#define	RECOGNIZER_HANDLED                                		(1)
#define	RECOGNIZER_TAKEN_OVER_INPUTS                      		(2)


#define	NETWORK_CONNECTION_NO_NETWORK                     		(-1)
#define	NETWORK_CONNECTION_NO_INTERNET                    		(0)
#define	NETWORK_CONNECTION_MOBILE_DATA                    		(1)
#define	NETWORK_CONNECTION_WIFI                           		(2)
#define	NETWORK_CONNECTION_LAN                            		(3)
	
#define	ERR_LEVEL                                         		(-1)
#define	WARN_LEVEL                                        		(-2)


#define	DEVICE_INFO_ATTR_DISPOSED                         		(0x1)
#define	DEVICE_INFO_ATTR_ISCONNECTED                      		(0x2)
#define	DEVICE_INFO_ATTR_CONNECT_PROGRESS                 		(0x4)
#define	DEVICE_INFO_ATTR_USER_NAME                        		(0x10)

#define	DEVICE_INFO_ATTR_IDENTITY                         		(0x20)

#define	DEVICE_INFO_ATTR_DEVICE_PLATFORM                  		(0x40)
#define	DEVICE_INFO_ATTR_DEVICE_TYPE                      		(0x41)
#define	DEVICE_INFO_ATTR_NATIVEID                         		(0x80)
#define	DEVICE_INFO_ATTR_IP                               		(0x100)
#define	DEVICE_INFO_ATTR_IPE                              		(0x200)
#define	DEVICE_INFO_ATTR_TCP_PORT                         		(0x400)
#define	DEVICE_INFO_ATTR_UDP_PORT                         		(0x800)
#define	DEVICE_INFO_ATTR_UNAVAILABLE                      		(0x1000)
#define	DEVICE_INFO_ATTR_BROADCAST_FOUND                  		(0x2000)
#define	DEVICE_INFO_ATTR_DIRECT_CONTACT                   		(0x4000)
#define	DEVICE_INFO_ATTR_APP_CONTEXT                      		(0x8000)
#define	DEVICE_INFO_ATTR_PORTAL_CREATED                   		(0x10000)
#define	DEVICE_INFO_ATTR_OBJID                            		(0x20000)


#define	FILE_INFO_ATTR_CREATED                            		(0x10000)
#define	FILE_INFO_ATTR_AVAILABLE                          		(0x20000)
#define	FILE_INFO_ATTR_SEND_PROGRESS                      		(0x40000)
#define	FILE_INFO_ATTR_RECEIVE_PROGRESS                   		(0x80000)

#define	MESSAGE_INFO_ATTR_CREATED                         		(0x200000)

#define	APP_STATUS_ACTIVE                                 		(0)
#define	APP_STATUS_SLEEPING                               		(1)

#define	ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               		(60)

#define	MAX_TCP_SEND_PACKET_SIZE                          		(1200000)


/**
 * Environs detectable platforms.
 * */
	typedef enum Platforms_t {
			Platforms_Unknown             	=	0,
			/** MS Surface Tabletops */
			Platforms_MSSurface_Flag      	=	0x1000,
			/** Samsung SUR40 */
			Platforms_MSSUR01             	=	0x1001,
			/** Samsung SUR40 */
			Platforms_SAMSUR40            	=	0x1002,

			/** iPad */
			Platforms_iPad_Flag           	=	0x2000,
			Platforms_iPad1               	=	0x2011,
			Platforms_iPad2               	=	0x2021,
			Platforms_iPad2Mini           	=	0x2022,
			Platforms_iPad3               	=	0x2031,
			Platforms_iPad4               	=	0x2041,
			Platforms_iPad4Air            	=	0x2042,
			Platforms_iPad4Mini           	=	0x2043,
			Platforms_iPad4Mini3          	=	0x2044,
			Platforms_iPad5Air2           	=	0x2051,

			/** iPhones */
			Platforms_iPhone_Flag         	=	0x4000,
			Platforms_iPhone4             	=	0x4041,
			Platforms_iPhone5             	=	0x4051,
			Platforms_iPhone6             	=	0x4061,
			Platforms_iPhone6p            	=	0x4062,

			/** MultiTaction Cells */
			Platforms_MultiTaction_Flag   	=	0x8000,
			/** MultiTaction Cell 55. */
			Platforms_MultiTaction55      	=	0x8055,

			Platforms_OSX_Flag            	=	0x10000,
			Platforms_MacBook_Flag        	=	0x10010,
			Platforms_MacMini_Flag        	=	0x10020,

			Platforms_Windows_Flag        	=	0x20000,
			Platforms_WindowsVista        	=	0x20050,
			Platforms_WindowsXP           	=	0x20060,
			Platforms_Windows7            	=	0x20070,
			Platforms_Windows8            	=	0x20080,

			Platforms_Tablet_Flag         	=	0x100000,
			Platforms_Smartphone_Flag     	=	0x200000,
			Platforms_Tabletop_Flag       	=	0x400000,
			Platforms_Display_Flag        	=	0x800000,







		} Platforms_t;

#ifdef __cplusplus
	namespace Platforms {
			const Platforms_t Unknown             	=	Platforms_Unknown             ;
			const Platforms_t MSSurface_Flag      	=	Platforms_MSSurface_Flag      ;
			const Platforms_t MSSUR01             	=	Platforms_MSSUR01             ;
			const Platforms_t SAMSUR40            	=	Platforms_SAMSUR40            ;
			const Platforms_t iPad_Flag           	=	Platforms_iPad_Flag           ;
			const Platforms_t iPad1               	=	Platforms_iPad1               ;
			const Platforms_t iPad2               	=	Platforms_iPad2               ;
			const Platforms_t iPad2Mini           	=	Platforms_iPad2Mini           ;
			const Platforms_t iPad3               	=	Platforms_iPad3               ;
			const Platforms_t iPad4               	=	Platforms_iPad4               ;
			const Platforms_t iPad4Air            	=	Platforms_iPad4Air            ;
			const Platforms_t iPad4Mini           	=	Platforms_iPad4Mini           ;
			const Platforms_t iPad4Mini3          	=	Platforms_iPad4Mini3          ;
			const Platforms_t iPad5Air2           	=	Platforms_iPad5Air2           ;
			const Platforms_t iPhone_Flag         	=	Platforms_iPhone_Flag         ;
			const Platforms_t iPhone4             	=	Platforms_iPhone4             ;
			const Platforms_t iPhone5             	=	Platforms_iPhone5             ;
			const Platforms_t iPhone6             	=	Platforms_iPhone6             ;
			const Platforms_t iPhone6p            	=	Platforms_iPhone6p            ;
			const Platforms_t MultiTaction_Flag   	=	Platforms_MultiTaction_Flag   ;
			const Platforms_t MultiTaction55      	=	Platforms_MultiTaction55      ;
			const Platforms_t OSX_Flag            	=	Platforms_OSX_Flag            ;
			const Platforms_t MacBook_Flag        	=	Platforms_MacBook_Flag        ;
			const Platforms_t MacMini_Flag        	=	Platforms_MacMini_Flag        ;
			const Platforms_t Windows_Flag        	=	Platforms_Windows_Flag        ;
			const Platforms_t WindowsVista        	=	Platforms_WindowsVista        ;
			const Platforms_t WindowsXP           	=	Platforms_WindowsXP           ;
			const Platforms_t Windows7            	=	Platforms_Windows7            ;
			const Platforms_t Windows8            	=	Platforms_Windows8            ;
			const Platforms_t Tablet_Flag         	=	Platforms_Tablet_Flag         ;
			const Platforms_t Smartphone_Flag     	=	Platforms_Smartphone_Flag     ;
			const Platforms_t Tabletop_Flag       	=	Platforms_Tabletop_Flag       ;
			const Platforms_t Display_Flag        	=	Platforms_Display_Flag        ;
	};
#endif



/*
 * Crypt declarations
 */
#define	ENVIRONS_DEVICES_KEYSIZE                          		(2048)
#define	ENVIRONS_CRYPT_PAD_OAEP                           		((1 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1                          		((2 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1SHA1                      		((4 << 24))
#define	ENVIRONS_CRYPT_PAD_PKCS1SHA256                    		((8 << 24))

#define	MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   		(0xFFFF)
#define	DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  		(MEDIATOR_CLIENT_MAX_BUFFER_SIZE)
/*
 * Mediator device class types used for GetDevicesFrom ( type )
 */
#define	MEDIATOR_DEVICE_CLASS_ALL                         		(0)
#define	MEDIATOR_DEVICE_CLASS_NEARBY                      		(1)
#define	MEDIATOR_DEVICE_CLASS_MEDIATOR                    		(2)


/**
 * Environs call flags
 * Type: int
 */
#define	CALL_WAIT                                         		(0)
#define	CALL_NOWAIT                                       		(1)


/**
 * Environs RENDER_CALLBACK_TYPES
 * Type: int
 */
#define	RENDER_CALLBACK_TYPE_ALL                          		(0)
/** Call back with received ByteBuffer */
#define	RENDER_CALLBACK_TYPE_INIT                         		(0x10)
/** Call back with EnvironsAVContext */
#define	RENDER_CALLBACK_TYPE_AVCONTEXT                    		(0x20)
/** Call back with IPortalDecoder */
#define	RENDER_CALLBACK_TYPE_DECODER                      		(0x40)
/** Call back with received ByteBuffer */
#define	RENDER_CALLBACK_TYPE_IMAGE                        		(0x80)


/**
 * Environs AVCONTEXT_TYPES
 * Type: int
 */
#define	DECODER_AVCONTEXT_TYPE_PIXELS                     		(0)
#define	DECODER_AVCONTEXT_TYPE_AVCONTEXT                  		(RENDER_CALLBACK_TYPE_AVCONTEXT)
#define	DECODER_AVCONTEXT_TYPE_JPG                        		(2)
#define	DECODER_AVCONTEXT_TYPE_PNG                        		(3)


/**
 * Environs AVCONTEXT_SUBTYPES
 * Type: int
 */
#define	ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    		(0)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   		(1)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   		(2)

#define	ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    		(6)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   		(7)
#define	ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   		(8)

#define	TYPES_SEPERATOR_2_ENVIRONS                        		(0)

/**
 * Environs SENSOR_TYPES
 * Type: int
 */
#define	ENVIRONS_SENSOR_TYPE_ACCELEROMETER                		(0)
#define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                		(1)
#define	ENVIRONS_SENSOR_TYPE_GYROSCOPE                    		(2)
#define	ENVIRONS_SENSOR_TYPE_ORIENTATION                  		(3)


/**
 * Environs Option keys
 * Type: String
 */
/** Ignore: for Resolver */
#define	APPENV_MAPPINGS                                   		("mappings")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT             		("optDefaultMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM              		("optCustomMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT_N           		("optDNefaultMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM_N            		("optCNustomMedToken")
/** Ignore: for Resolver */
#define	APPENV_SETTING_TOKEN_MEDIATOR_USERNAME            		("optMediatorUsername")
/** Ignore: for Resolver */
#define	APPENV_SETTING_INITIALS                           		("optInitialSettings")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_NATIVE_DECODER              		("optUseNativeDecoder")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_HARDWARE_DECODER            		("optUseHardwareEncoder")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_SHOW_DEBUG_LOGS             		("useShowDebugStatus")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_LOG_FILE                    		("useLogFile")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_PUSH_NOTIFS                 		("optUsePushNotifications")
/** Ignore: for Resolver */
#define	APPENV_SETTING_GL_USE_SENSORS                     		("optUseSensors")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_AUTOSTART               		("optPortalAutoStart")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_DEFAULT_MEDIATOR               		("optUseDefaultMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOM_MEDIATOR                		("optUseCustomMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_TCP                     		("optPortalTCP")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_NATIVE_RESOLUTION              		("optNativeResolution")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_STREAM                         		("optUseStream")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_MEDIATOR                   		("useCLSMediator")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_DEVICE                     		("useCLSDevice")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CLS_DEV_ENFORCE                		("useCLSDevEnforce")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_AUTH                           		("useAuth")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_ANONYMOUS                      		("useAnonymous")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTAL_AUTOACCEPT              		("portalAutoAccept")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_ID                          		("optDeviceID")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_UID                         		("uid")
/** Ignore: for Resolver */
#define	APPENV_SETTING_DEVICE_NAME                        		("optDeviceName")

/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_MEDIATOR_LOGIN_DLG             		("useMediatorLoginDialog")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOMMEDIATOR_PORT            		("optMediatorPort")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_CUSTOMMEDIATOR_IP              		("optMediatorIP")
/** Ignore: for Resolver */
#define	APPENV_SETTING_USE_PORTALVIEW_DIMS_AUTO           		("optUsePortalViewDimsAuto")






#ifdef __cplusplus
} /// -> namespace environs
#endif



#endif /// -> INCLUDE_ENVIRONS_TYPES