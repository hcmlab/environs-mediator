/* DO NOT EDIT THIS FILE - it is machine generated by j2c.jar */
/* Events, Types, Messages for environs TypesSource */

/**
 * ------------------------------------------------------------------
 * Copyright (c) Chi-Tai Dang
 *
 * @author	Chi-Tai Dang
 * @version	1.0
 *
 * This file is part of the Environs framework developed at the
 * Lab for Human Centered Multimedia of the University of Augsburg.
 * http://hcm-lab.de/environs
 *
 * Environ is free software; you can redistribute it and/or modify
 * it under the terms of the Eclipse Public License v1.0.
 * A copy of the license may be obtained at:
 * http://www.eclipse.org/org/documents/epl-v10.html
 * --------------------------------------------------------------------
 */
#ifndef INCLUDE_ENVIRONS_TYPESSOURCE_CLI
#define INCLUDE_ENVIRONS_TYPESSOURCE_CLI

#include "Environs.Types.h"
using namespace System;



namespace environs
{
	/// <summary>
	/// Events, Types, Messages for environs TypesSource 
	/// This class defines integer values which identifies status values, events, message types and so on delivered by Environs.
	/// </summary>

	/** 
	 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
	 * */
	public enum class Status {
			/** Disposed. */
			Disposed            	=	STATUS_DISPOSED,
			/** Uninitialized. Usually after creation of an Environs object. */
			Uninitialized       	=	STATUS_UNINITIALIZED,
			/** Environs is about to be disposed. */
			Disposing           	=	STATUS_DISPOSING,
			/** Environs is initializing. */
			Initializing        	=	STATUS_INITIALIZING,
			/** Environs is initialized. Usually after a call to Environs.Init() */
			Initialized         	=	STATUS_INITIALIZED,
			/** Environs is stopped. Usually after a call to Environs.Stop() */
			Stopped             	=	STATUS_STOPPED,
			/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */
			StopInProgress      	=	STATUS_STOP_IN_PROGRESS,
			/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */
			Stopping            	=	STATUS_STOPPING,
			/** Environs is about to Start. Thread are being started and resources are being allocated. */
			Starting            	=	STATUS_STARTING,
			/** Environs is started. Usually after a call to Environs.Start() */
			Started             	=	STATUS_STARTED,
			/** Environs is in connected state and connected to at least one device. */
			Connected           	=	STATUS_CONNECTED,
	};


	/**
	 * Environs thread Status enumeration.
	 * */
	public enum class ThreadStatus {
			/** Uninitialized. Usually after creation of an Environs object. */
			NoThread            	=	ENVIRONS_THREAD_NO_THREAD,
			/** Thread is either created and not yet running or terminated. */
			Detacheable         	=	ENVIRONS_THREAD_DETACHEABLE,
			/** Thread is running. */
			Running             	=	ENVIRONS_THREAD_RUNNING,
		
	};


	/** 
	 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
	 * */
	public enum class DeviceStatus {
			/** Deleteable. Device object has been disabled.&nbsp; 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * */
			Deleteable          	=	DEVICE_STATUS_DELETEABLE,
			/** Device object has just been created. */
			Created             	=	DEVICE_STATUS_CREATED,
			/** Connect in progress. Device object has been created and the connecting task is in progress. */
			ConnectInProgress   	=	DEVICE_STATUS_CONNECT_IN_PROGRESS,
			/** Connected. Device object is connected to the destination device and active. */
			Connected           	=	DEVICE_STATUS_CONNECTED,
	};


	/** 
	 * Environs source values which determines the source of an event, data, or message.&nbsp;
	 * Represents the same values as for ENVIRONS_SOURCE_* 
	 * */
	public enum class Source {
			/** Sent by native layer. */
			Native              	=	SOURCE_NATIVE,
			/** Sent by platform specific layer. */
			Platform            	=	SOURCE_PLATFORM,
			/** Sent by another device within the environment.  */
			Device              	=	SOURCE_DEVICE,
			/** Sent by the app layer. */
			Application         	=	SOURCE_APPLICATION,
	};


		
	/** 
	 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
	 * */
	public enum class PortalType {
			/** Any type. The requested portal can be of any type. Which one depends on the application logic.
			 * */
			Any                 	=	PORTAL_TYPE_ANY,
			/** The devices screen. */
			Screen              	=	PORTAL_TYPE_SCREEN,
			/** The back facing camera. */
			BackCam             	=	PORTAL_TYPE_BACK_CAM,
			/** The front facing camera. */
			FrontCam            	=	PORTAL_TYPE_FRONT_CAM,
	};


	/**
	 * Portal status enumeration.
	 * */
	public enum class PortalStatus {
			Disposed            	=	PORTAL_STATUS_DISPOSED,
			Created             	=	PORTAL_STATUS_CREATED,
			CreatedFromRequest  	=	PORTAL_STATUS_CREATED_FROM_REQUEST,
			CreatedAskRequest   	=	PORTAL_STATUS_CREATED_ASK_REQUEST,
			Established         	=	PORTAL_STATUS_ESTABLISHED,
			Started             	=	PORTAL_STATUS_STARTED,
		
	};


	/**
	 * Portal Source Status enumeration.
	 * */
	public enum class PortalSourceStatus {
			/** Deleteable. The portal object has been disabled.&nbsp;
			 * "Garbage Collection" should dispose and delete the object on the next occasion.
			 * "Garbage Collection" should dispose and delete the object on the next occasion.
			 * */
			Deleteable          	=	0,
			/** The portal has just been created. */
			Created             	=	1,
			/** Initialized. The portal is initialized, that is the resources (threads, plugins, the pipeline) has been established or are ready to use */
			Initialized         	=	2,
			/** Active. The portal is initialized and actively streaming. */
			Active              	=	3,
		
	};


	/** 
	 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
	 * */
	public enum class PortalStreamType {
			Unknown             	=	STREAMTYPE_UNKNOWN,
			/** Sequence of jpeg images. 	*/
			Images              	=	STREAMTYPE_IMAGES,
			/** Sequence of jpeg images. 	*/
			ImagesJPEG          	=	STREAMTYPE_IMAGES_JPEG,
			/** Sequence of png images. 	*/
			ImagesPNG           	=	STREAMTYPE_IMAGES_PNG,
			/** Video stream. 						*/
			Video               	=	STREAMTYPE_VIDEO,
			/** Video stream H264. 						*/
			VideoH264           	=	STREAMTYPE_VIDEO_H264,
	};


		
		
			/* TEst comment */
		
		
	/**
	 * Input type enumeration.
	 * */
	public enum class InputType {
			Cursor              	=	INPUT_TYPE_CURSOR,
			Finger              	=	INPUT_TYPE_FINGER,
			Pen                 	=	INPUT_TYPE_PEN,
			Marker              	=	INPUT_TYPE_MARKER,
			Blob                	=	INPUT_TYPE_BLOB,
		
	};


	/**
	 * Input state enumeration.
	 * */
	public enum class InputState {
			Add                 	=	INPUT_STATE_ADD,
			Change              	=	INPUT_STATE_CHANGE,
			NoChange            	=	INPUT_STATE_NOCHANGE,
			Drop                	=	INPUT_STATE_DROP,
		
	};


	/**
	 * Input source commands enumeration.
	 * */
	public enum class InputCommand {
			Init                	=	INPUTSOURCE_COMMAND_INIT,
			Add                 	=	INPUTSOURCE_COMMAND_ADD,
			Change              	=	INPUTSOURCE_COMMAND_CHANGE,
			Drop                	=	INPUTSOURCE_COMMAND_DROP,
			Cancel              	=	INPUTSOURCE_COMMAND_CANCEL,
			Flush               	=	INPUTSOURCE_COMMAND_FLUSH,
			FollowUp            	=	INPUTSOURCE_COMMAND_FOLLOWUP,
		
	};


		
		
		
		
		
		
		
		
		
		
		
		
		
	/**
	 * Environs mediator filter enumeration.
	 * */
	public enum class MediatorFilter {
			None                	=	MEDIATOR_FILTER_NONE,
			Area                	=	MEDIATOR_FILTER_AREA,
			AreaAndApp          	=	MEDIATOR_FILTER_AREA_AND_APP,
			All                 	=	MEDIATOR_FILTER_ALL,
		
	};


	/**
	 * Device source type enumeration.
	 * */
	public enum class DeviceSourceType {
			Mediator            	=	DEVICEINFO_DEVICE_MEDIATOR,
			Broadcast           	=	DEVICEINFO_DEVICE_BROADCAST,
			MediatorBroadcast   	=	DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR,
		
	};


		
		
		
		
		
		
		
		
		
	/**
	 * Deviceflags for internalFlags enumeration.
	 * */
	public enum class DeviceFlagsInternal {
			NativeReady         	=	DEVICEFLAGS_INTERNAL_NATIVE_READY,
			PlatformReady       	=	DEVICEFLAGS_INTERNAL_PLATFORM_READY,
			ObserverReady       	=	DEVICEFLAGS_INTERNAL_OBSERVER_READY,
			MessageReady        	=	DEVICEFLAGS_INTERNAL_MESSAGE_READY,
			DataReady           	=	DEVICEFLAGS_INTERNAL_DATA_READY,
			SensorReady         	=	DEVICEFLAGS_INTERNAL_SENSOR_READY,
			NotifyMask          	=	DEVICEFLAGS_INTERNAL_NOTIFY_MASK,
		
			CPNativeReady       	=	DEVICEFLAGS_INTERNAL_CP_NATIVE_READY,
			CPPlatformReady     	=	DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY,
			CPObserverReady     	=	DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY,
			CPMessageReady      	=	DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY,
			CPDataReady         	=	DEVICEFLAGS_INTERNAL_CP_DATA_READY,
			CPSensorReady       	=	DEVICEFLAGS_INTERNAL_CP_SENSOR_READY,
			CPNotifyMask        	=	DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK,
		
	};


		
		
		
		
		
	/** 
	 * Extension plugin interface type enumeration.
	 * */
	public enum class InterfaceType {
			Unknown             	=	INTERFACE_TYPE_UNKNOWN,
			/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
			Capture             	=	INTERFACE_TYPE_CAPTURE,
			/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
			Render              	=	INTERFACE_TYPE_RENDER,
			/** An Encoder encodes the rendered image to a target format / stream. */
			Encoder             	=	INTERFACE_TYPE_ENCODER,
			/** A Decoder decodes stream packets to images */
			Decoder             	=	INTERFACE_TYPE_DECODER,
			/** A Tracker that analyzes raw images for objects, touches, etc. */
			Tracker             	=	INTERFACE_TYPE_TRACKER,
			/** A Sensor that implements a sensor of type SensorType_t */
			Sensor              	=	INTERFACE_TYPE_SENSOR,
			/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InputRecognizer     	=	INTERFACE_TYPE_INPUT_RECOGNIZER,
			/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			OrientationRecognizer          	=	INTERFACE_TYPE_ORIENTATION_RECOGNIZER,
			/** An external implementation of a thread function. */
			ExtThread           	=	INTERFACE_TYPE_EXTENSION_THREAD,
		
	};


	/** 
	 * Capture subtype enumeration.
	 * */
	public enum class CaptureType {
			Unknown             	=	CAPTURE_TYPE_UNKNOWN,
			/** A screen such as the dekstop window, 
			 *  where the device may cover only part of the display.
			 *  where the device may cover only part of the display.
			 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
			Screen              	=	CAPTURE_TYPE_SCREEN,
			/** An application window, where each device may have a different app window and may cover only part of the window. */
			AppWindow           	=	CAPTURE_TYPE_APP_WINDOW,
			/** Camera */
			Camera              	=	CAPTURE_TYPE_CAMERA,
	};


	/** 
	 * Portal stage buffer data type enumeration.
	 * */
	public enum class PortalBufferType {
			Unknown             	=	PORTAL_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			ARGB                	=	PORTAL_BUFFERTYPE_ARGB,
			/** Windows ARGB and the associated HBITMAP handle. */
			ARGBHandle          	=	PORTAL_BUFFERTYPE_ARGB_HANDLE,
			/** iOS ARGB. */
			BGRA                	=	PORTAL_BUFFERTYPE_BGRA,
			/** RGB 24bit. */
			RGB                 	=	PORTAL_BUFFERTYPE_RGB,
			/** BGR 24bit. */
			BGR                 	=	PORTAL_BUFFERTYPE_BGR,
			/** I420. */
			YUV420              	=	PORTAL_BUFFERTYPE_YUV420,
			/** YV12. */
			YV12                	=	PORTAL_BUFFERTYPE_YV12,
			/** YUY2. */
			YUY2                	=	PORTAL_BUFFERTYPE_YUV2,
			/** NV12. */
			NV12                	=	PORTAL_BUFFERTYPE_NV12,
			/** GDIBitmap. */
			GDIBitmap           	=	PORTAL_BUFFERTYPE_GDI_BITMAP,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	PORTAL_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	PORTAL_BUFFERTYPE_PIXELBUFFER_3D,
			/** CVPixelBufferRef of apple platforms. */
			CVPixelBufferIOSX   	=	PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX,
	};


	/**
	 * Capture plugin data buffer type enumeration.
	 * */
	public enum class CaptureBufferType {
			Unknown             	=	CAPTURE_BUFFERTYPE_UNKNOWN,
			/** The data is stored as pixel data usually in rgba order. */
			PixelBuffer         	=	CAPTURE_BUFFERTYPE_PIXELBUFFER,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	CAPTURE_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	CAPTURE_BUFFERTYPE_PIXELBUFFER_3D,
		
	};


	/** 
	 * Encoder buffer data type enumeration.
	 * */
	public enum class EncoderBufferType {
			Unknown             	=	ENCODER_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			ARGB                	=	ENCODER_BUFFERTYPE_ARGB,
			/** I420. */
			YUV420              	=	ENCODER_BUFFERTYPE_YUV420,
	};


	/**
	 * Network connection enumeration.
	 * */
	public enum class NetworkConnection {
			TriggerUpdate       	=	NETWORK_CONNECTION_TRIGGER_UPDATE,
			Unknown             	=	NETWORK_CONNECTION_UNKNOWN,
			NoNetwork           	=	NETWORK_CONNECTION_NO_NETWORK,
			NoInternet          	=	NETWORK_CONNECTION_NO_INTERNET,
			MobileData          	=	NETWORK_CONNECTION_MOBILE_DATA,
			WiFi                	=	NETWORK_CONNECTION_WIFI,
			LAN                 	=	NETWORK_CONNECTION_LAN,
		
	};


	/**
	 * DeviceInfoAttr attribute enumeration.
	 * */
	public enum class DeviceInfoFlag {
			Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			DisposedChanged     	=	DEVICE_INFO_ATTR_DISPOSED,
			IsConnected         	=	DEVICE_INFO_ATTR_ISCONNECTED,
			ConnectProgress     	=	DEVICE_INFO_ATTR_CONNECT_PROGRESS,
			UserName            	=	DEVICE_INFO_ATTR_USER_NAME,
			Identity            	=	DEVICE_INFO_ATTR_IDENTITY,
			Platform            	=	DEVICE_INFO_ATTR_DEVICE_PLATFORM,
			DeviceType          	=	DEVICE_INFO_ATTR_DEVICE_TYPE,
			NativeID            	=	DEVICE_INFO_ATTR_NATIVEID,
			IP                  	=	DEVICE_INFO_ATTR_IP,
			IPe                 	=	DEVICE_INFO_ATTR_IPE,
			TcpPort             	=	DEVICE_INFO_ATTR_TCP_PORT,
			UdpPort             	=	DEVICE_INFO_ATTR_UDP_PORT,
			Unavailable         	=	DEVICE_INFO_ATTR_UNAVAILABLE,
			BroadcastFound      	=	DEVICE_INFO_ATTR_BROADCAST_FOUND,
			DirectContact       	=	DEVICE_INFO_ATTR_DIRECT_CONTACT,
			AppContext          	=	DEVICE_INFO_ATTR_APP_CONTEXT,
			PortalCreated       	=	DEVICE_INFO_ATTR_PORTAL_CREATED,
			ObjectID            	=	DEVICE_INFO_ATTR_OBJID,
			Flags               	=	DEVICE_INFO_ATTR_FLAGS,
		
	};


	/**
	 * FileInfo attribute enumeration.
	 * */
	public enum class FileInfoFlag {
			Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			Created             	=	FILE_INFO_ATTR_CREATED,
			Available           	=	FILE_INFO_ATTR_AVAILABLE,
			SendProgress        	=	FILE_INFO_ATTR_SEND_PROGRESS,
			ReceiveProgress     	=	FILE_INFO_ATTR_RECEIVE_PROGRESS,
		
	};


	/**
	 * MessageInfo attribute enumeration.
	 * */
	public enum class MessageInfoFlag {
			Disposed            	=	ENVIRONS_OBJECT_DISPOSED,
			Created             	=	MESSAGE_INFO_ATTR_CREATED,
		
	};


	/**
	 * Environs detectable platforms.
	 * */
	public enum class Platforms {
			Unknown             	=	ENVIRONS_PLATFORMS_UNKNOWN,
			/** MS Surface Tabletops */
			MSSurface_Flag      	=	ENVIRONS_PLATFORMS_MSSURFACE_FLAG,
			/** Surface 1 tabletop */
			MSSUR01             	=	ENVIRONS_PLATFORMS_MSSUR01,
			/** Samsung SUR40 PixelSense */
			SAMSUR40            	=	ENVIRONS_PLATFORMS_SAMSUR40,
		
			/** iPad */
			iPad_Flag           	=	ENVIRONS_PLATFORMS_IPAD_FLAG,
			iPad1               	=	ENVIRONS_PLATFORMS_IPAD1,
			iPad2               	=	ENVIRONS_PLATFORMS_IPAD2,
			iPad2Mini           	=	ENVIRONS_PLATFORMS_IPAD2MINI,
			iPad3               	=	ENVIRONS_PLATFORMS_IPAD3,
			iPad4               	=	ENVIRONS_PLATFORMS_IPAD4,
			iPad4Air            	=	ENVIRONS_PLATFORMS_IPAD4AIR,
			iPad4Mini           	=	ENVIRONS_PLATFORMS_IPAD4MINI,
			iPad4Mini3          	=	ENVIRONS_PLATFORMS_IPAD4MINI3,
			iPad5Air2           	=	ENVIRONS_PLATFORMS_IPAD5AIR2,
		
			/** iPhones */
			iPhone_Flag         	=	ENVIRONS_PLATFORMS_IPHONE_FLAG,
			iPhone4             	=	ENVIRONS_PLATFORMS_IPHONE4,
			iPhone5             	=	ENVIRONS_PLATFORMS_IPHONE5,
			iPhone6             	=	ENVIRONS_PLATFORMS_IPHONE6,
			iPhone6p            	=	ENVIRONS_PLATFORMS_IPHONE6P,
		
			/** MultiTaction Cells */
			MultiTaction_Flag   	=	ENVIRONS_PLATFORMS_MULTITACTION_FLAG,
			/** MultiTaction Cell 55. */
			MultiTaction55      	=	ENVIRONS_PLATFORMS_MULTITACTION55,
		
			OSX_Flag            	=	ENVIRONS_PLATFORMS_OSX_FLAG,
			MacBook_Flag        	=	ENVIRONS_PLATFORMS_MACBOOK_FLAG,
			MacMini_Flag        	=	ENVIRONS_PLATFORMS_MACMINI_FLAG,
		
			Linux_Flag          	=	ENVIRONS_PLATFORMS_LINUX_FLAG,
			Raspberry_Flag      	=	ENVIRONS_PLATFORMS_RASPBERRY,
		
			Windows_Flag        	=	ENVIRONS_PLATFORMS_WINDOWS_FLAG,
			WindowsVista        	=	ENVIRONS_PLATFORMS_WINDOWSVISTA,
			WindowsXP           	=	ENVIRONS_PLATFORMS_WINDOWSXP,
			Windows7            	=	ENVIRONS_PLATFORMS_WINDOWS7,
			Windows8            	=	ENVIRONS_PLATFORMS_WINDOWS8,
			Windows10           	=	ENVIRONS_PLATFORMS_WINDOWS10,
		
			Tablet_Flag         	=	ENVIRONS_PLATFORMS_TABLET_FLAG,
			Smartphone_Flag     	=	ENVIRONS_PLATFORMS_SMARTPHONE_FLAG,
			Tabletop_Flag       	=	ENVIRONS_PLATFORMS_TABLETOP_FLAG,
			Display_Flag        	=	ENVIRONS_PLATFORMS_DISPLAY_FLAG,
		
			LocationNode_Flag   	=	ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG,
		
		
		
		
		
		
		
		
	};


	/**
	 * Mediator device class types enumeration.
	 * */
	public enum class DeviceClass {
			All                 	=	MEDIATOR_DEVICE_CLASS_ALL,
			Nearby              	=	MEDIATOR_DEVICE_CLASS_NEARBY,
			Mediator            	=	MEDIATOR_DEVICE_CLASS_MEDIATOR,
		
	};


	/**
	 * Environs call enumeration.
	 * */
	public enum class Call {
			Wait                	=	CALL_WAIT,
			NoWait              	=	CALL_NOWAIT,
		
	};


	/**
	 * Environs RENDER_CALLBACK_TYPES enumeration.
	 * */
	public enum class RenderCallbackType {
			All                 	=	RENDER_CALLBACK_TYPE_ALL,
			Init                	=	RENDER_CALLBACK_TYPE_INIT,
			AvContext           	=	RENDER_CALLBACK_TYPE_AVCONTEXT,
			Decoder             	=	RENDER_CALLBACK_TYPE_DECODER,
			Image               	=	RENDER_CALLBACK_TYPE_IMAGE,
		
	};


	/**
	 * Environs AVCONTEXT_TYPES enumeration.
	 * */
	public enum class DecoderContextType {
			AvContext           	=	DECODER_AVCONTEXT_TYPE_AVCONTEXT,
			Jpg                 	=	DECODER_AVCONTEXT_TYPE_JPG,
			Png                 	=	DECODER_AVCONTEXT_TYPE_PNG,
		
	};


	/**
	 * Sensor type enumeration.
	 * */
	public enum class SensorType {
			All                 	=	-1,
			Accelerometer       	=	ENVIRONS_SENSOR_TYPE_ACCELEROMETER,
			Acceleration        	=	ENVIRONS_SENSOR_TYPE_ACCELERATION,
			MagneticField       	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD,
			MagneticFieldMotion 	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION,
			MagneticFieldUncalib	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB,
			Gyroscope           	=	ENVIRONS_SENSOR_TYPE_GYROSCOPE,
			GyroscopeUncalib    	=	ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB,
			Orientation         	=	ENVIRONS_SENSOR_TYPE_ORIENTATION,
			Light               	=	ENVIRONS_SENSOR_TYPE_LIGHT,
			Location            	=	ENVIRONS_SENSOR_TYPE_LOCATION,
			Heading             	=	ENVIRONS_SENSOR_TYPE_HEADING,
			Temperature         	=	ENVIRONS_SENSOR_TYPE_TEMPERATURE,
			MotionSignificant   	=	ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT,
			Pressure            	=	ENVIRONS_SENSOR_TYPE_PRESSURE,
			Attitude            	=	ENVIRONS_SENSOR_TYPE_ATTITUDE,
			Rotation            	=	ENVIRONS_SENSOR_TYPE_ROTATION,
			RotationGame        	=	ENVIRONS_SENSOR_TYPE_ROTATION_GAME,
			RotationGeomagnetic 	=	ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC,
			Gravity             	=	ENVIRONS_SENSOR_TYPE_GRAVITY,
			Stepper             	=	ENVIRONS_SENSOR_TYPE_STEPPER,
			Steps               	=	ENVIRONS_SENSOR_TYPE_STEPS,
			Tilt                	=	ENVIRONS_SENSOR_TYPE_TILT,
			Heartrate           	=	ENVIRONS_SENSOR_TYPE_HEARTRATE,
			Proximity           	=	ENVIRONS_SENSOR_TYPE_PROXIMITY,
			VOC                 	=	ENVIRONS_SENSOR_TYPE_VOC,
			CO2                 	=	ENVIRONS_SENSOR_TYPE_CO2,
			Humidity            	=	ENVIRONS_SENSOR_TYPE_HUMIDITY,
			Custom              	=	ENVIRONS_SENSOR_TYPE_CUSTOM,
			Max                 	=	ENVIRONS_SENSOR_TYPE_MAX,
		
	};


namespace Notify {

	/**
	 * Notify connection enumeration.
	 * */
	public ref class Connection abstract
	{
		public:
			literal int type                    	=	NOTIFY_TYPE_CONNECTION;
			literal int MainNew                 	=	NOTIFY_CONNECTION_MAIN_NEW;
			literal int MainAck                 	=	NOTIFY_CONNECTION_MAIN_ACK;
			literal int MainFailed              	=	NOTIFY_CONNECTION_MAIN_FAILED;
			literal int MainClosed              	=	NOTIFY_CONNECTION_MAIN_CLOSED;
			literal int ComDatNew               	=	NOTIFY_CONNECTION_COMDAT_NEW;
			literal int ComDatAck               	=	NOTIFY_CONNECTION_COMDAT_ACK;
			literal int ComDatFailed            	=	NOTIFY_CONNECTION_COMDAT_FAILED;
			literal int ComDatClosed            	=	NOTIFY_CONNECTION_COMDAT_CLOSED;
			literal int DataAck                 	=	NOTIFY_CONNECTION_DATA_ACK;
			literal int DataClosed              	=	NOTIFY_CONNECTION_DATA_CLOSED;
			literal int Progress                	=	NOTIFY_CONNECTION_PROGRESS;
			literal int Established             	=	NOTIFY_CONNECTION_ESTABLISHED;
			literal int EstablishedAck          	=	NOTIFY_CONNECTION_ESTABLISHED_ACK;
			literal int Closed                  	=	NOTIFY_CONNECTION_CLOSED;
	};

	public enum class Connectione {
			type                    	=	NOTIFY_TYPE_CONNECTION,
			MainNew                 	=	NOTIFY_CONNECTION_MAIN_NEW,
			MainAck                 	=	NOTIFY_CONNECTION_MAIN_ACK,
			MainFailed              	=	NOTIFY_CONNECTION_MAIN_FAILED,
			MainClosed              	=	NOTIFY_CONNECTION_MAIN_CLOSED,
			ComDatNew               	=	NOTIFY_CONNECTION_COMDAT_NEW,
			ComDatAck               	=	NOTIFY_CONNECTION_COMDAT_ACK,
			ComDatFailed            	=	NOTIFY_CONNECTION_COMDAT_FAILED,
			ComDatClosed            	=	NOTIFY_CONNECTION_COMDAT_CLOSED,
			DataAck                 	=	NOTIFY_CONNECTION_DATA_ACK,
			DataClosed              	=	NOTIFY_CONNECTION_DATA_CLOSED,
			Progress                	=	NOTIFY_CONNECTION_PROGRESS,
			Established             	=	NOTIFY_CONNECTION_ESTABLISHED,
			EstablishedAck          	=	NOTIFY_CONNECTION_ESTABLISHED_ACK,
			Closed                  	=	NOTIFY_CONNECTION_CLOSED,
	};

	typedef Connection	Connection_t;
	typedef Connectione	Connectione_t;


	/**
	 * Notify portal enumeration.
	 * */
	public ref class Portal abstract
	{
		public:
			literal int Disposed                	=	ENVIRONS_OBJECT_DISPOSED;
			literal int Zero                    	=	0;
			literal int type                    	=	NOTIFY_TYPE_PORTAL;
			literal int Established             	=	NOTIFY_PORTAL_ESTABLISHED;
			literal int EstablishedResolution   	=	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION;
			literal int Request                 	=	NOTIFY_PORTAL_REQUEST;
			literal int AskRequest              	=	NOTIFY_PORTAL_ASK_REQUEST;
			literal int StreamIncoming          	=	NOTIFY_PORTAL_STREAM_INCOMING;
			literal int ImagesIncoming          	=	NOTIFY_PORTAL_IMAGES_INCOMING;
			literal int IncomingEstablished     	=	NOTIFY_PORTAL_INCOMING_ESTABLISHED;
			literal int ProvideStreamAck        	=	NOTIFY_PORTAL_PROVIDE_STREAM_ACK;
			literal int ProvideImagesAck        	=	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK;
			literal int ProviderReady           	=	NOTIFY_PORTAL_PROVIDER_READY;
			literal int RequestFail             	=	NOTIFY_PORTAL_REQUEST_FAIL;
			literal int ProvideFail             	=	NOTIFY_PORTAL_PROVIDE_FAIL;
			literal int StreamStarted           	=	NOTIFY_PORTAL_STREAM_STARTED;
			literal int StreamPaused            	=	NOTIFY_PORTAL_STREAM_PAUSED;
			literal int StreamStopped           	=	NOTIFY_PORTAL_STREAM_STOPPED;
			literal int StreamReceiverStarted   	=	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED;
			literal int LocationChanged         	=	NOTIFY_PORTAL_LOCATION_CHANGED;
			literal int SizeChanged             	=	NOTIFY_PORTAL_SIZE_CHANGED;
			literal int ContactChanged          	=	NOTIFY_CONTACT_DIRECT_CHANGED;
	};

	public enum class Portale {
			Disposed                	=	ENVIRONS_OBJECT_DISPOSED,
			Zero                    	=	0,
			type                    	=	NOTIFY_TYPE_PORTAL,
			Established             	=	NOTIFY_PORTAL_ESTABLISHED,
			EstablishedResolution   	=	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION,
			Request                 	=	NOTIFY_PORTAL_REQUEST,
			AskRequest              	=	NOTIFY_PORTAL_ASK_REQUEST,
			StreamIncoming          	=	NOTIFY_PORTAL_STREAM_INCOMING,
			ImagesIncoming          	=	NOTIFY_PORTAL_IMAGES_INCOMING,
			IncomingEstablished     	=	NOTIFY_PORTAL_INCOMING_ESTABLISHED,
			ProvideStreamAck        	=	NOTIFY_PORTAL_PROVIDE_STREAM_ACK,
			ProvideImagesAck        	=	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK,
			ProviderReady           	=	NOTIFY_PORTAL_PROVIDER_READY,
			RequestFail             	=	NOTIFY_PORTAL_REQUEST_FAIL,
			ProvideFail             	=	NOTIFY_PORTAL_PROVIDE_FAIL,
			StreamStarted           	=	NOTIFY_PORTAL_STREAM_STARTED,
			StreamPaused            	=	NOTIFY_PORTAL_STREAM_PAUSED,
			StreamStopped           	=	NOTIFY_PORTAL_STREAM_STOPPED,
			StreamReceiverStarted   	=	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED,
			LocationChanged         	=	NOTIFY_PORTAL_LOCATION_CHANGED,
			SizeChanged             	=	NOTIFY_PORTAL_SIZE_CHANGED,
			ContactChanged          	=	NOTIFY_CONTACT_DIRECT_CHANGED,
	};

	typedef Portal	Portal_t;
	typedef Portale	Portale_t;


	/**
	 * Notify options enumeration.
	 * */
	public ref class Options abstract
	{
		public:
			literal int type                    	=	NOTIFY_TYPE_OPTIONS;
			literal int PortalLocationChanged   	=	NOTIFY_PORTAL_LOCATION_CHANGED;
			literal int PortalSizeChanged       	=	NOTIFY_PORTAL_SIZE_CHANGED;
			literal int DirectContactChanged    	=	NOTIFY_CONTACT_DIRECT_CHANGED;
	};

	public enum class Optionse {
			type                    	=	NOTIFY_TYPE_OPTIONS,
			PortalLocationChanged   	=	NOTIFY_PORTAL_LOCATION_CHANGED,
			PortalSizeChanged       	=	NOTIFY_PORTAL_SIZE_CHANGED,
			DirectContactChanged    	=	NOTIFY_CONTACT_DIRECT_CHANGED,
	};

	typedef Options	Options_t;
	typedef Optionse	Optionse_t;


	/**
	 * Notify file enumeration.
	 * */
	public ref class File abstract
	{
		public:
		/* TEst comment */
			literal int type                    	=	NOTIFY_TYPE_FILE;
			literal int FileProgress            	=	NOTIFY_TYPE_FILE_PROGRESS;
			literal int SendProgress            	=	NOTIFY_FILE_SEND_PROGRESS;
			literal int ReceiveProgress         	=	NOTIFY_FILE_RECEIVE_PROGRESS;
	};

	public enum class Filee {
		/* TEst comment */
			type                    	=	NOTIFY_TYPE_FILE,
			FileProgress            	=	NOTIFY_TYPE_FILE_PROGRESS,
			SendProgress            	=	NOTIFY_FILE_SEND_PROGRESS,
			ReceiveProgress         	=	NOTIFY_FILE_RECEIVE_PROGRESS,
	};

	typedef File	File_t;
	typedef Filee	Filee_t;


	/**
	 * Notify touchsource enumeration.
	 * */
	public ref class TouchSource abstract
	{
		public:
			literal int type                    	=	NOTIFY_TOUCHSOURCE;
			literal int Started                 	=	NOTIFY_TOUCHSOURCE_STARTED;
			literal int Stopped                 	=	NOTIFY_TOUCHSOURCE_STOPPED;
			literal int NotAvailable            	=	NOTIFY_TOUCHSOURCE_NOTAVAIL;
			literal int Failed                  	=	NOTIFY_TOUCHSOURCE_FAILED;
	};

	public enum class TouchSourcee {
			type                    	=	NOTIFY_TOUCHSOURCE,
			Started                 	=	NOTIFY_TOUCHSOURCE_STARTED,
			Stopped                 	=	NOTIFY_TOUCHSOURCE_STOPPED,
			NotAvailable            	=	NOTIFY_TOUCHSOURCE_NOTAVAIL,
			Failed                  	=	NOTIFY_TOUCHSOURCE_FAILED,
	};

	typedef TouchSource	TouchSource_t;
	typedef TouchSourcee	TouchSourcee_t;


	/**
	 * Notify environs enumeration.
	 * */
	public ref class Environs abstract
	{
		public:
			literal int type                    	=	NOTIFY_TYPE_ENVIRONS;
			literal int Start                   	=	NOTIFY_START;
			literal int StartInProgress         	=	NOTIFY_START_IN_PROGRESS;
			literal int StartEnablingWifi       	=	NOTIFY_START_ENABLING_WIFI;
			literal int StartStreamDecoder      	=	NOTIFY_START_STREAM_DECODER;
			literal int StartInit               	=	NOTIFY_START_INIT;

			literal int InitFailed              	=	NOTIFY_START_INIT_FAILED;
			literal int MethodFailed            	=	NOTIFY_START_METHOD_FAILED;
			literal int DecoderFailed           	=	NOTIFY_START_DECODER_FAILED;
			literal int WifiFailed              	=	NOTIFY_START_WIFI_FAILED;
			literal int StartFailed             	=	NOTIFY_START_FAILED;

			literal int StartInitSuccess        	=	NOTIFY_START_INIT_SUCCESS;
			literal int StartSuccess            	=	NOTIFY_START_SUCCESS;
			literal int StartListenSuccess      	=	NOTIFY_START_LISTEN_SUCCESS;
			literal int StartListenDataSuccess  	=	NOTIFY_START_LISTENDA_SUCCESS;

			literal int Stop                    	=	NOTIFY_STOP;
			literal int StopBegin               	=	NOTIFY_STOP_BEGIN;
			literal int StopInProgress          	=	NOTIFY_STOP_IN_PROGRESS;
			literal int StopFailed              	=	NOTIFY_STOP_FAILED;
			literal int StopSuccess             	=	NOTIFY_STOP_SUCCESS;
			literal int StopReleased            	=	NOTIFY_STOP_RELEASED;

			literal int Socket                  	=	NOTIFY_SOCKET;
			literal int SocketBindFailed        	=	NOTIFY_SOCKET_BIND_FAILED;
			literal int SocketListenFailed      	=	NOTIFY_SOCKET_LISTEN_FAILED;
			literal int SocketFailed            	=	NOTIFY_SOCKET_FAILED;

			literal int Settings                	=	NOTIFY_SETTINGS;
			literal int SettingsChanged         	=	NOTIFY_SETTINGS_CHANGED;

			literal int Pairing                 	=	NOTIFY_PAIRING;
			literal int DeviceOnSurface         	=	NOTIFY_DEVICE_ON_SURFACE;
			literal int DeviceNotOnSurface      	=	NOTIFY_DEVICE_NOT_ON_SURFACE;
			literal int DeviceFlagsUpdate       	=	NOTIFY_DEVICE_FLAGS_UPDATE;
	};

	public enum class Environse {
			type                    	=	NOTIFY_TYPE_ENVIRONS,
			Start                   	=	NOTIFY_START,
			StartInProgress         	=	NOTIFY_START_IN_PROGRESS,
			StartEnablingWifi       	=	NOTIFY_START_ENABLING_WIFI,
			StartStreamDecoder      	=	NOTIFY_START_STREAM_DECODER,
			StartInit               	=	NOTIFY_START_INIT,

			InitFailed              	=	NOTIFY_START_INIT_FAILED,
			MethodFailed            	=	NOTIFY_START_METHOD_FAILED,
			DecoderFailed           	=	NOTIFY_START_DECODER_FAILED,
			WifiFailed              	=	NOTIFY_START_WIFI_FAILED,
			StartFailed             	=	NOTIFY_START_FAILED,

			StartInitSuccess        	=	NOTIFY_START_INIT_SUCCESS,
			StartSuccess            	=	NOTIFY_START_SUCCESS,
			StartListenSuccess      	=	NOTIFY_START_LISTEN_SUCCESS,
			StartListenDataSuccess  	=	NOTIFY_START_LISTENDA_SUCCESS,

			Stop                    	=	NOTIFY_STOP,
			StopBegin               	=	NOTIFY_STOP_BEGIN,
			StopInProgress          	=	NOTIFY_STOP_IN_PROGRESS,
			StopFailed              	=	NOTIFY_STOP_FAILED,
			StopSuccess             	=	NOTIFY_STOP_SUCCESS,
			StopReleased            	=	NOTIFY_STOP_RELEASED,

			Socket                  	=	NOTIFY_SOCKET,
			SocketBindFailed        	=	NOTIFY_SOCKET_BIND_FAILED,
			SocketListenFailed      	=	NOTIFY_SOCKET_LISTEN_FAILED,
			SocketFailed            	=	NOTIFY_SOCKET_FAILED,

			Settings                	=	NOTIFY_SETTINGS,
			SettingsChanged         	=	NOTIFY_SETTINGS_CHANGED,

			Pairing                 	=	NOTIFY_PAIRING,
			DeviceOnSurface         	=	NOTIFY_DEVICE_ON_SURFACE,
			DeviceNotOnSurface      	=	NOTIFY_DEVICE_NOT_ON_SURFACE,
			DeviceFlagsUpdate       	=	NOTIFY_DEVICE_FLAGS_UPDATE,
	};

	typedef Environs	Environs_t;
	typedef Environse	Environse_t;


	/**
	 * Notify mediator enumeration.
	 * */
	public ref class Mediator abstract
	{
		public:
			literal int type                    	=	NOTIFY_MEDIATOR;
			literal int Server                  	=	NOTIFY_MEDIATOR_SERVER;
			literal int DeviceChanged           	=	NOTIFY_MEDIATOR_DEVICE_CHANGED;
			literal int DeviceAdded             	=	NOTIFY_MEDIATOR_DEVICE_ADDED;
			literal int DeviceRemoved           	=	NOTIFY_MEDIATOR_DEVICE_REMOVED;
			literal int ServerConnected         	=	NOTIFY_MEDIATOR_SERVER_CONNECTED;
			literal int ServerDisconnected      	=	NOTIFY_MEDIATOR_SERVER_DISCONNECTED;

			literal int DeviceListUpdateAvailable          	=	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE;
			literal int DeviceListChanged       	=	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED;

			literal int MediatorChanged         	=	NOTIFY_MEDIATOR_MED_CHANGED;

			literal int ServerDeviceChanged     	=	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED;
			literal int ServerDeviceAdded       	=	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED;
			literal int ServerDeviceRemoved     	=	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED;
			literal int ServerSTUNTRegisterRequest                    	=	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ;

			literal int ServerPasswordFail      	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL;
			literal int ServerPasswordMissing   	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING;
	};

	public enum class Mediatore {
			type                    	=	NOTIFY_MEDIATOR,
			Server                  	=	NOTIFY_MEDIATOR_SERVER,
			DeviceChanged           	=	NOTIFY_MEDIATOR_DEVICE_CHANGED,
			DeviceAdded             	=	NOTIFY_MEDIATOR_DEVICE_ADDED,
			DeviceRemoved           	=	NOTIFY_MEDIATOR_DEVICE_REMOVED,
			ServerConnected         	=	NOTIFY_MEDIATOR_SERVER_CONNECTED,
			ServerDisconnected      	=	NOTIFY_MEDIATOR_SERVER_DISCONNECTED,

			DeviceListUpdateAvailable          	=	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE,
			DeviceListChanged       	=	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED,

			MediatorChanged         	=	NOTIFY_MEDIATOR_MED_CHANGED,

			ServerDeviceChanged     	=	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED,
			ServerDeviceAdded       	=	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED,
			ServerDeviceRemoved     	=	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED,
			ServerSTUNTRegisterRequest                    	=	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ,

			ServerPasswordFail      	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL,
			ServerPasswordMissing   	=	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING,
	};

	typedef Mediator	Mediator_t;
	typedef Mediatore	Mediatore_t;


	/**
	 * Notify network enumeration.
	 * */
	public ref class Network abstract
	{
		public:
			literal int type                    	=	NOTIFY_NETWORK;
			literal int Changed                 	=	NOTIFY_NETWORK_CHANGED;
	};

	public enum class Networke {
			type                    	=	NOTIFY_NETWORK,
			Changed                 	=	NOTIFY_NETWORK_CHANGED,
	};

	typedef Network	Network_t;
	typedef Networke	Networke_t;


	/**
	 * Notify tracker enumeration.
	 * */
	public ref class Tracker abstract
	{
		public:
			literal int type                    	=	NOTIFY_TRACKER;
			literal int Failed                  	=	NOTIFY_TRACKER_FAILED_FLAG;

			literal int Enabled                 	=	NOTIFY_TRACKER_ENABLED;
			literal int Changed                 	=	NOTIFY_TRACKER_CHANGED;
			literal int Disabled                	=	NOTIFY_TRACKER_DISABLED;
			literal int EnableFailed            	=	NOTIFY_TRACKER_ENABLE_FAILED;

			literal int InitSensor              	=	NOTIFY_TRACKER_STATE_INIT_SENSOR;
			literal int InitSensorFailed        	=	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED;
			literal int Start                   	=	NOTIFY_TRACKER_STATE_START;
			literal int StartFailed             	=	NOTIFY_TRACKER_STATE_START_FAILED;
			literal int Stop                    	=	NOTIFY_TRACKER_STATE_STOP;
	};

	public enum class Trackere {
			type                    	=	NOTIFY_TRACKER,
			Failed                  	=	NOTIFY_TRACKER_FAILED_FLAG,

			Enabled                 	=	NOTIFY_TRACKER_ENABLED,
			Changed                 	=	NOTIFY_TRACKER_CHANGED,
			Disabled                	=	NOTIFY_TRACKER_DISABLED,
			EnableFailed            	=	NOTIFY_TRACKER_ENABLE_FAILED,

			InitSensor              	=	NOTIFY_TRACKER_STATE_INIT_SENSOR,
			InitSensorFailed        	=	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED,
			Start                   	=	NOTIFY_TRACKER_STATE_START,
			StartFailed             	=	NOTIFY_TRACKER_STATE_START_FAILED,
			Stop                    	=	NOTIFY_TRACKER_STATE_STOP,
	};

	typedef Tracker	Tracker_t;
	typedef Trackere	Trackere_t;


}



	public ref class Types 
	{

	public:

	/**
	 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
	 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
	 *
	 *
	 * TypesSource.java can be removed prior to build of the library. It just serves for auto-generation of the java/c/cpp/cli headers and type files.
	 * TypesSource.java can be removed prior to build of the library. It just serves for auto-generation of the java/c/cpp/cli headers and type files.
	 *
	 *
	 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
	 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
	 *
	 *
	 */
		/**
		 * Environs native layer status
		 * Environs native layer status
		 */
		/** Disposed. */

#		ifdef STATUS_DISPOSED                                   
#			undef STATUS_DISPOSED                                   
#		endif

		literal int STATUS_DISPOSED                                   =	(-1);
#		define	STATUS_DISPOSED                                   		(-1)
		/** Uninitialized. Usually after creation of an Environs object. */

#		ifdef STATUS_UNINITIALIZED                              
#			undef STATUS_UNINITIALIZED                              
#		endif

		literal int STATUS_UNINITIALIZED                              =	(0);
#		define	STATUS_UNINITIALIZED                              		(0)
		/** Environs is about to be disposed. */

#		ifdef STATUS_DISPOSING                                  
#			undef STATUS_DISPOSING                                  
#		endif

		literal int STATUS_DISPOSING                                  =	(1);
#		define	STATUS_DISPOSING                                  		(1)
		/** Environs is initializing. */

#		ifdef STATUS_INITIALIZING                               
#			undef STATUS_INITIALIZING                               
#		endif

		literal int STATUS_INITIALIZING                               =	(2);
#		define	STATUS_INITIALIZING                               		(2)
		/** Environs is initialized. Usually after a call to Environs.Init() */

#		ifdef STATUS_INITIALIZED                                
#			undef STATUS_INITIALIZED                                
#		endif

		literal int STATUS_INITIALIZED                                =	(3);
#		define	STATUS_INITIALIZED                                		(3)
		/** Environs is stopped. Usually after a call to Environs.Stop() */

#		ifdef STATUS_STOPPED                                    
#			undef STATUS_STOPPED                                    
#		endif

		literal int STATUS_STOPPED                                    =	(4);
#		define	STATUS_STOPPED                                    		(4)
		/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */

#		ifdef STATUS_STOP_IN_PROGRESS                           
#			undef STATUS_STOP_IN_PROGRESS                           
#		endif

		literal int STATUS_STOP_IN_PROGRESS                           =	(5);
#		define	STATUS_STOP_IN_PROGRESS                           		(5)
		/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */

#		ifdef STATUS_STOPPING                                   
#			undef STATUS_STOPPING                                   
#		endif

		literal int STATUS_STOPPING                                   =	(6);
#		define	STATUS_STOPPING                                   		(6)
		/** Environs is about to Start. Thread are being started and resources are being allocated. */

#		ifdef STATUS_STARTING                                   
#			undef STATUS_STARTING                                   
#		endif

		literal int STATUS_STARTING                                   =	(7);
#		define	STATUS_STARTING                                   		(7)
		/** Environs is started. Usually after a call to Environs.Start() */

#		ifdef STATUS_STARTED                                    
#			undef STATUS_STARTED                                    
#		endif

		literal int STATUS_STARTED                                    =	(8);
#		define	STATUS_STARTED                                    		(8)
		/** Environs is in connected state and connected to at least one device. */

#		ifdef STATUS_CONNECTED                                  
#			undef STATUS_CONNECTED                                  
#		endif

		literal int STATUS_CONNECTED                                  =	(9);
#		define	STATUS_CONNECTED                                  		(9)
		
		/** 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * */
		
		/**
		 * Max supported instances of Environs objects that each application can run at the same time.
		 * Max supported instances of Environs objects that each application can run at the same time.
		 * */

#		ifdef ENVIRONS_MAX_ENVIRONS_INSTANCES_MOBILE            
#			undef ENVIRONS_MAX_ENVIRONS_INSTANCES_MOBILE            
#		endif

		literal int ENVIRONS_MAX_ENVIRONS_INSTANCES_MOBILE            =	(5);
#		define	ENVIRONS_MAX_ENVIRONS_INSTANCES_MOBILE            		(5)

#		ifdef ENVIRONS_MAX_ENVIRONS_INSTANCES_FULL              
#			undef ENVIRONS_MAX_ENVIRONS_INSTANCES_FULL              
#		endif

		literal int ENVIRONS_MAX_ENVIRONS_INSTANCES_FULL              =	(10);
#		define	ENVIRONS_MAX_ENVIRONS_INSTANCES_FULL              		(10)
		
		/**
		 * A constant value that identifies an uninitialized display value.
		 * A constant value that identifies an uninitialized display value.
		 * */

#		ifdef ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              
#			undef ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              
#		endif

		literal int ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              =	(-1);
#		define	ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              		(-1)
		
		/**
		 * Environs thread states
		 * Environs thread states
		 */
		/** Uninitialized. Usually after creation of an Environs object. */

#		ifdef ENVIRONS_THREAD_NO_THREAD                         
#			undef ENVIRONS_THREAD_NO_THREAD                         
#		endif

		literal int ENVIRONS_THREAD_NO_THREAD                         =	(0);
#		define	ENVIRONS_THREAD_NO_THREAD                         		(0)
		/** Thread is either created and not yet running or terminated. */

#		ifdef ENVIRONS_THREAD_DETACHEABLE                       
#			undef ENVIRONS_THREAD_DETACHEABLE                       
#		endif

		literal int ENVIRONS_THREAD_DETACHEABLE                       =	(1);
#		define	ENVIRONS_THREAD_DETACHEABLE                       		(1)
		/** Thread is running. */

#		ifdef ENVIRONS_THREAD_RUNNING                           
#			undef ENVIRONS_THREAD_RUNNING                           
#		endif

		literal int ENVIRONS_THREAD_RUNNING                           =	(2);
#		define	ENVIRONS_THREAD_RUNNING                           		(2)
		
		
		/**
		 * Environs thread Status enumeration.
		 * Environs thread Status enumeration.
		 * */
		
		
		/** Deleteable. Device object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */

#		ifdef DEVICE_STATUS_DELETEABLE                          
#			undef DEVICE_STATUS_DELETEABLE                          
#		endif

		literal int DEVICE_STATUS_DELETEABLE                          =	(0);
#		define	DEVICE_STATUS_DELETEABLE                          		(0)
		/** Device object has just been created. */

#		ifdef DEVICE_STATUS_CREATED                             
#			undef DEVICE_STATUS_CREATED                             
#		endif

		literal int DEVICE_STATUS_CREATED                             =	(2);
#		define	DEVICE_STATUS_CREATED                             		(2)
		/** Connect in progress. Device object has been created and the connecting task is in progress. */

#		ifdef DEVICE_STATUS_CONNECT_IN_PROGRESS                 
#			undef DEVICE_STATUS_CONNECT_IN_PROGRESS                 
#		endif

		literal int DEVICE_STATUS_CONNECT_IN_PROGRESS                 =	(3);
#		define	DEVICE_STATUS_CONNECT_IN_PROGRESS                 		(3)
		/** Connected. Device object is connected to the destination device and active. */

#		ifdef DEVICE_STATUS_CONNECTED                           
#			undef DEVICE_STATUS_CONNECTED                           
#		endif

		literal int DEVICE_STATUS_CONNECTED                           =	(4);
#		define	DEVICE_STATUS_CONNECTED                           		(4)
		
		/** 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * */
			
		/* 
		 * Environs source values which determines the source of an event, data, or message.
		 * Environs source values which determines the source of an event, data, or message.
		 */
		/** Sent by native layer. */

#		ifdef SOURCE_NATIVE                                     
#			undef SOURCE_NATIVE                                     
#		endif

		literal int SOURCE_NATIVE                                     =	(0);
#		define	SOURCE_NATIVE                                     		(0)
		/** Sent by platform specific layer. */

#		ifdef SOURCE_PLATFORM                                   
#			undef SOURCE_PLATFORM                                   
#		endif

		literal int SOURCE_PLATFORM                                   =	(1);
#		define	SOURCE_PLATFORM                                   		(1)
		/** Sent by another device within the environment.  */

#		ifdef SOURCE_DEVICE                                     
#			undef SOURCE_DEVICE                                     
#		endif

		literal int SOURCE_DEVICE                                     =	(2);
#		define	SOURCE_DEVICE                                     		(2)
		/** Sent by the app layer. */

#		ifdef SOURCE_APPLICATION                                
#			undef SOURCE_APPLICATION                                
#		endif

		literal int SOURCE_APPLICATION                                =	(3);
#		define	SOURCE_APPLICATION                                		(3)
		
		/** 
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * */
		
		

#		ifdef ENVIRONS_OBJECT_DISPOSED                          
#			undef ENVIRONS_OBJECT_DISPOSED                          
#		endif

		literal int ENVIRONS_OBJECT_DISPOSED                          =	(-1);
#		define	ENVIRONS_OBJECT_DISPOSED                          		(-1)

#		ifdef ENVIRONS_OBJECT_DISPOSED_PLATFORM                 
#			undef ENVIRONS_OBJECT_DISPOSED_PLATFORM                 
#		endif

		literal int ENVIRONS_OBJECT_DISPOSED_PLATFORM                 =	(-2);
#		define	ENVIRONS_OBJECT_DISPOSED_PLATFORM                 		(-2)
		
		/*
		 * Native payload type class is determined by the upper byte of payload
		 * Native payload type class is determined by the upper byte of payload
		 */

#		ifdef MSG_NOTIFY_ID                                     
#			undef MSG_NOTIFY_ID                                     
#		endif

		literal int MSG_NOTIFY_ID                                     =	(0xFF00);
#		define	MSG_NOTIFY_ID                                     		(0xFF00)

#		ifdef MSG_NOTIFY_CLASS                                  
#			undef MSG_NOTIFY_CLASS                                  
#		endif

		literal int MSG_NOTIFY_CLASS                                  =	(0xFF0000);
#		define	MSG_NOTIFY_CLASS                                  		(0xFF0000)
			
		/*
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Type: unsigned short 0xFFFF
		 * Type: unsigned short 0xFFFF
		 */
		/** Class: Helo type */

#		ifdef MSG_TYPE_HELO                                     
#			undef MSG_TYPE_HELO                                     
#		endif

		literal int MSG_TYPE_HELO                                     =	(0);
#		define	MSG_TYPE_HELO                                     		(0)
		// Handshake states

#		ifdef MSG_HANDSHAKE                                     
#			undef MSG_HANDSHAKE                                     
#		endif

		literal int MSG_HANDSHAKE                                     =	(0x100);
#		define	MSG_HANDSHAKE                                     		(0x100)
			
		/** Main channel */
		// Former 'D'

#		ifdef MSG_HANDSHAKE_MAIN                                
#			undef MSG_HANDSHAKE_MAIN                                
#		endif

		literal int MSG_HANDSHAKE_MAIN                                =	(MSG_HANDSHAKE | 0x10);
#		define	MSG_HANDSHAKE_MAIN                                		(MSG_HANDSHAKE | 0x10)
		// Former 'D'

#		ifdef MSG_HANDSHAKE_MAIN_REQ                            
#			undef MSG_HANDSHAKE_MAIN_REQ                            
#		endif

		literal int MSG_HANDSHAKE_MAIN_REQ                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1);
#		define	MSG_HANDSHAKE_MAIN_REQ                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1)
		// Former 'D'

#		ifdef MSG_HANDSHAKE_MAIN_ACK                            
#			undef MSG_HANDSHAKE_MAIN_ACK                            
#		endif

		literal int MSG_HANDSHAKE_MAIN_ACK                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2);
#		define	MSG_HANDSHAKE_MAIN_ACK                            		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2)
		// Former 'D'

#		ifdef MSG_HANDSHAKE_MAIN_FAIL                           
#			undef MSG_HANDSHAKE_MAIN_FAIL                           
#		endif

		literal int MSG_HANDSHAKE_MAIN_FAIL                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3);
#		define	MSG_HANDSHAKE_MAIN_FAIL                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3)
		// Former 'D'

#		ifdef MSG_HANDSHAKE_MAIN_CLOSED                         
#			undef MSG_HANDSHAKE_MAIN_CLOSED                         
#		endif

		literal int MSG_HANDSHAKE_MAIN_CLOSED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4);
#		define	MSG_HANDSHAKE_MAIN_CLOSED                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4)
		

#		ifdef MSG_HANDSHAKE_COMDAT                              
#			undef MSG_HANDSHAKE_COMDAT                              
#		endif

		literal int MSG_HANDSHAKE_COMDAT                              =	(MSG_HANDSHAKE | 0x20);
#		define	MSG_HANDSHAKE_COMDAT                              		(MSG_HANDSHAKE | 0x20)

#		ifdef MSG_HANDSHAKE_COMDAT_REQ                          
#			undef MSG_HANDSHAKE_COMDAT_REQ                          
#		endif

		literal int MSG_HANDSHAKE_COMDAT_REQ                          =	(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 1);
#		define	MSG_HANDSHAKE_COMDAT_REQ                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 1)

#		ifdef MSG_HANDSHAKE_COMDAT_ACK                          
#			undef MSG_HANDSHAKE_COMDAT_ACK                          
#		endif

		literal int MSG_HANDSHAKE_COMDAT_ACK                          =	(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 2);
#		define	MSG_HANDSHAKE_COMDAT_ACK                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 2)

#		ifdef MSG_HANDSHAKE_COMDAT_FAILED                       
#			undef MSG_HANDSHAKE_COMDAT_FAILED                       
#		endif

		literal int MSG_HANDSHAKE_COMDAT_FAILED                       =	(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 3);
#		define	MSG_HANDSHAKE_COMDAT_FAILED                       		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 3)

#		ifdef MSG_HANDSHAKE_COMDAT_CLOSED                       
#			undef MSG_HANDSHAKE_COMDAT_CLOSED                       
#		endif

		literal int MSG_HANDSHAKE_COMDAT_CLOSED                       =	(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 4);
#		define	MSG_HANDSHAKE_COMDAT_CLOSED                       		(MSG_HANDSHAKE | MSG_HANDSHAKE_COMDAT | 4)
		

#		ifdef MSG_HANDSHAKE_PROC                                
#			undef MSG_HANDSHAKE_PROC                                
#		endif

		literal int MSG_HANDSHAKE_PROC                                =	(MSG_HANDSHAKE | 0x40);
#		define	MSG_HANDSHAKE_PROC                                		(MSG_HANDSHAKE | 0x40)
		// Former 'P'

#		ifdef MSG_HANDSHAKE_PORTS                               
#			undef MSG_HANDSHAKE_PORTS                               
#		endif

		literal int MSG_HANDSHAKE_PORTS                               =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1);
#		define	MSG_HANDSHAKE_PORTS                               		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1)

#		ifdef MSG_HANDSHAKE_PORTS_ACK                           
#			undef MSG_HANDSHAKE_PORTS_ACK                           
#		endif

		literal int MSG_HANDSHAKE_PORTS_ACK                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2);
#		define	MSG_HANDSHAKE_PORTS_ACK                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2)

#		ifdef MSG_HANDSHAKE_CONIG_REQ                           
#			undef MSG_HANDSHAKE_CONIG_REQ                           
#		endif

		literal int MSG_HANDSHAKE_CONIG_REQ                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3);
#		define	MSG_HANDSHAKE_CONIG_REQ                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3)

#		ifdef MSG_HANDSHAKE_CONIG_RESP                          
#			undef MSG_HANDSHAKE_CONIG_RESP                          
#		endif

		literal int MSG_HANDSHAKE_CONIG_RESP                          =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4);
#		define	MSG_HANDSHAKE_CONIG_RESP                          		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4)

#		ifdef MSG_HANDSHAKE_CONIG_RESP_ACK                      
#			undef MSG_HANDSHAKE_CONIG_RESP_ACK                      
#		endif

		literal int MSG_HANDSHAKE_CONIG_RESP_ACK                      =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5);
#		define	MSG_HANDSHAKE_CONIG_RESP_ACK                      		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5)

#		ifdef MSG_HANDSHAKE_CONNECTED                           
#			undef MSG_HANDSHAKE_CONNECTED                           
#		endif

		literal int MSG_HANDSHAKE_CONNECTED                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA);
#		define	MSG_HANDSHAKE_CONNECTED                           		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA)

#		ifdef MSG_HANDSHAKE_DISCONNECTED                        
#			undef MSG_HANDSHAKE_DISCONNECTED                        
#		endif

		literal int MSG_HANDSHAKE_DISCONNECTED                        =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB);
#		define	MSG_HANDSHAKE_DISCONNECTED                        		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB)

#		ifdef MSG_HANDSHAKE_PING                                
#			undef MSG_HANDSHAKE_PING                                
#		endif

		literal int MSG_HANDSHAKE_PING                                =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xC);
#		define	MSG_HANDSHAKE_PING                                		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xC)
			
		

#		ifdef MSG_HANDSHAKE_UDP                                 
#			undef MSG_HANDSHAKE_UDP                                 
#		endif

		literal int MSG_HANDSHAKE_UDP                                 =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6);
#		define	MSG_HANDSHAKE_UDP                                 		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6)

#		ifdef MSG_HANDSHAKE_UDP_ACK                             
#			undef MSG_HANDSHAKE_UDP_ACK                             
#		endif

		literal int MSG_HANDSHAKE_UDP_ACK                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7);
#		define	MSG_HANDSHAKE_UDP_ACK                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7)
			

#		ifdef MSG_HANDSHAKE_SUCCESS                             
#			undef MSG_HANDSHAKE_SUCCESS                             
#		endif

		literal int MSG_HANDSHAKE_SUCCESS                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE);
#		define	MSG_HANDSHAKE_SUCCESS                             		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE)

#		ifdef MSG_HANDSHAKE_SUCCESS_ACK                         
#			undef MSG_HANDSHAKE_SUCCESS_ACK                         
#		endif

		literal int MSG_HANDSHAKE_SUCCESS_ACK                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF);
#		define	MSG_HANDSHAKE_SUCCESS_ACK                         		(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF)
			

#		ifdef MSG_HANDSHAKE_SHORT_MESSAGE                       
#			undef MSG_HANDSHAKE_SHORT_MESSAGE                       
#		endif

		literal int MSG_HANDSHAKE_SHORT_MESSAGE                       =	(MSG_HANDSHAKE | 0x81);
#		define	MSG_HANDSHAKE_SHORT_MESSAGE                       		(MSG_HANDSHAKE | 0x81)

#		ifdef MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   
#			undef MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   
#		endif

		literal int MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   =	(MSG_HANDSHAKE | 0x82);
#		define	MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   		(MSG_HANDSHAKE | 0x82)
		

#		ifdef NOTIFY_TYPE_CONNECTION                            
#			undef NOTIFY_TYPE_CONNECTION                            
#		endif

		literal int NOTIFY_TYPE_CONNECTION                            =	((MSG_TYPE_HELO << 16));
#		define	NOTIFY_TYPE_CONNECTION                            		((MSG_TYPE_HELO << 16))

#		ifdef NOTIFY_CONNECTION_MAIN_NEW                        
#			undef NOTIFY_CONNECTION_MAIN_NEW                        
#		endif

		literal int NOTIFY_CONNECTION_MAIN_NEW                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ);
#		define	NOTIFY_CONNECTION_MAIN_NEW                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ)

#		ifdef NOTIFY_CONNECTION_MAIN_ACK                        
#			undef NOTIFY_CONNECTION_MAIN_ACK                        
#		endif

		literal int NOTIFY_CONNECTION_MAIN_ACK                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK);
#		define	NOTIFY_CONNECTION_MAIN_ACK                        		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK)

#		ifdef NOTIFY_CONNECTION_MAIN_FAILED                     
#			undef NOTIFY_CONNECTION_MAIN_FAILED                     
#		endif

		literal int NOTIFY_CONNECTION_MAIN_FAILED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL);
#		define	NOTIFY_CONNECTION_MAIN_FAILED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL)

#		ifdef NOTIFY_CONNECTION_MAIN_CLOSED                     
#			undef NOTIFY_CONNECTION_MAIN_CLOSED                     
#		endif

		literal int NOTIFY_CONNECTION_MAIN_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED);
#		define	NOTIFY_CONNECTION_MAIN_CLOSED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED)

#		ifdef NOTIFY_CONNECTION_COMDAT_NEW                      
#			undef NOTIFY_CONNECTION_COMDAT_NEW                      
#		endif

		literal int NOTIFY_CONNECTION_COMDAT_NEW                      =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_REQ);
#		define	NOTIFY_CONNECTION_COMDAT_NEW                      		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_REQ)

#		ifdef NOTIFY_CONNECTION_COMDAT_ACK                      
#			undef NOTIFY_CONNECTION_COMDAT_ACK                      
#		endif

		literal int NOTIFY_CONNECTION_COMDAT_ACK                      =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_ACK);
#		define	NOTIFY_CONNECTION_COMDAT_ACK                      		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_ACK)

#		ifdef NOTIFY_CONNECTION_COMDAT_FAILED                   
#			undef NOTIFY_CONNECTION_COMDAT_FAILED                   
#		endif

		literal int NOTIFY_CONNECTION_COMDAT_FAILED                   =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_FAILED);
#		define	NOTIFY_CONNECTION_COMDAT_FAILED                   		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_FAILED)

#		ifdef NOTIFY_CONNECTION_COMDAT_CLOSED                   
#			undef NOTIFY_CONNECTION_COMDAT_CLOSED                   
#		endif

		literal int NOTIFY_CONNECTION_COMDAT_CLOSED                   =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_CLOSED);
#		define	NOTIFY_CONNECTION_COMDAT_CLOSED                   		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_COMDAT_CLOSED)

#		ifdef NOTIFY_CONNECTION_DATA_ACK                        
#			undef NOTIFY_CONNECTION_DATA_ACK                        
#		endif

		literal int NOTIFY_CONNECTION_DATA_ACK                        =	(NOTIFY_TYPE_CONNECTION | 0xA);
#		define	NOTIFY_CONNECTION_DATA_ACK                        		(NOTIFY_TYPE_CONNECTION | 0xA)

#		ifdef NOTIFY_CONNECTION_DATA_CLOSED                     
#			undef NOTIFY_CONNECTION_DATA_CLOSED                     
#		endif

		literal int NOTIFY_CONNECTION_DATA_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | 0xC);
#		define	NOTIFY_CONNECTION_DATA_CLOSED                     		(NOTIFY_TYPE_CONNECTION | 0xC)
		

#		ifdef NOTIFY_CONNECTION_PROGRESS                        
#			undef NOTIFY_CONNECTION_PROGRESS                        
#		endif

		literal int NOTIFY_CONNECTION_PROGRESS                        =	(NOTIFY_TYPE_CONNECTION | 0xD);
#		define	NOTIFY_CONNECTION_PROGRESS                        		(NOTIFY_TYPE_CONNECTION | 0xD)
			

#		ifdef NOTIFY_CONNECTION_ESTABLISHED                     
#			undef NOTIFY_CONNECTION_ESTABLISHED                     
#		endif

		literal int NOTIFY_CONNECTION_ESTABLISHED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS);
#		define	NOTIFY_CONNECTION_ESTABLISHED                     		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS)

#		ifdef NOTIFY_CONNECTION_ESTABLISHED_ACK                 
#			undef NOTIFY_CONNECTION_ESTABLISHED_ACK                 
#		endif

		literal int NOTIFY_CONNECTION_ESTABLISHED_ACK                 =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK);
#		define	NOTIFY_CONNECTION_ESTABLISHED_ACK                 		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK)

#		ifdef NOTIFY_CONNECTION_CLOSED                          
#			undef NOTIFY_CONNECTION_CLOSED                          
#		endif

		literal int NOTIFY_CONNECTION_CLOSED                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED);
#		define	NOTIFY_CONNECTION_CLOSED                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED)
			

#		ifdef NOTIFY_SHORT_MESSAGE                              
#			undef NOTIFY_SHORT_MESSAGE                              
#		endif

		literal int NOTIFY_SHORT_MESSAGE                              =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE);
#		define	NOTIFY_SHORT_MESSAGE                              		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE)

#		ifdef NOTIFY_SHORT_MESSAGE_ACK                          
#			undef NOTIFY_SHORT_MESSAGE_ACK                          
#		endif

		literal int NOTIFY_SHORT_MESSAGE_ACK                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK);
#		define	NOTIFY_SHORT_MESSAGE_ACK                          		(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK)
		
		/**
		 * Notify connection enumeration.
		 * Notify connection enumeration.
		 * */
		
			
		// Stream types

#		ifdef DATA_STREAM                                       
#			undef DATA_STREAM                                       
#		endif

		literal int DATA_STREAM                                       =	(0x200);
#		define	DATA_STREAM                                       		(0x200)

#		ifdef DATA_STREAM_INIT                                  
#			undef DATA_STREAM_INIT                                  
#		endif

		literal int DATA_STREAM_INIT                                  =	(1);
#		define	DATA_STREAM_INIT                                  		(1)
		

#		ifdef DATA_STREAM_IFRAME                                
#			undef DATA_STREAM_IFRAME                                
#		endif

		literal int DATA_STREAM_IFRAME                                =	(0x400);
#		define	DATA_STREAM_IFRAME                                		(0x400)
		
		/** Class: Image type */

#		ifdef MSG_TYPE_IMAGE                                    
#			undef MSG_TYPE_IMAGE                                    
#		endif

		literal int MSG_TYPE_IMAGE                                    =	(1);
#		define	MSG_TYPE_IMAGE                                    		(1)
		// 0x10

#		ifdef DATA_STREAM_IMAGE                                 
#			undef DATA_STREAM_IMAGE                                 
#		endif

		literal int DATA_STREAM_IMAGE                                 =	(MSG_TYPE_IMAGE << 4);
#		define	DATA_STREAM_IMAGE                                 		(MSG_TYPE_IMAGE << 4)

#		ifdef DATA_STREAM_IMAGE_INIT                            
#			undef DATA_STREAM_IMAGE_INIT                            
#		endif

		literal int DATA_STREAM_IMAGE_INIT                            =	(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT);
#		define	DATA_STREAM_IMAGE_INIT                            		(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT)

#		ifdef DATA_STREAM_IMAGE_DATA                            
#			undef DATA_STREAM_IMAGE_DATA                            
#		endif

		literal int DATA_STREAM_IMAGE_DATA                            =	(DATA_STREAM | DATA_STREAM_IMAGE | 8);
#		define	DATA_STREAM_IMAGE_DATA                            		(DATA_STREAM | DATA_STREAM_IMAGE | 8)

#		ifdef DATA_STREAM_IMAGE_JPEG                            
#			undef DATA_STREAM_IMAGE_JPEG                            
#		endif

		literal int DATA_STREAM_IMAGE_JPEG                            =	(DATA_STREAM_IMAGE_DATA | 2);
#		define	DATA_STREAM_IMAGE_JPEG                            		(DATA_STREAM_IMAGE_DATA | 2)

#		ifdef DATA_STREAM_IMAGE_PNG                             
#			undef DATA_STREAM_IMAGE_PNG                             
#		endif

		literal int DATA_STREAM_IMAGE_PNG                             =	(DATA_STREAM_IMAGE_DATA | 4);
#		define	DATA_STREAM_IMAGE_PNG                             		(DATA_STREAM_IMAGE_DATA | 4)
		
		/** Class: Video type */

#		ifdef MSG_TYPE_STREAM                                   
#			undef MSG_TYPE_STREAM                                   
#		endif

		literal int MSG_TYPE_STREAM                                   =	(2);
#		define	MSG_TYPE_STREAM                                   		(2)
		// 0x20

#		ifdef DATA_STREAM_VIDEO                                 
#			undef DATA_STREAM_VIDEO                                 
#		endif

		literal int DATA_STREAM_VIDEO                                 =	(MSG_TYPE_STREAM << 4);
#		define	DATA_STREAM_VIDEO                                 		(MSG_TYPE_STREAM << 4)
		// Initialization protocol version 1 packet with width and height

#		ifdef DATA_STREAM_VIDEO_INIT                            
#			undef DATA_STREAM_VIDEO_INIT                            
#		endif

		literal int DATA_STREAM_VIDEO_INIT                            =	(DATA_STREAM | DATA_STREAM_VIDEO | DATA_STREAM_INIT);
#		define	DATA_STREAM_VIDEO_INIT                            		(DATA_STREAM | DATA_STREAM_VIDEO | DATA_STREAM_INIT)
		// Header packets

#		ifdef DATA_STREAM_VIDEO_HDR                             
#			undef DATA_STREAM_VIDEO_HDR                             
#		endif

		literal int DATA_STREAM_VIDEO_HDR                             =	(DATA_STREAM | DATA_STREAM_VIDEO | 2);
#		define	DATA_STREAM_VIDEO_HDR                             		(DATA_STREAM | DATA_STREAM_VIDEO | 2)

#		ifdef DATA_STREAM_H265_NALUS                            
#			undef DATA_STREAM_H265_NALUS                            
#		endif

		literal int DATA_STREAM_H265_NALUS                            =	(DATA_STREAM | DATA_STREAM_VIDEO | 4);
#		define	DATA_STREAM_H265_NALUS                            		(DATA_STREAM | DATA_STREAM_VIDEO | 4)

#		ifdef DATA_STREAM_H264_NALUS                            
#			undef DATA_STREAM_H264_NALUS                            
#		endif

		literal int DATA_STREAM_H264_NALUS                            =	(DATA_STREAM | DATA_STREAM_VIDEO | 8);
#		define	DATA_STREAM_H264_NALUS                            		(DATA_STREAM | DATA_STREAM_VIDEO | 8)
		
		/*
		public static final int DATA_STREAM_H264_NAL 			= DATA_STREAM | DATA_STREAM_VIDEO | 4;
		public static final int DATA_STREAM_H264_NAL 			= DATA_STREAM | DATA_STREAM_VIDEO | 4;
		 */
		
		
		/** Class: Portal constants */

#		ifdef MAX_PORTAL_STREAMS_A_DEVICE                       
#			undef MAX_PORTAL_STREAMS_A_DEVICE                       
#		endif

		literal int MAX_PORTAL_STREAMS_A_DEVICE                       =	(6);
#		define	MAX_PORTAL_STREAMS_A_DEVICE                       		(6)

#		ifdef MAX_PORTAL_CONTEXT_WORKERS                        
#			undef MAX_PORTAL_CONTEXT_WORKERS                        
#		endif

		literal int MAX_PORTAL_CONTEXT_WORKERS                        =	(2);
#		define	MAX_PORTAL_CONTEXT_WORKERS                        		(2)

#		ifdef MAX_PORTAL_OVERLAYS                               
#			undef MAX_PORTAL_OVERLAYS                               
#		endif

		literal int MAX_PORTAL_OVERLAYS                               =	(6);
#		define	MAX_PORTAL_OVERLAYS                               		(6)

#		ifdef MAX_PORTAL_GENERATOR_SLOTS                        
#			undef MAX_PORTAL_GENERATOR_SLOTS                        
#		endif

		literal int MAX_PORTAL_GENERATOR_SLOTS                        =	(5);
#		define	MAX_PORTAL_GENERATOR_SLOTS                        		(5)

#		ifdef MAX_PORTAL_REQUEST_WAIT_TIME_MS                   
#			undef MAX_PORTAL_REQUEST_WAIT_TIME_MS                   
#		endif

		literal int MAX_PORTAL_REQUEST_WAIT_TIME_MS                   =	(30000);
#		define	MAX_PORTAL_REQUEST_WAIT_TIME_MS                   		(30000)
		
		
		/**
		 * A portal ID is masked as follows:
		 * A portal ID is masked as follows:
		 * 0xFFFFFFFF
		 * 0xFFFFFFFF
		 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
		 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
		 * 0x0000F000 portal type
		 * 0x0000F000 portal type
		 * 0x00000300 direction
		 * 0x00000300 direction
		 * 0x000000FF portal id (the same between both devices)
		 * 0x000000FF portal id (the same between both devices)
		 */
		
		/** Class: Portal type */

#		ifdef PORTAL_TYPE_ANY                                   
#			undef PORTAL_TYPE_ANY                                   
#		endif

		literal int PORTAL_TYPE_ANY                                   =	(0);
#		define	PORTAL_TYPE_ANY                                   		(0)

#		ifdef PORTAL_TYPE_SCREEN                                
#			undef PORTAL_TYPE_SCREEN                                
#		endif

		literal int PORTAL_TYPE_SCREEN                                =	(0x1000);
#		define	PORTAL_TYPE_SCREEN                                		(0x1000)

#		ifdef PORTAL_TYPE_BACK_CAM                              
#			undef PORTAL_TYPE_BACK_CAM                              
#		endif

		literal int PORTAL_TYPE_BACK_CAM                              =	(0x2000);
#		define	PORTAL_TYPE_BACK_CAM                              		(0x2000)

#		ifdef PORTAL_TYPE_FRONT_CAM                             
#			undef PORTAL_TYPE_FRONT_CAM                             
#		endif

		literal int PORTAL_TYPE_FRONT_CAM                             =	(0x4000);
#		define	PORTAL_TYPE_FRONT_CAM                             		(0x4000)

#		ifdef PORTAL_TYPE_MASK                                  
#			undef PORTAL_TYPE_MASK                                  
#		endif

		literal int PORTAL_TYPE_MASK                                  =	(0xF000);
#		define	PORTAL_TYPE_MASK                                  		(0xF000)
			
		/** 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * */
		
		/** Class: Portal status */

#		ifdef PORTAL_STATUS_DISPOSED                            
#			undef PORTAL_STATUS_DISPOSED                            
#		endif

		literal int PORTAL_STATUS_DISPOSED                            =	(ENVIRONS_OBJECT_DISPOSED);
#		define	PORTAL_STATUS_DISPOSED                            		(ENVIRONS_OBJECT_DISPOSED)

#		ifdef PORTAL_STATUS_CREATED                             
#			undef PORTAL_STATUS_CREATED                             
#		endif

		literal int PORTAL_STATUS_CREATED                             =	(0);
#		define	PORTAL_STATUS_CREATED                             		(0)

#		ifdef PORTAL_STATUS_CREATED_FROM_REQUEST                
#			undef PORTAL_STATUS_CREATED_FROM_REQUEST                
#		endif

		literal int PORTAL_STATUS_CREATED_FROM_REQUEST                =	(1);
#		define	PORTAL_STATUS_CREATED_FROM_REQUEST                		(1)

#		ifdef PORTAL_STATUS_CREATED_ASK_REQUEST                 
#			undef PORTAL_STATUS_CREATED_ASK_REQUEST                 
#		endif

		literal int PORTAL_STATUS_CREATED_ASK_REQUEST                 =	(2);
#		define	PORTAL_STATUS_CREATED_ASK_REQUEST                 		(2)

#		ifdef PORTAL_STATUS_ESTABLISHED                         
#			undef PORTAL_STATUS_ESTABLISHED                         
#		endif

		literal int PORTAL_STATUS_ESTABLISHED                         =	(4);
#		define	PORTAL_STATUS_ESTABLISHED                         		(4)

#		ifdef PORTAL_STATUS_STARTED                             
#			undef PORTAL_STATUS_STARTED                             
#		endif

		literal int PORTAL_STATUS_STARTED                             =	(6);
#		define	PORTAL_STATUS_STARTED                             		(6)
		
		/**
		 * Portal status enumeration.
		 * Portal status enumeration.
		 * */
		
		
		/**
		 * Portal Source Status enumeration.
		 * Portal Source Status enumeration.
		 * */
		
		
		/** Class: Portal stream type */

#		ifdef STREAMTYPE_UNKNOWN                                
#			undef STREAMTYPE_UNKNOWN                                
#		endif

		literal int STREAMTYPE_UNKNOWN                                =	(0);
#		define	STREAMTYPE_UNKNOWN                                		(0)

#		ifdef STREAMTYPE_IMAGES                                 
#			undef STREAMTYPE_IMAGES                                 
#		endif

		literal int STREAMTYPE_IMAGES                                 =	(0x10);
#		define	STREAMTYPE_IMAGES                                 		(0x10)

#		ifdef STREAMTYPE_IMAGES_JPEG                            
#			undef STREAMTYPE_IMAGES_JPEG                            
#		endif

		literal int STREAMTYPE_IMAGES_JPEG                            =	(STREAMTYPE_IMAGES | 0x1);
#		define	STREAMTYPE_IMAGES_JPEG                            		(STREAMTYPE_IMAGES | 0x1)

#		ifdef STREAMTYPE_IMAGES_PNG                             
#			undef STREAMTYPE_IMAGES_PNG                             
#		endif

		literal int STREAMTYPE_IMAGES_PNG                             =	(STREAMTYPE_IMAGES | 0x2);
#		define	STREAMTYPE_IMAGES_PNG                             		(STREAMTYPE_IMAGES | 0x2)

#		ifdef STREAMTYPE_VIDEO                                  
#			undef STREAMTYPE_VIDEO                                  
#		endif

		literal int STREAMTYPE_VIDEO                                  =	(0x20);
#		define	STREAMTYPE_VIDEO                                  		(0x20)

#		ifdef STREAMTYPE_VIDEO_H264                             
#			undef STREAMTYPE_VIDEO_H264                             
#		endif

		literal int STREAMTYPE_VIDEO_H264                             =	(STREAMTYPE_VIDEO | 0x1);
#		define	STREAMTYPE_VIDEO_H264                             		(STREAMTYPE_VIDEO | 0x1)
			
		/** 
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * */
		
		/** Class: PortalInfo flag bits */

#		ifdef PORTAL_INFO_FLAG_LOCATION                         
#			undef PORTAL_INFO_FLAG_LOCATION                         
#		endif

		literal int PORTAL_INFO_FLAG_LOCATION                         =	(0x1);
#		define	PORTAL_INFO_FLAG_LOCATION                         		(0x1)

#		ifdef PORTAL_INFO_FLAG_ANGLE                            
#			undef PORTAL_INFO_FLAG_ANGLE                            
#		endif

		literal int PORTAL_INFO_FLAG_ANGLE                            =	(0x2);
#		define	PORTAL_INFO_FLAG_ANGLE                            		(0x2)

#		ifdef PORTAL_INFO_FLAG_SIZE                             
#			undef PORTAL_INFO_FLAG_SIZE                             
#		endif

		literal int PORTAL_INFO_FLAG_SIZE                             =	(0x4);
#		define	PORTAL_INFO_FLAG_SIZE                             		(0x4)
		
		
		/** Class: Portal messages and notifications */

#		ifdef MSG_TYPE_PORTAL                                   
#			undef MSG_TYPE_PORTAL                                   
#		endif

		literal int MSG_TYPE_PORTAL                                   =	(5);
#		define	MSG_TYPE_PORTAL                                   		(5)

#		ifdef MSG_PORTAL_ERROR                                  
#			undef MSG_PORTAL_ERROR                                  
#		endif

		literal int MSG_PORTAL_ERROR                                  =	(0x400);
#		define	MSG_PORTAL_ERROR                                  		(0x400)

#		ifdef PORTAL_DIR_INCOMING                               
#			undef PORTAL_DIR_INCOMING                               
#		endif

		literal int PORTAL_DIR_INCOMING                               =	(0x200);
#		define	PORTAL_DIR_INCOMING                               		(0x200)

#		ifdef PORTAL_DIR_OUTGOING                               
#			undef PORTAL_DIR_OUTGOING                               
#		endif

		literal int PORTAL_DIR_OUTGOING                               =	(0x100);
#		define	PORTAL_DIR_OUTGOING                               		(0x100)

#		ifdef PORTAL_DIR_MASK                                   
#			undef PORTAL_DIR_MASK                                   
#		endif

		literal int PORTAL_DIR_MASK                                   =	(0x300);
#		define	PORTAL_DIR_MASK                                   		(0x300)

#		ifdef NOTIFY_PORTAL                                     
#			undef NOTIFY_PORTAL                                     
#		endif

		literal int NOTIFY_PORTAL                                     =	(0x800);
#		define	NOTIFY_PORTAL                                     		(0x800)
		
		

#		ifdef NOTIFY_PORTAL_INSTANCE                            
#			undef NOTIFY_PORTAL_INSTANCE                            
#		endif

		literal int NOTIFY_PORTAL_INSTANCE                            =	(0x100800);
#		define	NOTIFY_PORTAL_INSTANCE                            		(0x100800)

#		ifdef PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              
#			undef PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              
#		endif

		literal int PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              =	(NOTIFY_PORTAL_INSTANCE | 0x1);
#		define	PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              		(NOTIFY_PORTAL_INSTANCE | 0x1)
		
	// Portal message subtypes

#		ifdef MSG_PORTAL_REQUEST_ID                             
#			undef MSG_PORTAL_REQUEST_ID                             
#		endif

		literal int MSG_PORTAL_REQUEST_ID                             =	(0);
#		define	MSG_PORTAL_REQUEST_ID                             		(0)

#		ifdef MSG_PORTAL_REQUEST                                
#			undef MSG_PORTAL_REQUEST                                
#		endif

		literal int MSG_PORTAL_REQUEST                                =	(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID);
#		define	MSG_PORTAL_REQUEST                                		(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID)

#		ifdef MSG_PORTAL_ASK_FOR_REQUEST_ID                     
#			undef MSG_PORTAL_ASK_FOR_REQUEST_ID                     
#		endif

		literal int MSG_PORTAL_ASK_FOR_REQUEST_ID                     =	(1);
#		define	MSG_PORTAL_ASK_FOR_REQUEST_ID                     		(1)

#		ifdef MSG_PORTAL_ASK_FOR_REQUEST                        
#			undef MSG_PORTAL_ASK_FOR_REQUEST                        
#		endif

		literal int MSG_PORTAL_ASK_FOR_REQUEST                        =	(NOTIFY_PORTAL 	| MSG_PORTAL_ASK_FOR_REQUEST_ID);
#		define	MSG_PORTAL_ASK_FOR_REQUEST                        		(NOTIFY_PORTAL 	| MSG_PORTAL_ASK_FOR_REQUEST_ID)

#		ifdef MSG_PORTAL_PROVIDE_STREAM_ID                      
#			undef MSG_PORTAL_PROVIDE_STREAM_ID                      
#		endif

		literal int MSG_PORTAL_PROVIDE_STREAM_ID                      =	(2);
#		define	MSG_PORTAL_PROVIDE_STREAM_ID                      		(2)

#		ifdef MSG_PORTAL_PROVIDE_STREAM                         
#			undef MSG_PORTAL_PROVIDE_STREAM                         
#		endif

		literal int MSG_PORTAL_PROVIDE_STREAM                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID);
#		define	MSG_PORTAL_PROVIDE_STREAM                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID)

#		ifdef MSG_PORTAL_PROVIDE_IMAGES_ID                      
#			undef MSG_PORTAL_PROVIDE_IMAGES_ID                      
#		endif

		literal int MSG_PORTAL_PROVIDE_IMAGES_ID                      =	(3);
#		define	MSG_PORTAL_PROVIDE_IMAGES_ID                      		(3)

#		ifdef MSG_PORTAL_PROVIDE_IMAGES                         
#			undef MSG_PORTAL_PROVIDE_IMAGES                         
#		endif

		literal int MSG_PORTAL_PROVIDE_IMAGES                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID);
#		define	MSG_PORTAL_PROVIDE_IMAGES                         		(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID)

#		ifdef MSG_PORTAL_REQUEST_FAIL_ID                        
#			undef MSG_PORTAL_REQUEST_FAIL_ID                        
#		endif

		literal int MSG_PORTAL_REQUEST_FAIL_ID                        =	(4);
#		define	MSG_PORTAL_REQUEST_FAIL_ID                        		(4)

#		ifdef MSG_PORTAL_REQUEST_FAIL                           
#			undef MSG_PORTAL_REQUEST_FAIL                           
#		endif

		literal int MSG_PORTAL_REQUEST_FAIL                           =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID);
#		define	MSG_PORTAL_REQUEST_FAIL                           		(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID)
			

#		ifdef MSG_PORTAL_STOP_ID                                
#			undef MSG_PORTAL_STOP_ID                                
#		endif

		literal int MSG_PORTAL_STOP_ID                                =	(5);
#		define	MSG_PORTAL_STOP_ID                                		(5)

#		ifdef MSG_PORTAL_STOP                                   
#			undef MSG_PORTAL_STOP                                   
#		endif

		literal int MSG_PORTAL_STOP                                   =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID);
#		define	MSG_PORTAL_STOP                                   		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID)

#		ifdef MSG_PORTAL_STOP_ACK_ID                            
#			undef MSG_PORTAL_STOP_ACK_ID                            
#		endif

		literal int MSG_PORTAL_STOP_ACK_ID                            =	(6);
#		define	MSG_PORTAL_STOP_ACK_ID                            		(6)

#		ifdef MSG_PORTAL_STOP_ACK                               
#			undef MSG_PORTAL_STOP_ACK                               
#		endif

		literal int MSG_PORTAL_STOP_ACK                               =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID);
#		define	MSG_PORTAL_STOP_ACK                               		(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID)

#		ifdef MSG_PORTAL_STOP_FAIL_ID                           
#			undef MSG_PORTAL_STOP_FAIL_ID                           
#		endif

		literal int MSG_PORTAL_STOP_FAIL_ID                           =	(7);
#		define	MSG_PORTAL_STOP_FAIL_ID                           		(7)

#		ifdef MSG_PORTAL_STOP_FAIL                              
#			undef MSG_PORTAL_STOP_FAIL                              
#		endif

		literal int MSG_PORTAL_STOP_FAIL                              =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID);
#		define	MSG_PORTAL_STOP_FAIL                              		(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID)

#		ifdef MSG_PORTAL_START_ID                               
#			undef MSG_PORTAL_START_ID                               
#		endif

		literal int MSG_PORTAL_START_ID                               =	(8);
#		define	MSG_PORTAL_START_ID                               		(8)

#		ifdef MSG_PORTAL_START                                  
#			undef MSG_PORTAL_START                                  
#		endif

		literal int MSG_PORTAL_START                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID);
#		define	MSG_PORTAL_START                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID)

#		ifdef MSG_PORTAL_START_ACK_ID                           
#			undef MSG_PORTAL_START_ACK_ID                           
#		endif

		literal int MSG_PORTAL_START_ACK_ID                           =	(9);
#		define	MSG_PORTAL_START_ACK_ID                           		(9)

#		ifdef MSG_PORTAL_START_ACK                              
#			undef MSG_PORTAL_START_ACK                              
#		endif

		literal int MSG_PORTAL_START_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID);
#		define	MSG_PORTAL_START_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID)

#		ifdef MSG_PORTAL_START_FAIL_ID                          
#			undef MSG_PORTAL_START_FAIL_ID                          
#		endif

		literal int MSG_PORTAL_START_FAIL_ID                          =	(10);
#		define	MSG_PORTAL_START_FAIL_ID                          		(10)

#		ifdef MSG_PORTAL_START_FAIL                             
#			undef MSG_PORTAL_START_FAIL                             
#		endif

		literal int MSG_PORTAL_START_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID);
#		define	MSG_PORTAL_START_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID)

#		ifdef MSG_PORTAL_PAUSE_ID                               
#			undef MSG_PORTAL_PAUSE_ID                               
#		endif

		literal int MSG_PORTAL_PAUSE_ID                               =	(11);
#		define	MSG_PORTAL_PAUSE_ID                               		(11)

#		ifdef MSG_PORTAL_PAUSE                                  
#			undef MSG_PORTAL_PAUSE                                  
#		endif

		literal int MSG_PORTAL_PAUSE                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID);
#		define	MSG_PORTAL_PAUSE                                  		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID)

#		ifdef MSG_PORTAL_PAUSE_ACK_ID                           
#			undef MSG_PORTAL_PAUSE_ACK_ID                           
#		endif

		literal int MSG_PORTAL_PAUSE_ACK_ID                           =	(12);
#		define	MSG_PORTAL_PAUSE_ACK_ID                           		(12)

#		ifdef MSG_PORTAL_PAUSE_ACK                              
#			undef MSG_PORTAL_PAUSE_ACK                              
#		endif

		literal int MSG_PORTAL_PAUSE_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID);
#		define	MSG_PORTAL_PAUSE_ACK                              		(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID)

#		ifdef MSG_PORTAL_PAUSE_FAIL_ID                          
#			undef MSG_PORTAL_PAUSE_FAIL_ID                          
#		endif

		literal int MSG_PORTAL_PAUSE_FAIL_ID                          =	(13);
#		define	MSG_PORTAL_PAUSE_FAIL_ID                          		(13)

#		ifdef MSG_PORTAL_PAUSE_FAIL                             
#			undef MSG_PORTAL_PAUSE_FAIL                             
#		endif

		literal int MSG_PORTAL_PAUSE_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID);
#		define	MSG_PORTAL_PAUSE_FAIL                             		(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID)
		
		

#		ifdef MSG_PORTAL_BUFFER_FULL_ID                         
#			undef MSG_PORTAL_BUFFER_FULL_ID                         
#		endif

		literal int MSG_PORTAL_BUFFER_FULL_ID                         =	(14);
#		define	MSG_PORTAL_BUFFER_FULL_ID                         		(14)

#		ifdef MSG_PORTAL_BUFFER_FULL                            
#			undef MSG_PORTAL_BUFFER_FULL                            
#		endif

		literal int MSG_PORTAL_BUFFER_FULL                            =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID);
#		define	MSG_PORTAL_BUFFER_FULL                            		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID)

#		ifdef MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  
#			undef MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  
#		endif

		literal int MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  =	(15);
#		define	MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  		(15)

#		ifdef MSG_PORTAL_BUFFER_AVAIL_AGAIN                     
#			undef MSG_PORTAL_BUFFER_AVAIL_AGAIN                     
#		endif

		literal int MSG_PORTAL_BUFFER_AVAIL_AGAIN                     =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID);
#		define	MSG_PORTAL_BUFFER_AVAIL_AGAIN                     		(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID)

#		ifdef MSG_PORTAL_IFRAME_REQUEST_ID                      
#			undef MSG_PORTAL_IFRAME_REQUEST_ID                      
#		endif

		literal int MSG_PORTAL_IFRAME_REQUEST_ID                      =	(16);
#		define	MSG_PORTAL_IFRAME_REQUEST_ID                      		(16)

#		ifdef MSG_PORTAL_IFRAME_REQUEST                         
#			undef MSG_PORTAL_IFRAME_REQUEST                         
#		endif

		literal int MSG_PORTAL_IFRAME_REQUEST                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID);
#		define	MSG_PORTAL_IFRAME_REQUEST                         		(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID)
		

#		ifdef MSG_PORTAL_MAX_COUNT                              
#			undef MSG_PORTAL_MAX_COUNT                              
#		endif

		literal int MSG_PORTAL_MAX_COUNT                              =	(16 + 1);
#		define	MSG_PORTAL_MAX_COUNT                              		(16 + 1)
		
		

#		ifdef NOTIFY_TYPE_PORTAL                                
#			undef NOTIFY_TYPE_PORTAL                                
#		endif

		literal int NOTIFY_TYPE_PORTAL                                =	((MSG_TYPE_PORTAL << 16));
#		define	NOTIFY_TYPE_PORTAL                                		((MSG_TYPE_PORTAL << 16))

#		ifdef NOTIFY_PORTAL_ESTABLISHED                         
#			undef NOTIFY_PORTAL_ESTABLISHED                         
#		endif

		literal int NOTIFY_PORTAL_ESTABLISHED                         =	(0x80);
#		define	NOTIFY_PORTAL_ESTABLISHED                         		(0x80)

#		ifdef NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              
#			undef NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              
#		endif

		literal int NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              =	(NOTIFY_TYPE_PORTAL | 0x81);
#		define	NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              		(NOTIFY_TYPE_PORTAL | 0x81)
		

#		ifdef NOTIFY_PORTAL_REQUEST                             
#			undef NOTIFY_PORTAL_REQUEST                             
#		endif

		literal int NOTIFY_PORTAL_REQUEST                             =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST);
#		define	NOTIFY_PORTAL_REQUEST                             		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST)

#		ifdef NOTIFY_PORTAL_ASK_REQUEST                         
#			undef NOTIFY_PORTAL_ASK_REQUEST                         
#		endif

		literal int NOTIFY_PORTAL_ASK_REQUEST                         =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_ASK_FOR_REQUEST);
#		define	NOTIFY_PORTAL_ASK_REQUEST                         		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_ASK_FOR_REQUEST)

#		ifdef NOTIFY_PORTAL_STREAM_INCOMING                     
#			undef NOTIFY_PORTAL_STREAM_INCOMING                     
#		endif

		literal int NOTIFY_PORTAL_STREAM_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING);
#		define	NOTIFY_PORTAL_STREAM_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING)

#		ifdef NOTIFY_PORTAL_IMAGES_INCOMING                     
#			undef NOTIFY_PORTAL_IMAGES_INCOMING                     
#		endif

		literal int NOTIFY_PORTAL_IMAGES_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING);
#		define	NOTIFY_PORTAL_IMAGES_INCOMING                     		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING)

#		ifdef NOTIFY_PORTAL_INCOMING_ESTABLISHED                
#			undef NOTIFY_PORTAL_INCOMING_ESTABLISHED                
#		endif

		literal int NOTIFY_PORTAL_INCOMING_ESTABLISHED                =	(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING | NOTIFY_PORTAL_ESTABLISHED);
#		define	NOTIFY_PORTAL_INCOMING_ESTABLISHED                		(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING | NOTIFY_PORTAL_ESTABLISHED)

#		ifdef NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  
#			undef NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  
#		endif

		literal int NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING);
#		define	NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING)

#		ifdef NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  
#			undef NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  
#		endif

		literal int NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING);
#		define	NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING)

#		ifdef NOTIFY_PORTAL_PROVIDER_READY                      
#			undef NOTIFY_PORTAL_PROVIDER_READY                      
#		endif

		literal int NOTIFY_PORTAL_PROVIDER_READY                      =	(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK | NOTIFY_PORTAL_ESTABLISHED);
#		define	NOTIFY_PORTAL_PROVIDER_READY                      		(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK | NOTIFY_PORTAL_ESTABLISHED)

#		ifdef NOTIFY_PORTAL_REQUEST_FAIL                        
#			undef NOTIFY_PORTAL_REQUEST_FAIL                        
#		endif

		literal int NOTIFY_PORTAL_REQUEST_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING);
#		define	NOTIFY_PORTAL_REQUEST_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING)

#		ifdef NOTIFY_PORTAL_PROVIDE_FAIL                        
#			undef NOTIFY_PORTAL_PROVIDE_FAIL                        
#		endif

		literal int NOTIFY_PORTAL_PROVIDE_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING);
#		define	NOTIFY_PORTAL_PROVIDE_FAIL                        		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING)
			

#		ifdef NOTIFY_PORTAL_STREAM_STARTED                      
#			undef NOTIFY_PORTAL_STREAM_STARTED                      
#		endif

		literal int NOTIFY_PORTAL_STREAM_STARTED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK);
#		define	NOTIFY_PORTAL_STREAM_STARTED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK)

#		ifdef NOTIFY_PORTAL_STREAM_PAUSED                       
#			undef NOTIFY_PORTAL_STREAM_PAUSED                       
#		endif

		literal int NOTIFY_PORTAL_STREAM_PAUSED                       =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK);
#		define	NOTIFY_PORTAL_STREAM_PAUSED                       		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK)

#		ifdef NOTIFY_PORTAL_STREAM_STOPPED                      
#			undef NOTIFY_PORTAL_STREAM_STOPPED                      
#		endif

		literal int NOTIFY_PORTAL_STREAM_STOPPED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK);
#		define	NOTIFY_PORTAL_STREAM_STOPPED                      		(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK)
		

#		ifdef NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             
#			undef NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             
#		endif

		literal int NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             =	(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF);
#		define	NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             		(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF)
		
		/**
		 * Notify portal enumeration.
		 * Notify portal enumeration.
		 * */
		
		
		/**
		 * Environs options set/get messages
		 * Environs options set/get messages
		 */
		/** Class: Options type */

#		ifdef MSG_TYPE_OPTIONS                                  
#			undef MSG_TYPE_OPTIONS                                  
#		endif

		literal int MSG_TYPE_OPTIONS                                  =	(6);
#		define	MSG_TYPE_OPTIONS                                  		(6)

#		ifdef MSG_TYPE_OPTIONS_RESPONSE                         
#			undef MSG_TYPE_OPTIONS_RESPONSE                         
#		endif

		literal int MSG_TYPE_OPTIONS_RESPONSE                         =	(7);
#		define	MSG_TYPE_OPTIONS_RESPONSE                         		(7)

#		ifdef MSG_OPTION_TYPE                                   
#			undef MSG_OPTION_TYPE                                   
#		endif

		literal int MSG_OPTION_TYPE                                   =	(0xF00);
#		define	MSG_OPTION_TYPE                                   		(0xF00)

#		ifdef MSG_OPTION_SET                                    
#			undef MSG_OPTION_SET                                    
#		endif

		literal int MSG_OPTION_SET                                    =	(0x100);
#		define	MSG_OPTION_SET                                    		(0x100)

#		ifdef MSG_OPTION_GET                                    
#			undef MSG_OPTION_GET                                    
#		endif

		literal int MSG_OPTION_GET                                    =	(0x200);
#		define	MSG_OPTION_GET                                    		(0x200)
		
		// Transport options

#		ifdef MSG_OPTION_TRANSPORT                              
#			undef MSG_OPTION_TRANSPORT                              
#		endif

		literal int MSG_OPTION_TRANSPORT                              =	(0x10);
#		define	MSG_OPTION_TRANSPORT                              		(0x10)

#		ifdef MSG_OPT_TRANSP_TCP_PORTAL                         
#			undef MSG_OPT_TRANSP_TCP_PORTAL                         
#		endif

		literal int MSG_OPT_TRANSP_TCP_PORTAL                         =	(MSG_OPTION_TRANSPORT | 0x1);
#		define	MSG_OPT_TRANSP_TCP_PORTAL                         		(MSG_OPTION_TRANSPORT | 0x1)

#		ifdef MSG_OPT_TRANSP_TCP_PORTAL_SET                     
#			undef MSG_OPT_TRANSP_TCP_PORTAL_SET                     
#		endif

		literal int MSG_OPT_TRANSP_TCP_PORTAL_SET                     =	(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL);
#		define	MSG_OPT_TRANSP_TCP_PORTAL_SET                     		(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL)

#		ifdef MSG_OPT_TRANSP_TCP_PORTAL_GET                     
#			undef MSG_OPT_TRANSP_TCP_PORTAL_GET                     
#		endif

		literal int MSG_OPT_TRANSP_TCP_PORTAL_GET                     =	(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL);
#		define	MSG_OPT_TRANSP_TCP_PORTAL_GET                     		(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL)
		
		// Portal options

#		ifdef MSG_OPTION_PORTAL                                 
#			undef MSG_OPTION_PORTAL                                 
#		endif

		literal int MSG_OPTION_PORTAL                                 =	(0x20);
#		define	MSG_OPTION_PORTAL                                 		(0x20)

#		ifdef MSG_OPT_PORTAL_CENTER                             
#			undef MSG_OPT_PORTAL_CENTER                             
#		endif

		literal int MSG_OPT_PORTAL_CENTER                             =	(MSG_OPTION_PORTAL | 0x1);
#		define	MSG_OPT_PORTAL_CENTER                             		(MSG_OPTION_PORTAL | 0x1)

#		ifdef MSG_OPT_PORTAL_CENTER_SET                         
#			undef MSG_OPT_PORTAL_CENTER_SET                         
#		endif

		literal int MSG_OPT_PORTAL_CENTER_SET                         =	(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER);
#		define	MSG_OPT_PORTAL_CENTER_SET                         		(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER)

#		ifdef MSG_OPT_PORTAL_CENTER_GET                         
#			undef MSG_OPT_PORTAL_CENTER_GET                         
#		endif

		literal int MSG_OPT_PORTAL_CENTER_GET                         =	(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER);
#		define	MSG_OPT_PORTAL_CENTER_GET                         		(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER)

#		ifdef MSG_OPT_PORTAL_WH                                 
#			undef MSG_OPT_PORTAL_WH                                 
#		endif

		literal int MSG_OPT_PORTAL_WH                                 =	(MSG_OPTION_PORTAL | 0x2);
#		define	MSG_OPT_PORTAL_WH                                 		(MSG_OPTION_PORTAL | 0x2)

#		ifdef MSG_OPT_PORTAL_WH_SET                             
#			undef MSG_OPT_PORTAL_WH_SET                             
#		endif

		literal int MSG_OPT_PORTAL_WH_SET                             =	(MSG_OPTION_SET | MSG_OPT_PORTAL_WH);
#		define	MSG_OPT_PORTAL_WH_SET                             		(MSG_OPTION_SET | MSG_OPT_PORTAL_WH)

#		ifdef MSG_OPT_PORTAL_INFO                               
#			undef MSG_OPT_PORTAL_INFO                               
#		endif

		literal int MSG_OPT_PORTAL_INFO                               =	(MSG_OPTION_PORTAL | 0x4);
#		define	MSG_OPT_PORTAL_INFO                               		(MSG_OPTION_PORTAL | 0x4)

#		ifdef MSG_OPT_PORTAL_INFO_SET                           
#			undef MSG_OPT_PORTAL_INFO_SET                           
#		endif

		literal int MSG_OPT_PORTAL_INFO_SET                           =	(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO);
#		define	MSG_OPT_PORTAL_INFO_SET                           		(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO)

#		ifdef MSG_OPT_PORTAL_INFO_GET                           
#			undef MSG_OPT_PORTAL_INFO_GET                           
#		endif

		literal int MSG_OPT_PORTAL_INFO_GET                           =	(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO);
#		define	MSG_OPT_PORTAL_INFO_GET                           		(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO)
		
		// Physical contact options

#		ifdef MSG_OPTION_CONTACT                                
#			undef MSG_OPTION_CONTACT                                
#		endif

		literal int MSG_OPTION_CONTACT                                =	(0x40);
#		define	MSG_OPTION_CONTACT                                		(0x40)

#		ifdef MSG_OPT_CONTACT_DIRECT                            
#			undef MSG_OPT_CONTACT_DIRECT                            
#		endif

		literal int MSG_OPT_CONTACT_DIRECT                            =	(MSG_OPTION_CONTACT | 0x1);
#		define	MSG_OPT_CONTACT_DIRECT                            		(MSG_OPTION_CONTACT | 0x1)

#		ifdef MSG_OPT_CONTACT_DIRECT_SET                        
#			undef MSG_OPT_CONTACT_DIRECT_SET                        
#		endif

		literal int MSG_OPT_CONTACT_DIRECT_SET                        =	(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT);
#		define	MSG_OPT_CONTACT_DIRECT_SET                        		(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT)

#		ifdef MSG_OPT_CONTACT_DIRECT_GET                        
#			undef MSG_OPT_CONTACT_DIRECT_GET                        
#		endif

		literal int MSG_OPT_CONTACT_DIRECT_GET                        =	(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT);
#		define	MSG_OPT_CONTACT_DIRECT_GET                        		(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT)
			

#		ifdef NOTIFY_TYPE_OPTIONS                               
#			undef NOTIFY_TYPE_OPTIONS                               
#		endif

		literal int NOTIFY_TYPE_OPTIONS                               =	((MSG_TYPE_OPTIONS << 16));
#		define	NOTIFY_TYPE_OPTIONS                               		((MSG_TYPE_OPTIONS << 16))

#		ifdef NOTIFY_PORTAL_LOCATION_CHANGED                    
#			undef NOTIFY_PORTAL_LOCATION_CHANGED                    
#		endif

		literal int NOTIFY_PORTAL_LOCATION_CHANGED                    =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET);
#		define	NOTIFY_PORTAL_LOCATION_CHANGED                    		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET)

#		ifdef NOTIFY_PORTAL_SIZE_CHANGED                        
#			undef NOTIFY_PORTAL_SIZE_CHANGED                        
#		endif

		literal int NOTIFY_PORTAL_SIZE_CHANGED                        =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET);
#		define	NOTIFY_PORTAL_SIZE_CHANGED                        		(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET)

#		ifdef NOTIFY_CONTACT_DIRECT_CHANGED                     
#			undef NOTIFY_CONTACT_DIRECT_CHANGED                     
#		endif

		literal int NOTIFY_CONTACT_DIRECT_CHANGED                     =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET);
#		define	NOTIFY_CONTACT_DIRECT_CHANGED                     		(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET)
		
		/**
		 * Notify options enumeration.
		 * Notify options enumeration.
		 * */
		
		/*
		 * Native file types to app
		 * Native file types to app
		 */

#		ifdef MSG_TYPE_FILE                                     
#			undef MSG_TYPE_FILE                                     
#		endif

		literal int MSG_TYPE_FILE                                     =	(3);
#		define	MSG_TYPE_FILE                                     		(3)
		/** Class: File type */
		// File types

#		ifdef NATIVE_FILE_TYPE                                  
#			undef NATIVE_FILE_TYPE                                  
#		endif

		literal int NATIVE_FILE_TYPE                                  =	(0x400);
#		define	NATIVE_FILE_TYPE                                  		(0x400)

#		ifdef NATIVE_FILE_TYPE_APP_DEFINED                      
#			undef NATIVE_FILE_TYPE_APP_DEFINED                      
#		endif

		literal int NATIVE_FILE_TYPE_APP_DEFINED                      =	(NATIVE_FILE_TYPE);
#		define	NATIVE_FILE_TYPE_APP_DEFINED                      		(NATIVE_FILE_TYPE)

#		ifdef NATIVE_FILE_TYPE_EXT_DEFINED                      
#			undef NATIVE_FILE_TYPE_EXT_DEFINED                      
#		endif

		literal int NATIVE_FILE_TYPE_EXT_DEFINED                      =	(NATIVE_FILE_TYPE | 1);
#		define	NATIVE_FILE_TYPE_EXT_DEFINED                      		(NATIVE_FILE_TYPE | 1)

#		ifdef NATIVE_FILE_TYPE_PARTS                            
#			undef NATIVE_FILE_TYPE_PARTS                            
#		endif

		literal int NATIVE_FILE_TYPE_PARTS                            =	(NATIVE_FILE_TYPE | 6);
#		define	NATIVE_FILE_TYPE_PARTS                            		(NATIVE_FILE_TYPE | 6)

#		ifdef NATIVE_FILE_TYPE_ACK                              
#			undef NATIVE_FILE_TYPE_ACK                              
#		endif

		literal int NATIVE_FILE_TYPE_ACK                              =	(NATIVE_FILE_TYPE | 0xF);
#		define	NATIVE_FILE_TYPE_ACK                              		(NATIVE_FILE_TYPE | 0xF)
		

#		ifdef MSG_TYPE_MESSAGE                                  
#			undef MSG_TYPE_MESSAGE                                  
#		endif

		literal int MSG_TYPE_MESSAGE                                  =	(4);
#		define	MSG_TYPE_MESSAGE                                  		(4)

#		ifdef MESSAGE_FROM_APP                                  
#			undef MESSAGE_FROM_APP                                  
#		endif

		literal int MESSAGE_FROM_APP                                  =	(0x800);
#		define	MESSAGE_FROM_APP                                  		(0x800)

#		ifdef MESSAGE_APP_STRING                                
#			undef MESSAGE_APP_STRING                                
#		endif

		literal int MESSAGE_APP_STRING                                =	(MESSAGE_FROM_APP | 1);
#		define	MESSAGE_APP_STRING                                		(MESSAGE_FROM_APP | 1)
		
		

#		ifdef NOTIFY_TYPE_FILE                                  
#			undef NOTIFY_TYPE_FILE                                  
#		endif

		literal int NOTIFY_TYPE_FILE                                  =	((MSG_TYPE_FILE << 16));
#		define	NOTIFY_TYPE_FILE                                  		((MSG_TYPE_FILE << 16))

#		ifdef NOTIFY_TYPE_FILE_PROGRESS                         
#			undef NOTIFY_TYPE_FILE_PROGRESS                         
#		endif

		literal int NOTIFY_TYPE_FILE_PROGRESS                         =	(NOTIFY_TYPE_FILE | 0x20);
#		define	NOTIFY_TYPE_FILE_PROGRESS                         		(NOTIFY_TYPE_FILE | 0x20)
		

#		ifdef NOTIFY_FILE_SEND_PROGRESS                         
#			undef NOTIFY_FILE_SEND_PROGRESS                         
#		endif

		literal int NOTIFY_FILE_SEND_PROGRESS                         =	(NOTIFY_TYPE_FILE_PROGRESS | 1);
#		define	NOTIFY_FILE_SEND_PROGRESS                         		(NOTIFY_TYPE_FILE_PROGRESS | 1)

#		ifdef NOTIFY_FILE_RECEIVE_PROGRESS                      
#			undef NOTIFY_FILE_RECEIVE_PROGRESS                      
#		endif

		literal int NOTIFY_FILE_RECEIVE_PROGRESS                      =	(NOTIFY_TYPE_FILE_PROGRESS | 2);
#		define	NOTIFY_FILE_RECEIVE_PROGRESS                      		(NOTIFY_TYPE_FILE_PROGRESS | 2)
		
		/**
		 * Notify file enumeration.
		 * Notify file enumeration.
		 * */
		
		
		/*
		 * Environs options data identifiers for onData
		 * Environs options data identifiers for onData
		 */
			
		/*
		 * Native callback for errors
		 * Native callback for errors
		 */

#		ifdef NOTIFY_TOUCHSOURCE                                
#			undef NOTIFY_TOUCHSOURCE                                
#		endif

		literal int NOTIFY_TOUCHSOURCE                                =	(0x40);
#		define	NOTIFY_TOUCHSOURCE                                		(0x40)

#		ifdef NOTIFY_TOUCHSOURCE_STARTED                        
#			undef NOTIFY_TOUCHSOURCE_STARTED                        
#		endif

		literal int NOTIFY_TOUCHSOURCE_STARTED                        =	(NOTIFY_TOUCHSOURCE | 2);
#		define	NOTIFY_TOUCHSOURCE_STARTED                        		(NOTIFY_TOUCHSOURCE | 2)

#		ifdef NOTIFY_TOUCHSOURCE_STOPPED                        
#			undef NOTIFY_TOUCHSOURCE_STOPPED                        
#		endif

		literal int NOTIFY_TOUCHSOURCE_STOPPED                        =	(NOTIFY_TOUCHSOURCE | 4);
#		define	NOTIFY_TOUCHSOURCE_STOPPED                        		(NOTIFY_TOUCHSOURCE | 4)
			

#		ifdef NOTIFY_TOUCHSOURCE_NOTAVAIL                       
#			undef NOTIFY_TOUCHSOURCE_NOTAVAIL                       
#		endif

		literal int NOTIFY_TOUCHSOURCE_NOTAVAIL                       =	(NOTIFY_TOUCHSOURCE | 8);
#		define	NOTIFY_TOUCHSOURCE_NOTAVAIL                       		(NOTIFY_TOUCHSOURCE | 8)

#		ifdef NOTIFY_TOUCHSOURCE_FAILED                         
#			undef NOTIFY_TOUCHSOURCE_FAILED                         
#		endif

		literal int NOTIFY_TOUCHSOURCE_FAILED                         =	(NOTIFY_TOUCHSOURCE | 9);
#		define	NOTIFY_TOUCHSOURCE_FAILED                         		(NOTIFY_TOUCHSOURCE | 9)
		
		/**
		 * Notify touchsource enumeration.
		 * Notify touchsource enumeration.
		 * */
		
		
		/**
		 * Environs human input declarations
		 * Environs human input declarations
		 */
		/**
		 * Input types for human input
		 * Input types for human input
		 * */

#		ifdef INPUT_TYPE_CURSOR                                 
#			undef INPUT_TYPE_CURSOR                                 
#		endif

		literal int INPUT_TYPE_CURSOR                                 =	(0);
#		define	INPUT_TYPE_CURSOR                                 		(0)

#		ifdef INPUT_TYPE_FINGER                                 
#			undef INPUT_TYPE_FINGER                                 
#		endif

		literal int INPUT_TYPE_FINGER                                 =	(1);
#		define	INPUT_TYPE_FINGER                                 		(1)

#		ifdef INPUT_TYPE_PEN                                    
#			undef INPUT_TYPE_PEN                                    
#		endif

		literal int INPUT_TYPE_PEN                                    =	(2);
#		define	INPUT_TYPE_PEN                                    		(2)

#		ifdef INPUT_TYPE_MARKER                                 
#			undef INPUT_TYPE_MARKER                                 
#		endif

		literal int INPUT_TYPE_MARKER                                 =	(4);
#		define	INPUT_TYPE_MARKER                                 		(4)

#		ifdef INPUT_TYPE_BLOB                                   
#			undef INPUT_TYPE_BLOB                                   
#		endif

		literal int INPUT_TYPE_BLOB                                   =	(8);
#		define	INPUT_TYPE_BLOB                                   		(8)
		
		/**
		 * Input type enumeration.
		 * Input type enumeration.
		 * */
		
		
		/**
		 * Native callback for errors
		 * Native callback for errors
		 */

#		ifdef NATIVE_EVENT_ERROR_MISC                           
#			undef NATIVE_EVENT_ERROR_MISC                           
#		endif

		literal int NATIVE_EVENT_ERROR_MISC                           =	(0x80);
#		define	NATIVE_EVENT_ERROR_MISC                           		(0x80)

#		ifdef NATIVE_EVENT_DATA_CON_FAILED                      
#			undef NATIVE_EVENT_DATA_CON_FAILED                      
#		endif

		literal int NATIVE_EVENT_DATA_CON_FAILED                      =	(NATIVE_EVENT_ERROR_MISC | 3);
#		define	NATIVE_EVENT_DATA_CON_FAILED                      		(NATIVE_EVENT_ERROR_MISC | 3)

#		ifdef NATIVE_EVENT_TOUCH_SOURCE_FAILED                  
#			undef NATIVE_EVENT_TOUCH_SOURCE_FAILED                  
#		endif

		literal int NATIVE_EVENT_TOUCH_SOURCE_FAILED                  =	(NATIVE_EVENT_ERROR_MISC | 4);
#		define	NATIVE_EVENT_TOUCH_SOURCE_FAILED                  		(NATIVE_EVENT_ERROR_MISC | 4)
		
		/**
		 * Input states for a particular human input entity
		 * Input states for a particular human input entity
		 * */

#		ifdef INPUT_STATE_ADD                                   
#			undef INPUT_STATE_ADD                                   
#		endif

		literal int INPUT_STATE_ADD                                   =	(1);
#		define	INPUT_STATE_ADD                                   		(1)

#		ifdef INPUT_STATE_CHANGE                                
#			undef INPUT_STATE_CHANGE                                
#		endif

		literal int INPUT_STATE_CHANGE                                =	(2);
#		define	INPUT_STATE_CHANGE                                		(2)

#		ifdef INPUT_STATE_NOCHANGE                              
#			undef INPUT_STATE_NOCHANGE                              
#		endif

		literal int INPUT_STATE_NOCHANGE                              =	(3);
#		define	INPUT_STATE_NOCHANGE                              		(3)

#		ifdef INPUT_STATE_DROP                                  
#			undef INPUT_STATE_DROP                                  
#		endif

		literal int INPUT_STATE_DROP                                  =	(4);
#		define	INPUT_STATE_DROP                                  		(4)
		
		/**
		 * Input state enumeration.
		 * Input state enumeration.
		 * */
		
		/**
		 * Input commands for a particular human input entity
		 * Input commands for a particular human input entity
		 * */

#		ifdef INPUTSOURCE_COMMAND_INIT                          
#			undef INPUTSOURCE_COMMAND_INIT                          
#		endif

		literal int INPUTSOURCE_COMMAND_INIT                          =	(0);
#		define	INPUTSOURCE_COMMAND_INIT                          		(0)

#		ifdef INPUTSOURCE_COMMAND_ADD                           
#			undef INPUTSOURCE_COMMAND_ADD                           
#		endif

		literal int INPUTSOURCE_COMMAND_ADD                           =	(1);
#		define	INPUTSOURCE_COMMAND_ADD                           		(1)

#		ifdef INPUTSOURCE_COMMAND_CHANGE                        
#			undef INPUTSOURCE_COMMAND_CHANGE                        
#		endif

		literal int INPUTSOURCE_COMMAND_CHANGE                        =	(2);
#		define	INPUTSOURCE_COMMAND_CHANGE                        		(2)

#		ifdef INPUTSOURCE_COMMAND_DROP                          
#			undef INPUTSOURCE_COMMAND_DROP                          
#		endif

		literal int INPUTSOURCE_COMMAND_DROP                          =	(4);
#		define	INPUTSOURCE_COMMAND_DROP                          		(4)

#		ifdef INPUTSOURCE_COMMAND_CANCEL                        
#			undef INPUTSOURCE_COMMAND_CANCEL                        
#		endif

		literal int INPUTSOURCE_COMMAND_CANCEL                        =	(6);
#		define	INPUTSOURCE_COMMAND_CANCEL                        		(6)

#		ifdef INPUTSOURCE_COMMAND_FLUSH                         
#			undef INPUTSOURCE_COMMAND_FLUSH                         
#		endif

		literal int INPUTSOURCE_COMMAND_FLUSH                         =	(8);
#		define	INPUTSOURCE_COMMAND_FLUSH                         		(8)

#		ifdef INPUTSOURCE_COMMAND_FOLLOWUP                      
#			undef INPUTSOURCE_COMMAND_FOLLOWUP                      
#		endif

		literal int INPUTSOURCE_COMMAND_FOLLOWUP                      =	(0x80);
#		define	INPUTSOURCE_COMMAND_FOLLOWUP                      		(0x80)
		
		
		/**
		 * Input source commands enumeration.
		 * Input source commands enumeration.
		 * */
		
		/**
		 * Environs Start notifications
		 * Environs Start notifications
		 */
		/** Class: Environs type */

#		ifdef MSG_TYPE_ENVIRONS                                 
#			undef MSG_TYPE_ENVIRONS                                 
#		endif

		literal int MSG_TYPE_ENVIRONS                                 =	(8);
#		define	MSG_TYPE_ENVIRONS                                 		(8)
		

#		ifdef NOTIFY_TYPE_ENVIRONS                              
#			undef NOTIFY_TYPE_ENVIRONS                              
#		endif

		literal int NOTIFY_TYPE_ENVIRONS                              =	((MSG_TYPE_ENVIRONS << 16));
#		define	NOTIFY_TYPE_ENVIRONS                              		((MSG_TYPE_ENVIRONS << 16))

#		ifdef NOTIFY_START                                      
#			undef NOTIFY_START                                      
#		endif

		literal int NOTIFY_START                                      =	(NOTIFY_TYPE_ENVIRONS | 0x100);
#		define	NOTIFY_START                                      		(NOTIFY_TYPE_ENVIRONS | 0x100)

#		ifdef NOTIFY_START_IN_PROGRESS                          
#			undef NOTIFY_START_IN_PROGRESS                          
#		endif

		literal int NOTIFY_START_IN_PROGRESS                          =	(NOTIFY_START | 1);
#		define	NOTIFY_START_IN_PROGRESS                          		(NOTIFY_START | 1)

#		ifdef NOTIFY_START_ENABLING_WIFI                        
#			undef NOTIFY_START_ENABLING_WIFI                        
#		endif

		literal int NOTIFY_START_ENABLING_WIFI                        =	(NOTIFY_START | 2);
#		define	NOTIFY_START_ENABLING_WIFI                        		(NOTIFY_START | 2)

#		ifdef NOTIFY_START_STREAM_DECODER                       
#			undef NOTIFY_START_STREAM_DECODER                       
#		endif

		literal int NOTIFY_START_STREAM_DECODER                       =	(NOTIFY_START | 3);
#		define	NOTIFY_START_STREAM_DECODER                       		(NOTIFY_START | 3)

#		ifdef NOTIFY_START_INIT                                 
#			undef NOTIFY_START_INIT                                 
#		endif

		literal int NOTIFY_START_INIT                                 =	(NOTIFY_START | 4);
#		define	NOTIFY_START_INIT                                 		(NOTIFY_START | 4)
		

#		ifdef NOTIFY_START_INIT_FAILED                          
#			undef NOTIFY_START_INIT_FAILED                          
#		endif

		literal int NOTIFY_START_INIT_FAILED                          =	(NOTIFY_START | 7);
#		define	NOTIFY_START_INIT_FAILED                          		(NOTIFY_START | 7)

#		ifdef NOTIFY_START_METHOD_FAILED                        
#			undef NOTIFY_START_METHOD_FAILED                        
#		endif

		literal int NOTIFY_START_METHOD_FAILED                        =	(NOTIFY_START | 8);
#		define	NOTIFY_START_METHOD_FAILED                        		(NOTIFY_START | 8)

#		ifdef NOTIFY_START_DECODER_FAILED                       
#			undef NOTIFY_START_DECODER_FAILED                       
#		endif

		literal int NOTIFY_START_DECODER_FAILED                       =	(NOTIFY_START | 9);
#		define	NOTIFY_START_DECODER_FAILED                       		(NOTIFY_START | 9)

#		ifdef NOTIFY_START_WIFI_FAILED                          
#			undef NOTIFY_START_WIFI_FAILED                          
#		endif

		literal int NOTIFY_START_WIFI_FAILED                          =	(NOTIFY_START | 10);
#		define	NOTIFY_START_WIFI_FAILED                          		(NOTIFY_START | 10)

#		ifdef NOTIFY_START_FAILED                               
#			undef NOTIFY_START_FAILED                               
#		endif

		literal int NOTIFY_START_FAILED                               =	(NOTIFY_START | 11);
#		define	NOTIFY_START_FAILED                               		(NOTIFY_START | 11)
		

#		ifdef NOTIFY_START_INIT_SUCCESS                         
#			undef NOTIFY_START_INIT_SUCCESS                         
#		endif

		literal int NOTIFY_START_INIT_SUCCESS                         =	(NOTIFY_START | 12);
#		define	NOTIFY_START_INIT_SUCCESS                         		(NOTIFY_START | 12)

#		ifdef NOTIFY_START_SUCCESS                              
#			undef NOTIFY_START_SUCCESS                              
#		endif

		literal int NOTIFY_START_SUCCESS                              =	(NOTIFY_START | 13);
#		define	NOTIFY_START_SUCCESS                              		(NOTIFY_START | 13)

#		ifdef NOTIFY_START_LISTEN_SUCCESS                       
#			undef NOTIFY_START_LISTEN_SUCCESS                       
#		endif

		literal int NOTIFY_START_LISTEN_SUCCESS                       =	(NOTIFY_START | 14);
#		define	NOTIFY_START_LISTEN_SUCCESS                       		(NOTIFY_START | 14)

#		ifdef NOTIFY_START_LISTENDA_SUCCESS                     
#			undef NOTIFY_START_LISTENDA_SUCCESS                     
#		endif

		literal int NOTIFY_START_LISTENDA_SUCCESS                     =	(NOTIFY_START | 15);
#		define	NOTIFY_START_LISTENDA_SUCCESS                     		(NOTIFY_START | 15)
		
		/**
		 * Environs Stop notifications
		 * Environs Stop notifications
		 */

#		ifdef NOTIFY_STOP                                       
#			undef NOTIFY_STOP                                       
#		endif

		literal int NOTIFY_STOP                                       =	(NOTIFY_TYPE_ENVIRONS | 0x200);
#		define	NOTIFY_STOP                                       		(NOTIFY_TYPE_ENVIRONS | 0x200)

#		ifdef NOTIFY_STOP_BEGIN                                 
#			undef NOTIFY_STOP_BEGIN                                 
#		endif

		literal int NOTIFY_STOP_BEGIN                                 =	(NOTIFY_STOP | 1);
#		define	NOTIFY_STOP_BEGIN                                 		(NOTIFY_STOP | 1)

#		ifdef NOTIFY_STOP_IN_PROGRESS                           
#			undef NOTIFY_STOP_IN_PROGRESS                           
#		endif

		literal int NOTIFY_STOP_IN_PROGRESS                           =	(NOTIFY_STOP | 2);
#		define	NOTIFY_STOP_IN_PROGRESS                           		(NOTIFY_STOP | 2)

#		ifdef NOTIFY_STOP_FAILED                                
#			undef NOTIFY_STOP_FAILED                                
#		endif

		literal int NOTIFY_STOP_FAILED                                =	(NOTIFY_STOP | 10);
#		define	NOTIFY_STOP_FAILED                                		(NOTIFY_STOP | 10)

#		ifdef NOTIFY_STOP_SUCCESS                               
#			undef NOTIFY_STOP_SUCCESS                               
#		endif

		literal int NOTIFY_STOP_SUCCESS                               =	(NOTIFY_STOP | 11);
#		define	NOTIFY_STOP_SUCCESS                               		(NOTIFY_STOP | 11)

#		ifdef NOTIFY_STOP_RELEASED                              
#			undef NOTIFY_STOP_RELEASED                              
#		endif

		literal int NOTIFY_STOP_RELEASED                              =	(NOTIFY_STOP | 12);
#		define	NOTIFY_STOP_RELEASED                              		(NOTIFY_STOP | 12)
			
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */

#		ifdef NOTIFY_SOCKET                                     
#			undef NOTIFY_SOCKET                                     
#		endif

		literal int NOTIFY_SOCKET                                     =	(NOTIFY_TYPE_ENVIRONS | 0x400);
#		define	NOTIFY_SOCKET                                     		(NOTIFY_TYPE_ENVIRONS | 0x400)

#		ifdef NOTIFY_SOCKET_BIND_FAILED                         
#			undef NOTIFY_SOCKET_BIND_FAILED                         
#		endif

		literal int NOTIFY_SOCKET_BIND_FAILED                         =	(NOTIFY_SOCKET | 7);
#		define	NOTIFY_SOCKET_BIND_FAILED                         		(NOTIFY_SOCKET | 7)

#		ifdef NOTIFY_SOCKET_LISTEN_FAILED                       
#			undef NOTIFY_SOCKET_LISTEN_FAILED                       
#		endif

		literal int NOTIFY_SOCKET_LISTEN_FAILED                       =	(NOTIFY_SOCKET | 8);
#		define	NOTIFY_SOCKET_LISTEN_FAILED                       		(NOTIFY_SOCKET | 8)

#		ifdef NOTIFY_SOCKET_FAILED                              
#			undef NOTIFY_SOCKET_FAILED                              
#		endif

		literal int NOTIFY_SOCKET_FAILED                              =	(NOTIFY_SOCKET | 9);
#		define	NOTIFY_SOCKET_FAILED                              		(NOTIFY_SOCKET | 9)
		
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */

#		ifdef NOTIFY_SETTINGS                                   
#			undef NOTIFY_SETTINGS                                   
#		endif

		literal int NOTIFY_SETTINGS                                   =	(NOTIFY_TYPE_ENVIRONS | 0x480);
#		define	NOTIFY_SETTINGS                                   		(NOTIFY_TYPE_ENVIRONS | 0x480)

#		ifdef NOTIFY_SETTINGS_CHANGED                           
#			undef NOTIFY_SETTINGS_CHANGED                           
#		endif

		literal int NOTIFY_SETTINGS_CHANGED                           =	(NOTIFY_SETTINGS | 0x1);
#		define	NOTIFY_SETTINGS_CHANGED                           		(NOTIFY_SETTINGS | 0x1)
			
		/**
		 * Environs device paring notifications
		 * Environs device paring notifications
		 */

#		ifdef NOTIFY_PAIRING                                    
#			undef NOTIFY_PAIRING                                    
#		endif

		literal int NOTIFY_PAIRING                                    =	(NOTIFY_TYPE_ENVIRONS | 0x800);
#		define	NOTIFY_PAIRING                                    		(NOTIFY_TYPE_ENVIRONS | 0x800)

#		ifdef NOTIFY_DEVICE_ON_SURFACE                          
#			undef NOTIFY_DEVICE_ON_SURFACE                          
#		endif

		literal int NOTIFY_DEVICE_ON_SURFACE                          =	(NOTIFY_PAIRING | 1);
#		define	NOTIFY_DEVICE_ON_SURFACE                          		(NOTIFY_PAIRING | 1)

#		ifdef NOTIFY_DEVICE_NOT_ON_SURFACE                      
#			undef NOTIFY_DEVICE_NOT_ON_SURFACE                      
#		endif

		literal int NOTIFY_DEVICE_NOT_ON_SURFACE                      =	(NOTIFY_PAIRING | 2);
#		define	NOTIFY_DEVICE_NOT_ON_SURFACE                      		(NOTIFY_PAIRING | 2)

#		ifdef NOTIFY_DEVICE_FLAGS_UPDATE                        
#			undef NOTIFY_DEVICE_FLAGS_UPDATE                        
#		endif

		literal int NOTIFY_DEVICE_FLAGS_UPDATE                        =	(NOTIFY_PAIRING | 8);
#		define	NOTIFY_DEVICE_FLAGS_UPDATE                        		(NOTIFY_PAIRING | 8)
		
		
		/**
		 * Notify environs enumeration.
		 * Notify environs enumeration.
		 * */
		
		/**
		 * Environs Start notifications
		 * Environs Start notifications
		 */
		/** Class: Environs type */

#		ifdef MSG_TYPE_SENSOR                                   
#			undef MSG_TYPE_SENSOR                                   
#		endif

		literal int MSG_TYPE_SENSOR                                   =	(9);
#		define	MSG_TYPE_SENSOR                                   		(9)

#		ifdef MSG_TYPE_MAX_COUNT                                
#			undef MSG_TYPE_MAX_COUNT                                
#		endif

		literal int MSG_TYPE_MAX_COUNT                                =	(MSG_TYPE_SENSOR + 1);
#		define	MSG_TYPE_MAX_COUNT                                		(MSG_TYPE_SENSOR + 1)
		
		/**
		 * Environs mediator filter constants
		 * Environs mediator filter constants
		 */

#		ifdef MEDIATOR_FILTER_NONE                              
#			undef MEDIATOR_FILTER_NONE                              
#		endif

		literal int MEDIATOR_FILTER_NONE                              =	(0);
#		define	MEDIATOR_FILTER_NONE                              		(0)

#		ifdef MEDIATOR_FILTER_AREA                              
#			undef MEDIATOR_FILTER_AREA                              
#		endif

		literal int MEDIATOR_FILTER_AREA                              =	(1);
#		define	MEDIATOR_FILTER_AREA                              		(1)

#		ifdef MEDIATOR_FILTER_AREA_AND_APP                      
#			undef MEDIATOR_FILTER_AREA_AND_APP                      
#		endif

		literal int MEDIATOR_FILTER_AREA_AND_APP                      =	(2);
#		define	MEDIATOR_FILTER_AREA_AND_APP                      		(2)
		/// Disable all devicelist notifications

#		ifdef MEDIATOR_FILTER_ALL                               
#			undef MEDIATOR_FILTER_ALL                               
#		endif

		literal int MEDIATOR_FILTER_ALL                               =	(8);
#		define	MEDIATOR_FILTER_ALL                               		(8)
		
		
		/**
		 * Environs mediator filter enumeration.
		 * Environs mediator filter enumeration.
		 * */
		
		
		/**
		 * Environs mediator broadcast found values
		 * Environs mediator broadcast found values
		 */

#		ifdef DEVICEINFO_DEVICE_MEDIATOR                        
#			undef DEVICEINFO_DEVICE_MEDIATOR                        
#		endif

		literal int DEVICEINFO_DEVICE_MEDIATOR                        =	(0);
#		define	DEVICEINFO_DEVICE_MEDIATOR                        		(0)

#		ifdef DEVICEINFO_DEVICE_BROADCAST                       
#			undef DEVICEINFO_DEVICE_BROADCAST                       
#		endif

		literal int DEVICEINFO_DEVICE_BROADCAST                       =	(1);
#		define	DEVICEINFO_DEVICE_BROADCAST                       		(1)

#		ifdef DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          
#			undef DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          
#		endif

		literal int DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          =	(2);
#		define	DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          		(2)
		
		
		/**
		 * Device source type enumeration.
		 * Device source type enumeration.
		 * */
		
		
		/**
		 * Environs mediator broadcast message Start bytes
		 * Environs mediator broadcast message Start bytes
		 */

#		ifdef MEDIATOR_BROADCAST_DEVICETYPE_START               
#			undef MEDIATOR_BROADCAST_DEVICETYPE_START               
#		endif

		literal int MEDIATOR_BROADCAST_DEVICETYPE_START               =	(11);
#		define	MEDIATOR_BROADCAST_DEVICETYPE_START               		(11)

#		ifdef MEDIATOR_BROADCAST_DEVICEID_START                 
#			undef MEDIATOR_BROADCAST_DEVICEID_START                 
#		endif

		literal int MEDIATOR_BROADCAST_DEVICEID_START                 =	(12);
#		define	MEDIATOR_BROADCAST_DEVICEID_START                 		(12)

#		ifdef MEDIATOR_BROADCAST_DEVICEID_ABS_START             
#			undef MEDIATOR_BROADCAST_DEVICEID_ABS_START             
#		endif

		literal int MEDIATOR_BROADCAST_DEVICEID_ABS_START             =	(16);
#		define	MEDIATOR_BROADCAST_DEVICEID_ABS_START             		(16)

#		ifdef MEDIATOR_BROADCAST_PORTS_START                    
#			undef MEDIATOR_BROADCAST_PORTS_START                    
#		endif

		literal int MEDIATOR_BROADCAST_PORTS_START                    =	(20);
#		define	MEDIATOR_BROADCAST_PORTS_START                    		(20)

#		ifdef MEDIATOR_BROADCAST_PORTS_ABS_START                
#			undef MEDIATOR_BROADCAST_PORTS_ABS_START                
#		endif

		literal int MEDIATOR_BROADCAST_PORTS_ABS_START                =	(24);
#		define	MEDIATOR_BROADCAST_PORTS_ABS_START                		(24)

#		ifdef MEDIATOR_BROADCAST_PLATFORM_START                 
#			undef MEDIATOR_BROADCAST_PLATFORM_START                 
#		endif

		literal int MEDIATOR_BROADCAST_PLATFORM_START                 =	(24);
#		define	MEDIATOR_BROADCAST_PLATFORM_START                 		(24)

#		ifdef MEDIATOR_BROADCAST_PLATFORM_ABS_START             
#			undef MEDIATOR_BROADCAST_PLATFORM_ABS_START             
#		endif

		literal int MEDIATOR_BROADCAST_PLATFORM_ABS_START             =	(28);
#		define	MEDIATOR_BROADCAST_PLATFORM_ABS_START             		(28)

#		ifdef MEDIATOR_BROADCAST_DESC_START                     
#			undef MEDIATOR_BROADCAST_DESC_START                     
#		endif

		literal int MEDIATOR_BROADCAST_DESC_START                     =	(28);
#		define	MEDIATOR_BROADCAST_DESC_START                     		(28)

#		ifdef MEDIATOR_BROADCAST_DESC_ABS_START                 
#			undef MEDIATOR_BROADCAST_DESC_ABS_START                 
#		endif

		literal int MEDIATOR_BROADCAST_DESC_ABS_START                 =	(32);
#		define	MEDIATOR_BROADCAST_DESC_ABS_START                 		(32)
		

#		ifdef MEDIATOR_BROADCAST_STATUS_SRCDEVICEID_ABS_START   
#			undef MEDIATOR_BROADCAST_STATUS_SRCDEVICEID_ABS_START   
#		endif

		literal int MEDIATOR_BROADCAST_STATUS_SRCDEVICEID_ABS_START   =	(16);
#		define	MEDIATOR_BROADCAST_STATUS_SRCDEVICEID_ABS_START   		(16)

#		ifdef MEDIATOR_BROADCAST_STATUS_DEVICEID_ABS_START      
#			undef MEDIATOR_BROADCAST_STATUS_DEVICEID_ABS_START      
#		endif

		literal int MEDIATOR_BROADCAST_STATUS_DEVICEID_ABS_START      =	(20);
#		define	MEDIATOR_BROADCAST_STATUS_DEVICEID_ABS_START      		(20)

#		ifdef MEDIATOR_BROADCAST_STATUS_CLEAR_SET_ABS_START     
#			undef MEDIATOR_BROADCAST_STATUS_CLEAR_SET_ABS_START     
#		endif

		literal int MEDIATOR_BROADCAST_STATUS_CLEAR_SET_ABS_START     =	(24);
#		define	MEDIATOR_BROADCAST_STATUS_CLEAR_SET_ABS_START     		(24)

#		ifdef MEDIATOR_BROADCAST_STATUS_FLAGS_ABS_START         
#			undef MEDIATOR_BROADCAST_STATUS_FLAGS_ABS_START         
#		endif

		literal int MEDIATOR_BROADCAST_STATUS_FLAGS_ABS_START         =	(28);
#		define	MEDIATOR_BROADCAST_STATUS_FLAGS_ABS_START         		(28)

#		ifdef MEDIATOR_BROADCAST_STATUS_DESC_ABS_START          
#			undef MEDIATOR_BROADCAST_STATUS_DESC_ABS_START          
#		endif

		literal int MEDIATOR_BROADCAST_STATUS_DESC_ABS_START          =	(40);
#		define	MEDIATOR_BROADCAST_STATUS_DESC_ABS_START          		(40)
		
		/**
		 * Environs mediator broadcast message constants
		 * Environs mediator broadcast message constants
		 */

#		ifdef TYPES_SEPERATOR_1_ENVIRONS                        
#			undef TYPES_SEPERATOR_1_ENVIRONS                        
#		endif

		literal int TYPES_SEPERATOR_1_ENVIRONS                        =	(28);
#		define	TYPES_SEPERATOR_1_ENVIRONS                        		(28)

#		ifdef MEDIATOR_BROADCAST_SPARE_ID_LEN                   
#			undef MEDIATOR_BROADCAST_SPARE_ID_LEN                   
#		endif

		literal int MEDIATOR_BROADCAST_SPARE_ID_LEN                   =	(28);
#		define	MEDIATOR_BROADCAST_SPARE_ID_LEN                   		(28)
		
		/**
		 * Environs DeviceInstance struct Start bytes
		 * Environs DeviceInstance struct Start bytes
		 */

#		ifdef MAX_NAMEPROPERTY                                  
#			undef MAX_NAMEPROPERTY                                  
#		endif

		literal int MAX_NAMEPROPERTY                                  =	(30);
#		define	MAX_NAMEPROPERTY                                  		(30)
		/** Ignore: for Resolver */

#		ifdef MAX_LENGTH_AREA_NAME                              
#			undef MAX_LENGTH_AREA_NAME                              
#		endif

		literal int MAX_LENGTH_AREA_NAME                              =	(MAX_NAMEPROPERTY + 1);
#		define	MAX_LENGTH_AREA_NAME                              		(MAX_NAMEPROPERTY + 1)
		/** Ignore: for Resolver */

#		ifdef MAX_LENGTH_APP_NAME                               
#			undef MAX_LENGTH_APP_NAME                               
#		endif

		literal int MAX_LENGTH_APP_NAME                               =	(MAX_NAMEPROPERTY + 1);
#		define	MAX_LENGTH_APP_NAME                               		(MAX_NAMEPROPERTY + 1)
		/** Ignore: for Resolver */

#		ifdef MAX_LENGTH_DEVICE_NAME                            
#			undef MAX_LENGTH_DEVICE_NAME                            
#		endif

		literal int MAX_LENGTH_DEVICE_NAME                            =	(MAX_NAMEPROPERTY + 1);
#		define	MAX_LENGTH_DEVICE_NAME                            		(MAX_NAMEPROPERTY + 1)
		

#		ifdef DEVICEINFO_DEVICEID_START                         
#			undef DEVICEINFO_DEVICEID_START                         
#		endif

		literal int DEVICEINFO_DEVICEID_START                         =	(0);
#		define	DEVICEINFO_DEVICEID_START                         		(0)

#		ifdef DEVICEINFO_NATIVE_ID_START                        
#			undef DEVICEINFO_NATIVE_ID_START                        
#		endif

		literal int DEVICEINFO_NATIVE_ID_START                        =	(4);
#		define	DEVICEINFO_NATIVE_ID_START                        		(4)

#		ifdef DEVICEINFO_IP_START                               
#			undef DEVICEINFO_IP_START                               
#		endif

		literal int DEVICEINFO_IP_START                               =	(DEVICEINFO_NATIVE_ID_START + 4);
#		define	DEVICEINFO_IP_START                               		(DEVICEINFO_NATIVE_ID_START + 4)

#		ifdef DEVICEINFO_IPe_START                              
#			undef DEVICEINFO_IPe_START                              
#		endif

		literal int DEVICEINFO_IPe_START                              =	(DEVICEINFO_IP_START + 4);
#		define	DEVICEINFO_IPe_START                              		(DEVICEINFO_IP_START + 4)

#		ifdef DEVICEINFO_TCP_PORT_START                         
#			undef DEVICEINFO_TCP_PORT_START                         
#		endif

		literal int DEVICEINFO_TCP_PORT_START                         =	(DEVICEINFO_IPe_START + 4);
#		define	DEVICEINFO_TCP_PORT_START                         		(DEVICEINFO_IPe_START + 4)

#		ifdef DEVICEINFO_UDP_PORT_START                         
#			undef DEVICEINFO_UDP_PORT_START                         
#		endif

		literal int DEVICEINFO_UDP_PORT_START                         =	(DEVICEINFO_TCP_PORT_START + 2);
#		define	DEVICEINFO_UDP_PORT_START                         		(DEVICEINFO_TCP_PORT_START + 2)

#		ifdef DEVICEINFO_UPDATES_START                          
#			undef DEVICEINFO_UPDATES_START                          
#		endif

		literal int DEVICEINFO_UPDATES_START                          =	(DEVICEINFO_UDP_PORT_START + 2);
#		define	DEVICEINFO_UPDATES_START                          		(DEVICEINFO_UDP_PORT_START + 2)

#		ifdef DEVICEINFO_PLATFORM_START                         
#			undef DEVICEINFO_PLATFORM_START                         
#		endif

		literal int DEVICEINFO_PLATFORM_START                         =	(DEVICEINFO_UPDATES_START + 4);
#		define	DEVICEINFO_PLATFORM_START                         		(DEVICEINFO_UPDATES_START + 4)

#		ifdef DEVICEINFO_BROADCAST_START                        
#			undef DEVICEINFO_BROADCAST_START                        
#		endif

		literal int DEVICEINFO_BROADCAST_START                        =	(DEVICEINFO_PLATFORM_START + 4);
#		define	DEVICEINFO_BROADCAST_START                        		(DEVICEINFO_PLATFORM_START + 4)

#		ifdef DEVICEINFO_UNAVAILABLE_START                      
#			undef DEVICEINFO_UNAVAILABLE_START                      
#		endif

		literal int DEVICEINFO_UNAVAILABLE_START                      =	(DEVICEINFO_BROADCAST_START + 1);
#		define	DEVICEINFO_UNAVAILABLE_START                      		(DEVICEINFO_BROADCAST_START + 1)

#		ifdef DEVICEINFO_ISCONNECTED_START                      
#			undef DEVICEINFO_ISCONNECTED_START                      
#		endif

		literal int DEVICEINFO_ISCONNECTED_START                      =	(DEVICEINFO_UNAVAILABLE_START + 1);
#		define	DEVICEINFO_ISCONNECTED_START                      		(DEVICEINFO_UNAVAILABLE_START + 1)

#		ifdef DEVICEINFO_HASAPPAREA_START                       
#			undef DEVICEINFO_HASAPPAREA_START                       
#		endif

		literal int DEVICEINFO_HASAPPAREA_START                       =	(DEVICEINFO_ISCONNECTED_START + 2);
#		define	DEVICEINFO_HASAPPAREA_START                       		(DEVICEINFO_ISCONNECTED_START + 2)

#		ifdef DEVICEINFO_DEVICETYPE_START                       
#			undef DEVICEINFO_DEVICETYPE_START                       
#		endif

		literal int DEVICEINFO_DEVICETYPE_START                       =	(DEVICEINFO_ISCONNECTED_START + 2);
#		define	DEVICEINFO_DEVICETYPE_START                       		(DEVICEINFO_ISCONNECTED_START + 2)

#		ifdef DEVICEINFO_DEVICENAME_START                       
#			undef DEVICEINFO_DEVICENAME_START                       
#		endif

		literal int DEVICEINFO_DEVICENAME_START                       =	(DEVICEINFO_HASAPPAREA_START + 1);
#		define	DEVICEINFO_DEVICENAME_START                       		(DEVICEINFO_HASAPPAREA_START + 1)

#		ifdef DEVICEINFO_AREANAME_START                         
#			undef DEVICEINFO_AREANAME_START                         
#		endif

		literal int DEVICEINFO_AREANAME_START                         =	(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1));
#		define	DEVICEINFO_AREANAME_START                         		(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1))

#		ifdef DEVICEINFO_APPNAME_START                          
#			undef DEVICEINFO_APPNAME_START                          
#		endif

		literal int DEVICEINFO_APPNAME_START                          =	(DEVICEINFO_AREANAME_START + (MAX_NAMEPROPERTY + 1));
#		define	DEVICEINFO_APPNAME_START                          		(DEVICEINFO_AREANAME_START + (MAX_NAMEPROPERTY + 1))

#		ifdef DEVICEINFO_FLAGS_START                            
#			undef DEVICEINFO_FLAGS_START                            
#		endif

		literal int DEVICEINFO_FLAGS_START                            =	(DEVICEINFO_APPNAME_START + (MAX_NAMEPROPERTY + 1));
#		define	DEVICEINFO_FLAGS_START                            		(DEVICEINFO_APPNAME_START + (MAX_NAMEPROPERTY + 1))

#		ifdef DEVICEINFO_OBJID_START                            
#			undef DEVICEINFO_OBJID_START                            
#		endif

		literal int DEVICEINFO_OBJID_START                            =	(DEVICEINFO_FLAGS_START + 2);
#		define	DEVICEINFO_OBJID_START                            		(DEVICEINFO_FLAGS_START + 2)
		
		
		/**
		 * Environs mediator notifications
		 * Environs mediator notifications
		 */

#		ifdef NOTIFY_MEDIATOR                                   
#			undef NOTIFY_MEDIATOR                                   
#		endif

		literal int NOTIFY_MEDIATOR                                   =	(NOTIFY_TYPE_ENVIRONS | 0x1000);
#		define	NOTIFY_MEDIATOR                                   		(NOTIFY_TYPE_ENVIRONS | 0x1000)

#		ifdef NOTIFY_MEDIATOR_SERVER                            
#			undef NOTIFY_MEDIATOR_SERVER                            
#		endif

		literal int NOTIFY_MEDIATOR_SERVER                            =	(NOTIFY_MEDIATOR | 0x100);
#		define	NOTIFY_MEDIATOR_SERVER                            		(NOTIFY_MEDIATOR | 0x100)
			

#		ifdef NOTIFY_MEDIATOR_DEVICE_CHANGED                    
#			undef NOTIFY_MEDIATOR_DEVICE_CHANGED                    
#		endif

		literal int NOTIFY_MEDIATOR_DEVICE_CHANGED                    =	(NOTIFY_MEDIATOR | 1);
#		define	NOTIFY_MEDIATOR_DEVICE_CHANGED                    		(NOTIFY_MEDIATOR | 1)

#		ifdef NOTIFY_MEDIATOR_DEVICE_ADDED                      
#			undef NOTIFY_MEDIATOR_DEVICE_ADDED                      
#		endif

		literal int NOTIFY_MEDIATOR_DEVICE_ADDED                      =	(NOTIFY_MEDIATOR | 2);
#		define	NOTIFY_MEDIATOR_DEVICE_ADDED                      		(NOTIFY_MEDIATOR | 2)

#		ifdef NOTIFY_MEDIATOR_DEVICE_REMOVED                    
#			undef NOTIFY_MEDIATOR_DEVICE_REMOVED                    
#		endif

		literal int NOTIFY_MEDIATOR_DEVICE_REMOVED                    =	(NOTIFY_MEDIATOR | 4);
#		define	NOTIFY_MEDIATOR_DEVICE_REMOVED                    		(NOTIFY_MEDIATOR | 4)

#		ifdef NOTIFY_MEDIATOR_SERVER_CONNECTED                  
#			undef NOTIFY_MEDIATOR_SERVER_CONNECTED                  
#		endif

		literal int NOTIFY_MEDIATOR_SERVER_CONNECTED                  =	(NOTIFY_MEDIATOR | 20);
#		define	NOTIFY_MEDIATOR_SERVER_CONNECTED                  		(NOTIFY_MEDIATOR | 20)

#		ifdef NOTIFY_MEDIATOR_SERVER_DISCONNECTED               
#			undef NOTIFY_MEDIATOR_SERVER_DISCONNECTED               
#		endif

		literal int NOTIFY_MEDIATOR_SERVER_DISCONNECTED               =	(NOTIFY_MEDIATOR | 21);
#		define	NOTIFY_MEDIATOR_SERVER_DISCONNECTED               		(NOTIFY_MEDIATOR | 21)
		

#		ifdef NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      
#			undef NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      
#		endif

		literal int NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      =	(NOTIFY_MEDIATOR | 51);
#		define	NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      		(NOTIFY_MEDIATOR | 51)

#		ifdef NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               
#			undef NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               
#		endif

		literal int NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               =	(NOTIFY_MEDIATOR | 52);
#		define	NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               		(NOTIFY_MEDIATOR | 52)
		

#		ifdef NOTIFY_MEDIATOR_MED_CHANGED                       
#			undef NOTIFY_MEDIATOR_MED_CHANGED                       
#		endif

		literal int NOTIFY_MEDIATOR_MED_CHANGED                       =	(NOTIFY_MEDIATOR | 11);
#		define	NOTIFY_MEDIATOR_MED_CHANGED                       		(NOTIFY_MEDIATOR | 11)
			

#		ifdef NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                
#			undef NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                
#		endif

		literal int NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                =	(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER);
#		define	NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                		(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER)

#		ifdef NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  
#			undef NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  
#		endif

		literal int NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  =	(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER);
#		define	NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  		(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER)

#		ifdef NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                
#			undef NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                
#		endif

		literal int NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                =	(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER);
#		define	NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                		(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER)

#		ifdef NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 
#			undef NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 
#		endif

		literal int NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 =	(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER);
#		define	NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 		(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER)
			

#		ifdef NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              
#			undef NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              
#		endif

		literal int NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              =	(NOTIFY_MEDIATOR | 41);
#		define	NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              		(NOTIFY_MEDIATOR | 41)

#		ifdef NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           
#			undef NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           
#		endif

		literal int NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           =	(NOTIFY_MEDIATOR | 42);
#		define	NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           		(NOTIFY_MEDIATOR | 42)
		
		
		/**
		 * Notify mediator enumeration.
		 * Notify mediator enumeration.
		 * */
		
		/**
		 * Deviceflags for internalFlags of DeviceInfo objects
		 * Deviceflags for internalFlags of DeviceInfo objects
		 */

#		ifdef DEVICEFLAGS_INTERNAL_NATIVE_READY                 
#			undef DEVICEFLAGS_INTERNAL_NATIVE_READY                 
#		endif

		literal int DEVICEFLAGS_INTERNAL_NATIVE_READY                 =	(0x1);
#		define	DEVICEFLAGS_INTERNAL_NATIVE_READY                 		(0x1)

#		ifdef DEVICEFLAGS_INTERNAL_PLATFORM_READY               
#			undef DEVICEFLAGS_INTERNAL_PLATFORM_READY               
#		endif

		literal int DEVICEFLAGS_INTERNAL_PLATFORM_READY               =	(0x2);
#		define	DEVICEFLAGS_INTERNAL_PLATFORM_READY               		(0x2)

#		ifdef DEVICEFLAGS_INTERNAL_OBSERVER_READY               
#			undef DEVICEFLAGS_INTERNAL_OBSERVER_READY               
#		endif

		literal int DEVICEFLAGS_INTERNAL_OBSERVER_READY               =	(0x4);
#		define	DEVICEFLAGS_INTERNAL_OBSERVER_READY               		(0x4)

#		ifdef DEVICEFLAGS_INTERNAL_MESSAGE_READY                
#			undef DEVICEFLAGS_INTERNAL_MESSAGE_READY                
#		endif

		literal int DEVICEFLAGS_INTERNAL_MESSAGE_READY                =	(0x8);
#		define	DEVICEFLAGS_INTERNAL_MESSAGE_READY                		(0x8)

#		ifdef DEVICEFLAGS_INTERNAL_DATA_READY                   
#			undef DEVICEFLAGS_INTERNAL_DATA_READY                   
#		endif

		literal int DEVICEFLAGS_INTERNAL_DATA_READY                   =	(0x10);
#		define	DEVICEFLAGS_INTERNAL_DATA_READY                   		(0x10)

#		ifdef DEVICEFLAGS_INTERNAL_SENSOR_READY                 
#			undef DEVICEFLAGS_INTERNAL_SENSOR_READY                 
#		endif

		literal int DEVICEFLAGS_INTERNAL_SENSOR_READY                 =	(0x20);
#		define	DEVICEFLAGS_INTERNAL_SENSOR_READY                 		(0x20)

#		ifdef DEVICEFLAGS_INTERNAL_NOTIFY_MASK                  
#			undef DEVICEFLAGS_INTERNAL_NOTIFY_MASK                  
#		endif

		literal int DEVICEFLAGS_INTERNAL_NOTIFY_MASK                  =	(0xFF);
#		define	DEVICEFLAGS_INTERNAL_NOTIFY_MASK                  		(0xFF)

#		ifdef DEVICEFLAGS_INTERNAL_CP_NATIVE_READY              
#			undef DEVICEFLAGS_INTERNAL_CP_NATIVE_READY              
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_NATIVE_READY              =	(0x0100);
#		define	DEVICEFLAGS_INTERNAL_CP_NATIVE_READY              		(0x0100)

#		ifdef DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY            
#			undef DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY            
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY            =	(0x0200);
#		define	DEVICEFLAGS_INTERNAL_CP_PLATFORM_READY            		(0x0200)

#		ifdef DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY            
#			undef DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY            
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY            =	(0x0400);
#		define	DEVICEFLAGS_INTERNAL_CP_OBSERVER_READY            		(0x0400)

#		ifdef DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY             
#			undef DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY             
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY             =	(0x0800);
#		define	DEVICEFLAGS_INTERNAL_CP_MESSAGE_READY             		(0x0800)

#		ifdef DEVICEFLAGS_INTERNAL_CP_DATA_READY                
#			undef DEVICEFLAGS_INTERNAL_CP_DATA_READY                
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_DATA_READY                =	(0x1000);
#		define	DEVICEFLAGS_INTERNAL_CP_DATA_READY                		(0x1000)

#		ifdef DEVICEFLAGS_INTERNAL_CP_SENSOR_READY              
#			undef DEVICEFLAGS_INTERNAL_CP_SENSOR_READY              
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_SENSOR_READY              =	(0x2000);
#		define	DEVICEFLAGS_INTERNAL_CP_SENSOR_READY              		(0x2000)

#		ifdef DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK               
#			undef DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK               
#		endif

		literal int DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK               =	(0xFF00);
#		define	DEVICEFLAGS_INTERNAL_CP_NOTIFY_MASK               		(0xFF00)
		
		
		/**
		 * Deviceflags for internalFlags enumeration.
		 * Deviceflags for internalFlags enumeration.
		 * */
		
		
		/**
		 * Environs network notifications
		 * Environs network notifications
		 */

#		ifdef NOTIFY_NETWORK                                    
#			undef NOTIFY_NETWORK                                    
#		endif

		literal int NOTIFY_NETWORK                                    =	(NOTIFY_TYPE_ENVIRONS | 0x2000);
#		define	NOTIFY_NETWORK                                    		(NOTIFY_TYPE_ENVIRONS | 0x2000)

#		ifdef NOTIFY_NETWORK_CHANGED                            
#			undef NOTIFY_NETWORK_CHANGED                            
#		endif

		literal int NOTIFY_NETWORK_CHANGED                            =	(NOTIFY_NETWORK | 0x1);
#		define	NOTIFY_NETWORK_CHANGED                            		(NOTIFY_NETWORK | 0x1)
		
		/**
		 * Notify network enumeration.
		 * Notify network enumeration.
		 * */
		
		/** Ignore: for Resolver */

#		ifdef META_MSG_IDENT                                    
#			undef META_MSG_IDENT                                    
#		endif

		literal String ^  META_MSG_IDENT                                    =	("~META~:");
#		define	META_MSG_IDENT                                    		("~META~:")
		/** Ignore: for Resolver */

#		ifdef META_MSG_NAME_ID                                  
#			undef META_MSG_NAME_ID                                  
#		endif

		literal String ^  META_MSG_NAME_ID                                  =	(" NAME ");
#		define	META_MSG_NAME_ID                                  		(" NAME ")
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_DEFAULT_AREA_NAME                        
#			undef ENVIRONS_DEFAULT_AREA_NAME                        
#		endif

		literal String ^  ENVIRONS_DEFAULT_AREA_NAME                        =	("Environs");
#		define	ENVIRONS_DEFAULT_AREA_NAME                        		("Environs")
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_DEFAULT_APP_NAME                         
#			undef ENVIRONS_DEFAULT_APP_NAME                         
#		endif

		literal String ^  ENVIRONS_DEFAULT_APP_NAME                         =	("HCMDefaultApp");
#		define	ENVIRONS_DEFAULT_APP_NAME                         		("HCMDefaultApp")
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_DEFAULT_DEVICE_NAME                      
#			undef ENVIRONS_DEFAULT_DEVICE_NAME                      
#		endif

		literal String ^  ENVIRONS_DEFAULT_DEVICE_NAME                      =	("DefaultDevice");
#		define	ENVIRONS_DEFAULT_DEVICE_NAME                      		("DefaultDevice")
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_STUNT_MAX_TRY                            
#			undef ENVIRONS_STUNT_MAX_TRY                            
#		endif

		literal int ENVIRONS_STUNT_MAX_TRY                            =	(15);
#		define	ENVIRONS_STUNT_MAX_TRY                            		(15)
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_STUN_MAX_TRY                             
#			undef ENVIRONS_STUN_MAX_TRY                             
#		endif

		literal int ENVIRONS_STUN_MAX_TRY                             =	(10);
#		define	ENVIRONS_STUN_MAX_TRY                             		(10)
		
		
		/**
		 * Environs network notifications
		 * Environs network notifications
		 */

#		ifdef NOTIFY_TRACKER                                    
#			undef NOTIFY_TRACKER                                    
#		endif

		literal int NOTIFY_TRACKER                                    =	(NOTIFY_TYPE_ENVIRONS | 0x4000);
#		define	NOTIFY_TRACKER                                    		(NOTIFY_TYPE_ENVIRONS | 0x4000)
		

#		ifdef NOTIFY_TRACKER_FAILED_FLAG                        
#			undef NOTIFY_TRACKER_FAILED_FLAG                        
#		endif

		literal int NOTIFY_TRACKER_FAILED_FLAG                        =	(0x8);
#		define	NOTIFY_TRACKER_FAILED_FLAG                        		(0x8)
		

#		ifdef NOTIFY_TRACKER_ENABLED                            
#			undef NOTIFY_TRACKER_ENABLED                            
#		endif

		literal int NOTIFY_TRACKER_ENABLED                            =	(NOTIFY_TRACKER | 0x1);
#		define	NOTIFY_TRACKER_ENABLED                            		(NOTIFY_TRACKER | 0x1)

#		ifdef NOTIFY_TRACKER_CHANGED                            
#			undef NOTIFY_TRACKER_CHANGED                            
#		endif

		literal int NOTIFY_TRACKER_CHANGED                            =	(NOTIFY_TRACKER | 0x2);
#		define	NOTIFY_TRACKER_CHANGED                            		(NOTIFY_TRACKER | 0x2)

#		ifdef NOTIFY_TRACKER_DISABLED                           
#			undef NOTIFY_TRACKER_DISABLED                           
#		endif

		literal int NOTIFY_TRACKER_DISABLED                           =	(NOTIFY_TRACKER | 0x4);
#		define	NOTIFY_TRACKER_DISABLED                           		(NOTIFY_TRACKER | 0x4)

#		ifdef NOTIFY_TRACKER_ENABLE_FAILED                      
#			undef NOTIFY_TRACKER_ENABLE_FAILED                      
#		endif

		literal int NOTIFY_TRACKER_ENABLE_FAILED                      =	(NOTIFY_TRACKER | NOTIFY_TRACKER_FAILED_FLAG);
#		define	NOTIFY_TRACKER_ENABLE_FAILED                      		(NOTIFY_TRACKER | NOTIFY_TRACKER_FAILED_FLAG)
		

#		ifdef NOTIFY_TRACKER_STATE_INIT_SENSOR                  
#			undef NOTIFY_TRACKER_STATE_INIT_SENSOR                  
#		endif

		literal int NOTIFY_TRACKER_STATE_INIT_SENSOR                  =	(NOTIFY_TRACKER | 0x10);
#		define	NOTIFY_TRACKER_STATE_INIT_SENSOR                  		(NOTIFY_TRACKER | 0x10)

#		ifdef NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           
#			undef NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           
#		endif

		literal int NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           =	(NOTIFY_TRACKER_STATE_INIT_SENSOR | NOTIFY_TRACKER_FAILED_FLAG);
#		define	NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           		(NOTIFY_TRACKER_STATE_INIT_SENSOR | NOTIFY_TRACKER_FAILED_FLAG)

#		ifdef NOTIFY_TRACKER_STATE_START                        
#			undef NOTIFY_TRACKER_STATE_START                        
#		endif

		literal int NOTIFY_TRACKER_STATE_START                        =	(NOTIFY_TRACKER | 0x20);
#		define	NOTIFY_TRACKER_STATE_START                        		(NOTIFY_TRACKER | 0x20)

#		ifdef NOTIFY_TRACKER_STATE_START_FAILED                 
#			undef NOTIFY_TRACKER_STATE_START_FAILED                 
#		endif

		literal int NOTIFY_TRACKER_STATE_START_FAILED                 =	(NOTIFY_TRACKER | NOTIFY_TRACKER_STATE_START | NOTIFY_TRACKER_FAILED_FLAG);
#		define	NOTIFY_TRACKER_STATE_START_FAILED                 		(NOTIFY_TRACKER | NOTIFY_TRACKER_STATE_START | NOTIFY_TRACKER_FAILED_FLAG)

#		ifdef NOTIFY_TRACKER_STATE_STOP                         
#			undef NOTIFY_TRACKER_STATE_STOP                         
#		endif

		literal int NOTIFY_TRACKER_STATE_STOP                         =	(NOTIFY_TRACKER | 0x40);
#		define	NOTIFY_TRACKER_STATE_STOP                         		(NOTIFY_TRACKER | 0x40)
		
		/**
		 * Notify tracker enumeration.
		 * Notify tracker enumeration.
		 * */
		
		
		/**
		 * Device types. Obsolete. Should not be used anymore.
		 * Device types. Obsolete. Should not be used anymore.
		 * Type: char
		 * Type: char
		 */

#		ifdef DEVICE_TYPE_DISPLAY                               
#			undef DEVICE_TYPE_DISPLAY                               
#		endif

		literal char DEVICE_TYPE_DISPLAY                               =	('D');
#		define	DEVICE_TYPE_DISPLAY                               		('D')

#		ifdef DEVICE_TYPE_MULTITACTION                          
#			undef DEVICE_TYPE_MULTITACTION                          
#		endif

		literal char DEVICE_TYPE_MULTITACTION                          =	('M');
#		define	DEVICE_TYPE_MULTITACTION                          		('M')

#		ifdef DEVICE_TYPE_SURFACE1                              
#			undef DEVICE_TYPE_SURFACE1                              
#		endif

		literal char DEVICE_TYPE_SURFACE1                              =	('R');
#		define	DEVICE_TYPE_SURFACE1                              		('R')

#		ifdef DEVICE_TYPE_SURFACE2                              
#			undef DEVICE_TYPE_SURFACE2                              
#		endif

		literal char DEVICE_TYPE_SURFACE2                              =	('S');
#		define	DEVICE_TYPE_SURFACE2                              		('S')

#		ifdef DEVICE_TYPE_TABLET                                
#			undef DEVICE_TYPE_TABLET                                
#		endif

		literal char DEVICE_TYPE_TABLET                                =	('T');
#		define	DEVICE_TYPE_TABLET                                		('T')

#		ifdef DEVICE_TYPE_UNKNOWN                               
#			undef DEVICE_TYPE_UNKNOWN                               
#		endif

		literal char DEVICE_TYPE_UNKNOWN                               =	('U');
#		define	DEVICE_TYPE_UNKNOWN                               		('U')

#		ifdef DEVICE_TYPE_SMARTPHONE                            
#			undef DEVICE_TYPE_SMARTPHONE                            
#		endif

		literal char DEVICE_TYPE_SMARTPHONE                            =	('P');
#		define	DEVICE_TYPE_SMARTPHONE                            		('P')
		
		
		/**
		 * Device queue commands.
		 * Device queue commands.
		 * Type: int
		 * Type: int
		 */

#		ifdef DEVICELIST_QUEUE_COMMAND_RELOAD                   
#			undef DEVICELIST_QUEUE_COMMAND_RELOAD                   
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_RELOAD                   =	(0);
#		define	DEVICELIST_QUEUE_COMMAND_RELOAD                   		(0)

#		ifdef DEVICELIST_QUEUE_COMMAND_CLEAR                    
#			undef DEVICELIST_QUEUE_COMMAND_CLEAR                    
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_CLEAR                    =	(1);
#		define	DEVICELIST_QUEUE_COMMAND_CLEAR                    		(1)

#		ifdef DEVICELIST_QUEUE_COMMAND_APPEND                   
#			undef DEVICELIST_QUEUE_COMMAND_APPEND                   
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_APPEND                   =	(2);
#		define	DEVICELIST_QUEUE_COMMAND_APPEND                   		(2)

#		ifdef DEVICELIST_QUEUE_COMMAND_UPDATE                   
#			undef DEVICELIST_QUEUE_COMMAND_UPDATE                   
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_UPDATE                   =	(3);
#		define	DEVICELIST_QUEUE_COMMAND_UPDATE                   		(3)

#		ifdef DEVICELIST_QUEUE_COMMAND_INSERT_AT                
#			undef DEVICELIST_QUEUE_COMMAND_INSERT_AT                
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_INSERT_AT                =	(4);
#		define	DEVICELIST_QUEUE_COMMAND_INSERT_AT                		(4)

#		ifdef DEVICELIST_QUEUE_COMMAND_REMOVE_AT                
#			undef DEVICELIST_QUEUE_COMMAND_REMOVE_AT                
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_REMOVE_AT                =	(5);
#		define	DEVICELIST_QUEUE_COMMAND_REMOVE_AT                		(5)

#		ifdef DEVICELIST_QUEUE_COMMAND_INSERT_CALL              
#			undef DEVICELIST_QUEUE_COMMAND_INSERT_CALL              
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_INSERT_CALL              =	(6);
#		define	DEVICELIST_QUEUE_COMMAND_INSERT_CALL              		(6)

#		ifdef DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             
#			undef DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             =	(7);
#		define	DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             		(7)

#		ifdef DEVICELIST_QUEUE_COMMAND_LOCK                     
#			undef DEVICELIST_QUEUE_COMMAND_LOCK                     
#		endif

		literal int DEVICELIST_QUEUE_COMMAND_LOCK                     =	(8);
#		define	DEVICELIST_QUEUE_COMMAND_LOCK                     		(8)
		
		
		/**
		 * Device display orientation types used in Device.Display.h
		 * Device display orientation types used in Device.Display.h
		 * Type: char
		 * Type: char
		 */

#		ifdef DISPLAY_ORIENTATION_LANDSCAPE                     
#			undef DISPLAY_ORIENTATION_LANDSCAPE                     
#		endif

		literal int DISPLAY_ORIENTATION_LANDSCAPE                     =	(0);
#		define	DISPLAY_ORIENTATION_LANDSCAPE                     		(0)

#		ifdef DISPLAY_ORIENTATION_PORTRAIT                      
#			undef DISPLAY_ORIENTATION_PORTRAIT                      
#		endif

		literal int DISPLAY_ORIENTATION_PORTRAIT                      =	(1);
#		define	DISPLAY_ORIENTATION_PORTRAIT                      		(1)
		
		
		/**
		 * Device activity / connectivity flags
		 * Device activity / connectivity flags
		 * Type: int
		 * Type: int
		 */

#		ifdef DEVICE_ACTIVITY_MAIN_CONNECTED                    
#			undef DEVICE_ACTIVITY_MAIN_CONNECTED                    
#		endif

		literal int DEVICE_ACTIVITY_MAIN_CONNECTED                    =	(0x1);
#		define	DEVICE_ACTIVITY_MAIN_CONNECTED                    		(0x1)

#		ifdef DEVICE_ACTIVITY_COMDAT_CONNECTED                  
#			undef DEVICE_ACTIVITY_COMDAT_CONNECTED                  
#		endif

		literal int DEVICE_ACTIVITY_COMDAT_CONNECTED                  =	(0x2);
#		define	DEVICE_ACTIVITY_COMDAT_CONNECTED                  		(0x2)

#		ifdef DEVICE_ACTIVITY_UDP_CONNECTED                     
#			undef DEVICE_ACTIVITY_UDP_CONNECTED                     
#		endif

		literal int DEVICE_ACTIVITY_UDP_CONNECTED                     =	(0x4);
#		define	DEVICE_ACTIVITY_UDP_CONNECTED                     		(0x4)

#		ifdef DEVICE_ACTIVITY_CONNECTED                         
#			undef DEVICE_ACTIVITY_CONNECTED                         
#		endif

		literal int DEVICE_ACTIVITY_CONNECTED                         =	(0x10);
#		define	DEVICE_ACTIVITY_CONNECTED                         		(0x10)

#		ifdef DEVICE_ACTIVITY_REQUESTOR                         
#			undef DEVICE_ACTIVITY_REQUESTOR                         
#		endif

		literal int DEVICE_ACTIVITY_REQUESTOR                         =	(0x100);
#		define	DEVICE_ACTIVITY_REQUESTOR                         		(0x100)

#		ifdef DEVICE_ACTIVITY_RESPONDER                         
#			undef DEVICE_ACTIVITY_RESPONDER                         
#		endif

		literal int DEVICE_ACTIVITY_RESPONDER                         =	(0x200);
#		define	DEVICE_ACTIVITY_RESPONDER                         		(0x200)

#		ifdef DEVICE_ACTIVITY_LISTENER_CLOSED                   
#			undef DEVICE_ACTIVITY_LISTENER_CLOSED                   
#		endif

		literal int DEVICE_ACTIVITY_LISTENER_CLOSED                   =	(0x8000);
#		define	DEVICE_ACTIVITY_LISTENER_CLOSED                   		(0x8000)

#		ifdef DEVICE_ACTIVITY_PLATFORM_DISPOSED                 
#			undef DEVICE_ACTIVITY_PLATFORM_DISPOSED                 
#		endif

		literal int DEVICE_ACTIVITY_PLATFORM_DISPOSED                 =	(0x1000);
#		define	DEVICE_ACTIVITY_PLATFORM_DISPOSED                 		(0x1000)

#		ifdef DEVICE_ACTIVITY_PLATFORM_PREDISPOSED              
#			undef DEVICE_ACTIVITY_PLATFORM_PREDISPOSED              
#		endif

		literal int DEVICE_ACTIVITY_PLATFORM_PREDISPOSED              =	(0x2000);
#		define	DEVICE_ACTIVITY_PLATFORM_PREDISPOSED              		(0x2000)

#		ifdef DEVICE_ACTIVITY_ABORTED                           
#			undef DEVICE_ACTIVITY_ABORTED                           
#		endif

		literal int DEVICE_ACTIVITY_ABORTED                           =	(0x4000);
#		define	DEVICE_ACTIVITY_ABORTED                           		(0x4000)
		

#		ifdef DEVICE_ACTIVITY_MAIN_INIT                         
#			undef DEVICE_ACTIVITY_MAIN_INIT                         
#		endif

		literal int DEVICE_ACTIVITY_MAIN_INIT                         =	(0x10000);
#		define	DEVICE_ACTIVITY_MAIN_INIT                         		(0x10000)

#		ifdef DEVICE_ACTIVITY_COMDAT_INIT                       
#			undef DEVICE_ACTIVITY_COMDAT_INIT                       
#		endif

		literal int DEVICE_ACTIVITY_COMDAT_INIT                       =	(0x20000);
#		define	DEVICE_ACTIVITY_COMDAT_INIT                       		(0x20000)

#		ifdef DEVICE_ACTIVITY_UDP_INIT                          
#			undef DEVICE_ACTIVITY_UDP_INIT                          
#		endif

		literal int DEVICE_ACTIVITY_UDP_INIT                          =	(0x40000);
#		define	DEVICE_ACTIVITY_UDP_INIT                          		(0x40000)
		
		
		/**
		 * Environs common native declarations
		 * Environs common native declarations
		 *  
		 *  
		 */

#		ifdef MEDIATOR_BUFFER_SIZE_MAX                          
#			undef MEDIATOR_BUFFER_SIZE_MAX                          
#		endif

		literal int MEDIATOR_BUFFER_SIZE_MAX                          =	(65535);
#		define	MEDIATOR_BUFFER_SIZE_MAX                          		(65535)

#		ifdef MEDIATOR_REC_BUFFER_SIZE_MAX_MOBILE               
#			undef MEDIATOR_REC_BUFFER_SIZE_MAX_MOBILE               
#		endif

		literal int MEDIATOR_REC_BUFFER_SIZE_MAX_MOBILE               =	((350 * 1024));
#		define	MEDIATOR_REC_BUFFER_SIZE_MAX_MOBILE               		((350 * 1024))

#		ifdef MEDIATOR_REC_BUFFER_SIZE_MAX_FULL                 
#			undef MEDIATOR_REC_BUFFER_SIZE_MAX_FULL                 
#		endif

		literal int MEDIATOR_REC_BUFFER_SIZE_MAX_FULL                 =	((650 * 1024));
#		define	MEDIATOR_REC_BUFFER_SIZE_MAX_FULL                 		((650 * 1024))

#		ifdef ENVIRONS_SEND_SIZE_MAX                            
#			undef ENVIRONS_SEND_SIZE_MAX                            
#		endif

		literal int ENVIRONS_SEND_SIZE_MAX                            =	((40 * 1024 * 1024));
#		define	ENVIRONS_SEND_SIZE_MAX                            		((40 * 1024 * 1024))
		
		
		
		/**
		 * Extension plugin interface type
		 * Extension plugin interface type
		 * Type: int
		 * Type: int
		 */

#		ifdef INTERFACE_TYPE_UNKNOWN                            
#			undef INTERFACE_TYPE_UNKNOWN                            
#		endif

		literal int INTERFACE_TYPE_UNKNOWN                            =	(0);
#		define	INTERFACE_TYPE_UNKNOWN                            		(0)
		/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */

#		ifdef INTERFACE_TYPE_CAPTURE                            
#			undef INTERFACE_TYPE_CAPTURE                            
#		endif

		literal int INTERFACE_TYPE_CAPTURE                            =	(1);
#		define	INTERFACE_TYPE_CAPTURE                            		(1)
		/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */

#		ifdef INTERFACE_TYPE_RENDER                             
#			undef INTERFACE_TYPE_RENDER                             
#		endif

		literal int INTERFACE_TYPE_RENDER                             =	(2);
#		define	INTERFACE_TYPE_RENDER                             		(2)
		/** An Encoder encodes the rendered image to a target format / stream. */

#		ifdef INTERFACE_TYPE_ENCODER                            
#			undef INTERFACE_TYPE_ENCODER                            
#		endif

		literal int INTERFACE_TYPE_ENCODER                            =	(3);
#		define	INTERFACE_TYPE_ENCODER                            		(3)
		/** A Decoder decodes stream packets to images */

#		ifdef INTERFACE_TYPE_DECODER                            
#			undef INTERFACE_TYPE_DECODER                            
#		endif

		literal int INTERFACE_TYPE_DECODER                            =	(4);
#		define	INTERFACE_TYPE_DECODER                            		(4)
		/** A Tracker that analyzes raw images for objects, touches, etc. */

#		ifdef INTERFACE_TYPE_TRACKER                            
#			undef INTERFACE_TYPE_TRACKER                            
#		endif

		literal int INTERFACE_TYPE_TRACKER                            =	(5);
#		define	INTERFACE_TYPE_TRACKER                            		(5)
		/** A Sensor that implements a sensor of type SensorType_t */

#		ifdef INTERFACE_TYPE_SENSOR                             
#			undef INTERFACE_TYPE_SENSOR                             
#		endif

		literal int INTERFACE_TYPE_SENSOR                             =	(6);
#		define	INTERFACE_TYPE_SENSOR                             		(6)
		/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */

#		ifdef INTERFACE_TYPE_INPUT_RECOGNIZER                   
#			undef INTERFACE_TYPE_INPUT_RECOGNIZER                   
#		endif

		literal int INTERFACE_TYPE_INPUT_RECOGNIZER                   =	(10);
#		define	INTERFACE_TYPE_INPUT_RECOGNIZER                   		(10)
		/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */

#		ifdef INTERFACE_TYPE_ORIENTATION_RECOGNIZER             
#			undef INTERFACE_TYPE_ORIENTATION_RECOGNIZER             
#		endif

		literal int INTERFACE_TYPE_ORIENTATION_RECOGNIZER             =	(11);
#		define	INTERFACE_TYPE_ORIENTATION_RECOGNIZER             		(11)
		/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */

#		ifdef INTERFACE_TYPE_EXTENSION_THREAD                   
#			undef INTERFACE_TYPE_EXTENSION_THREAD                   
#		endif

		literal int INTERFACE_TYPE_EXTENSION_THREAD                   =	(12);
#		define	INTERFACE_TYPE_EXTENSION_THREAD                   		(12)
		
		
		/** 
		 * Extension plugin interface type enumeration.
		 * Extension plugin interface type enumeration.
		 * */
		
		
		/**
		 * Capture subtype
		 * Capture subtype
		 * Type: int
		 * Type: int
		 */

#		ifdef CAPTURE_TYPE_UNKNOWN                              
#			undef CAPTURE_TYPE_UNKNOWN                              
#		endif

		literal int CAPTURE_TYPE_UNKNOWN                              =	(0);
#		define	CAPTURE_TYPE_UNKNOWN                              		(0)
		/** A screen such as the dekstop window,
		 *  where the device may cover only part of the display.
		 *  where the device may cover only part of the display.
		 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */

#		ifdef CAPTURE_TYPE_SCREEN                               
#			undef CAPTURE_TYPE_SCREEN                               
#		endif

		literal int CAPTURE_TYPE_SCREEN                               =	(1);
#		define	CAPTURE_TYPE_SCREEN                               		(1)
		/** An application window, where each device may have a different app window and may cover only part of the window. */

#		ifdef CAPTURE_TYPE_APP_WINDOW                           
#			undef CAPTURE_TYPE_APP_WINDOW                           
#		endif

		literal int CAPTURE_TYPE_APP_WINDOW                           =	(2);
#		define	CAPTURE_TYPE_APP_WINDOW                           		(2)
		/** Camera */

#		ifdef CAPTURE_TYPE_CAMERA                               
#			undef CAPTURE_TYPE_CAMERA                               
#		endif

		literal int CAPTURE_TYPE_CAMERA                               =	(6);
#		define	CAPTURE_TYPE_CAMERA                               		(6)
		
		/** 
		 * Capture subtype enumeration.
		 * Capture subtype enumeration.
		 * */
		
		
		/**
		 * Portal stage buffer data type
		 * Portal stage buffer data type
		 * Type: int
		 * Type: int
		 */

#		ifdef PORTAL_BUFFERTYPE_UNKNOWN                         
#			undef PORTAL_BUFFERTYPE_UNKNOWN                         
#		endif

		literal int PORTAL_BUFFERTYPE_UNKNOWN                         =	(0);
#		define	PORTAL_BUFFERTYPE_UNKNOWN                         		(0)
		/** Windows ARGB. */

#		ifdef PORTAL_BUFFERTYPE_ARGB                            
#			undef PORTAL_BUFFERTYPE_ARGB                            
#		endif

		literal int PORTAL_BUFFERTYPE_ARGB                            =	(0x1);
#		define	PORTAL_BUFFERTYPE_ARGB                            		(0x1)
		/** Windows ARGB and the associated HBITMAP handle. */

#		ifdef PORTAL_BUFFERTYPE_ARGB_HANDLE                     
#			undef PORTAL_BUFFERTYPE_ARGB_HANDLE                     
#		endif

		literal int PORTAL_BUFFERTYPE_ARGB_HANDLE                     =	(0x2);
#		define	PORTAL_BUFFERTYPE_ARGB_HANDLE                     		(0x2)
		/** iOS ARGB. */

#		ifdef PORTAL_BUFFERTYPE_BGRA                            
#			undef PORTAL_BUFFERTYPE_BGRA                            
#		endif

		literal int PORTAL_BUFFERTYPE_BGRA                            =	(0x3);
#		define	PORTAL_BUFFERTYPE_BGRA                            		(0x3)
		/** RGB 24bit. */

#		ifdef PORTAL_BUFFERTYPE_RGB                             
#			undef PORTAL_BUFFERTYPE_RGB                             
#		endif

		literal int PORTAL_BUFFERTYPE_RGB                             =	(0x4);
#		define	PORTAL_BUFFERTYPE_RGB                             		(0x4)
		/** BGR 24bit. */

#		ifdef PORTAL_BUFFERTYPE_BGR                             
#			undef PORTAL_BUFFERTYPE_BGR                             
#		endif

		literal int PORTAL_BUFFERTYPE_BGR                             =	(0x5);
#		define	PORTAL_BUFFERTYPE_BGR                             		(0x5)
		/** I420. */

#		ifdef PORTAL_BUFFERTYPE_YUV420                          
#			undef PORTAL_BUFFERTYPE_YUV420                          
#		endif

		literal int PORTAL_BUFFERTYPE_YUV420                          =	(0x10);
#		define	PORTAL_BUFFERTYPE_YUV420                          		(0x10)
		/** YV12. */

#		ifdef PORTAL_BUFFERTYPE_YV12                            
#			undef PORTAL_BUFFERTYPE_YV12                            
#		endif

		literal int PORTAL_BUFFERTYPE_YV12                            =	(0x12);
#		define	PORTAL_BUFFERTYPE_YV12                            		(0x12)
		/** YUY2. */

#		ifdef PORTAL_BUFFERTYPE_YUV2                            
#			undef PORTAL_BUFFERTYPE_YUV2                            
#		endif

		literal int PORTAL_BUFFERTYPE_YUV2                            =	(0x14);
#		define	PORTAL_BUFFERTYPE_YUV2                            		(0x14)
		/** NV12. */

#		ifdef PORTAL_BUFFERTYPE_NV12                            
#			undef PORTAL_BUFFERTYPE_NV12                            
#		endif

		literal int PORTAL_BUFFERTYPE_NV12                            =	(0x16);
#		define	PORTAL_BUFFERTYPE_NV12                            		(0x16)
		/** GDIBitmap. */

#		ifdef PORTAL_BUFFERTYPE_GDI_BITMAP                      
#			undef PORTAL_BUFFERTYPE_GDI_BITMAP                      
#		endif

		literal int PORTAL_BUFFERTYPE_GDI_BITMAP                      =	(0x100);
#		define	PORTAL_BUFFERTYPE_GDI_BITMAP                      		(0x100)
		/** The data follows either D3D or OpenGL texture format. */

#		ifdef PORTAL_BUFFERTYPE_TEXTURE_3D                      
#			undef PORTAL_BUFFERTYPE_TEXTURE_3D                      
#		endif

		literal int PORTAL_BUFFERTYPE_TEXTURE_3D                      =	(0x1000);
#		define	PORTAL_BUFFERTYPE_TEXTURE_3D                      		(0x1000)
		/** The data follows either D3D or OpenGL buffer format. */

#		ifdef PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  
#			undef PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  
#		endif

		literal int PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  =	(0x2000);
#		define	PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  		(0x2000)
		/** CVPixelBufferRef of apple platforms. */

#		ifdef PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              
#			undef PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              
#		endif

		literal int PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              =	(0x3000);
#		define	PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              		(0x3000)
		
		/** 
		 * Portal stage buffer data type enumeration.
		 * Portal stage buffer data type enumeration.
		 * */
		
		
		/**
		 * Capture plugin data buffer type
		 * Capture plugin data buffer type
		 * Type: int
		 * Type: int
		 */

#		ifdef CAPTURE_BUFFERTYPE_UNKNOWN                        
#			undef CAPTURE_BUFFERTYPE_UNKNOWN                        
#		endif

		literal int CAPTURE_BUFFERTYPE_UNKNOWN                        =	(0);
#		define	CAPTURE_BUFFERTYPE_UNKNOWN                        		(0)
		/** The data is stored as pixel data usually in rgba order. */

#		ifdef CAPTURE_BUFFERTYPE_PIXELBUFFER                    
#			undef CAPTURE_BUFFERTYPE_PIXELBUFFER                    
#		endif

		literal int CAPTURE_BUFFERTYPE_PIXELBUFFER                    =	(1);
#		define	CAPTURE_BUFFERTYPE_PIXELBUFFER                    		(1)
		/** The data follows either D3D or OpenGL texture format. */

#		ifdef CAPTURE_BUFFERTYPE_TEXTURE_3D                     
#			undef CAPTURE_BUFFERTYPE_TEXTURE_3D                     
#		endif

		literal int CAPTURE_BUFFERTYPE_TEXTURE_3D                     =	(10);
#		define	CAPTURE_BUFFERTYPE_TEXTURE_3D                     		(10)
		/** The data follows either D3D or OpenGL buffer format. */

#		ifdef CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 
#			undef CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 
#		endif

		literal int CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 =	(11);
#		define	CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 		(11)
		
		/**
		 * Capture plugin data buffer type enumeration.
		 * Capture plugin data buffer type enumeration.
		 * */
		
		
		/**
		 * Encoder buffer data type
		 * Encoder buffer data type
		 * Type: int
		 * Type: int
		 */

#		ifdef ENCODER_BUFFERTYPE_UNKNOWN                        
#			undef ENCODER_BUFFERTYPE_UNKNOWN                        
#		endif

		literal int ENCODER_BUFFERTYPE_UNKNOWN                        =	(0);
#		define	ENCODER_BUFFERTYPE_UNKNOWN                        		(0)
		/** Windows ARGB. */

#		ifdef ENCODER_BUFFERTYPE_ARGB                           
#			undef ENCODER_BUFFERTYPE_ARGB                           
#		endif

		literal int ENCODER_BUFFERTYPE_ARGB                           =	(1);
#		define	ENCODER_BUFFERTYPE_ARGB                           		(1)
		/** I420. */

#		ifdef ENCODER_BUFFERTYPE_YUV420                         
#			undef ENCODER_BUFFERTYPE_YUV420                         
#		endif

		literal int ENCODER_BUFFERTYPE_YUV420                         =	(10);
#		define	ENCODER_BUFFERTYPE_YUV420                         		(10)
		
		/** 
		 * Encoder buffer data type enumeration.
		 * Encoder buffer data type enumeration.
		 * */
		
		
		/**
		 * Input recognizer states
		 * Input recognizer states
		 * Type: int
		 * Type: int
		 */

#		ifdef RECOGNIZER_GIVE_BACK_INPUTS                       
#			undef RECOGNIZER_GIVE_BACK_INPUTS                       
#		endif

		literal int RECOGNIZER_GIVE_BACK_INPUTS                       =	(-1);
#		define	RECOGNIZER_GIVE_BACK_INPUTS                       		(-1)

#		ifdef RECOGNIZER_REJECT                                 
#			undef RECOGNIZER_REJECT                                 
#		endif

		literal int RECOGNIZER_REJECT                                 =	(0);
#		define	RECOGNIZER_REJECT                                 		(0)

#		ifdef RECOGNIZER_HANDLED                                
#			undef RECOGNIZER_HANDLED                                
#		endif

		literal int RECOGNIZER_HANDLED                                =	(1);
#		define	RECOGNIZER_HANDLED                                		(1)

#		ifdef RECOGNIZER_TAKEN_OVER_INPUTS                      
#			undef RECOGNIZER_TAKEN_OVER_INPUTS                      
#		endif

		literal int RECOGNIZER_TAKEN_OVER_INPUTS                      =	(2);
#		define	RECOGNIZER_TAKEN_OVER_INPUTS                      		(2)
		
		

#		ifdef NETWORK_CONNECTION_TRIGGER_UPDATE                 
#			undef NETWORK_CONNECTION_TRIGGER_UPDATE                 
#		endif

		literal int NETWORK_CONNECTION_TRIGGER_UPDATE                 =	(-3);
#		define	NETWORK_CONNECTION_TRIGGER_UPDATE                 		(-3)

#		ifdef NETWORK_CONNECTION_UNKNOWN                        
#			undef NETWORK_CONNECTION_UNKNOWN                        
#		endif

		literal int NETWORK_CONNECTION_UNKNOWN                        =	(-2);
#		define	NETWORK_CONNECTION_UNKNOWN                        		(-2)

#		ifdef NETWORK_CONNECTION_NO_NETWORK                     
#			undef NETWORK_CONNECTION_NO_NETWORK                     
#		endif

		literal int NETWORK_CONNECTION_NO_NETWORK                     =	(-1);
#		define	NETWORK_CONNECTION_NO_NETWORK                     		(-1)

#		ifdef NETWORK_CONNECTION_NO_INTERNET                    
#			undef NETWORK_CONNECTION_NO_INTERNET                    
#		endif

		literal int NETWORK_CONNECTION_NO_INTERNET                    =	(0);
#		define	NETWORK_CONNECTION_NO_INTERNET                    		(0)

#		ifdef NETWORK_CONNECTION_MOBILE_DATA                    
#			undef NETWORK_CONNECTION_MOBILE_DATA                    
#		endif

		literal int NETWORK_CONNECTION_MOBILE_DATA                    =	(1);
#		define	NETWORK_CONNECTION_MOBILE_DATA                    		(1)

#		ifdef NETWORK_CONNECTION_WIFI                           
#			undef NETWORK_CONNECTION_WIFI                           
#		endif

		literal int NETWORK_CONNECTION_WIFI                           =	(2);
#		define	NETWORK_CONNECTION_WIFI                           		(2)

#		ifdef NETWORK_CONNECTION_LAN                            
#			undef NETWORK_CONNECTION_LAN                            
#		endif

		literal int NETWORK_CONNECTION_LAN                            =	(3);
#		define	NETWORK_CONNECTION_LAN                            		(3)
		
		/**
		 * Network connection enumeration.
		 * Network connection enumeration.
		 * */
		
		

#		ifdef ERR_LEVEL                                         
#			undef ERR_LEVEL                                         
#		endif

		literal int ERR_LEVEL                                         =	(-1);
#		define	ERR_LEVEL                                         		(-1)

#		ifdef WARN_LEVEL                                        
#			undef WARN_LEVEL                                        
#		endif

		literal int WARN_LEVEL                                        =	(-2);
#		define	WARN_LEVEL                                        		(-2)
		
		

#		ifdef DEVICE_INFO_ATTR_DISPOSED                         
#			undef DEVICE_INFO_ATTR_DISPOSED                         
#		endif

		literal int DEVICE_INFO_ATTR_DISPOSED                         =	(0x1);
#		define	DEVICE_INFO_ATTR_DISPOSED                         		(0x1)

#		ifdef DEVICE_INFO_ATTR_ISCONNECTED                      
#			undef DEVICE_INFO_ATTR_ISCONNECTED                      
#		endif

		literal int DEVICE_INFO_ATTR_ISCONNECTED                      =	(0x2);
#		define	DEVICE_INFO_ATTR_ISCONNECTED                      		(0x2)

#		ifdef DEVICE_INFO_ATTR_CONNECT_PROGRESS                 
#			undef DEVICE_INFO_ATTR_CONNECT_PROGRESS                 
#		endif

		literal int DEVICE_INFO_ATTR_CONNECT_PROGRESS                 =	(0x4);
#		define	DEVICE_INFO_ATTR_CONNECT_PROGRESS                 		(0x4)

#		ifdef DEVICE_INFO_ATTR_USER_NAME                        
#			undef DEVICE_INFO_ATTR_USER_NAME                        
#		endif

		literal int DEVICE_INFO_ATTR_USER_NAME                        =	(0x10);
#		define	DEVICE_INFO_ATTR_USER_NAME                        		(0x10)
		

#		ifdef DEVICE_INFO_ATTR_IDENTITY                         
#			undef DEVICE_INFO_ATTR_IDENTITY                         
#		endif

		literal int DEVICE_INFO_ATTR_IDENTITY                         =	(0x20);
#		define	DEVICE_INFO_ATTR_IDENTITY                         		(0x20)
		

#		ifdef DEVICE_INFO_ATTR_DEVICE_PLATFORM                  
#			undef DEVICE_INFO_ATTR_DEVICE_PLATFORM                  
#		endif

		literal int DEVICE_INFO_ATTR_DEVICE_PLATFORM                  =	(0x40);
#		define	DEVICE_INFO_ATTR_DEVICE_PLATFORM                  		(0x40)

#		ifdef DEVICE_INFO_ATTR_DEVICE_TYPE                      
#			undef DEVICE_INFO_ATTR_DEVICE_TYPE                      
#		endif

		literal int DEVICE_INFO_ATTR_DEVICE_TYPE                      =	(0x41);
#		define	DEVICE_INFO_ATTR_DEVICE_TYPE                      		(0x41)

#		ifdef DEVICE_INFO_ATTR_NATIVEID                         
#			undef DEVICE_INFO_ATTR_NATIVEID                         
#		endif

		literal int DEVICE_INFO_ATTR_NATIVEID                         =	(0x80);
#		define	DEVICE_INFO_ATTR_NATIVEID                         		(0x80)

#		ifdef DEVICE_INFO_ATTR_IP                               
#			undef DEVICE_INFO_ATTR_IP                               
#		endif

		literal int DEVICE_INFO_ATTR_IP                               =	(0x100);
#		define	DEVICE_INFO_ATTR_IP                               		(0x100)

#		ifdef DEVICE_INFO_ATTR_IPE                              
#			undef DEVICE_INFO_ATTR_IPE                              
#		endif

		literal int DEVICE_INFO_ATTR_IPE                              =	(0x200);
#		define	DEVICE_INFO_ATTR_IPE                              		(0x200)

#		ifdef DEVICE_INFO_ATTR_TCP_PORT                         
#			undef DEVICE_INFO_ATTR_TCP_PORT                         
#		endif

		literal int DEVICE_INFO_ATTR_TCP_PORT                         =	(0x400);
#		define	DEVICE_INFO_ATTR_TCP_PORT                         		(0x400)

#		ifdef DEVICE_INFO_ATTR_UDP_PORT                         
#			undef DEVICE_INFO_ATTR_UDP_PORT                         
#		endif

		literal int DEVICE_INFO_ATTR_UDP_PORT                         =	(0x800);
#		define	DEVICE_INFO_ATTR_UDP_PORT                         		(0x800)

#		ifdef DEVICE_INFO_ATTR_UNAVAILABLE                      
#			undef DEVICE_INFO_ATTR_UNAVAILABLE                      
#		endif

		literal int DEVICE_INFO_ATTR_UNAVAILABLE                      =	(0x1000);
#		define	DEVICE_INFO_ATTR_UNAVAILABLE                      		(0x1000)

#		ifdef DEVICE_INFO_ATTR_BROADCAST_FOUND                  
#			undef DEVICE_INFO_ATTR_BROADCAST_FOUND                  
#		endif

		literal int DEVICE_INFO_ATTR_BROADCAST_FOUND                  =	(0x2000);
#		define	DEVICE_INFO_ATTR_BROADCAST_FOUND                  		(0x2000)

#		ifdef DEVICE_INFO_ATTR_DIRECT_CONTACT                   
#			undef DEVICE_INFO_ATTR_DIRECT_CONTACT                   
#		endif

		literal int DEVICE_INFO_ATTR_DIRECT_CONTACT                   =	(0x4000);
#		define	DEVICE_INFO_ATTR_DIRECT_CONTACT                   		(0x4000)

#		ifdef DEVICE_INFO_ATTR_APP_CONTEXT                      
#			undef DEVICE_INFO_ATTR_APP_CONTEXT                      
#		endif

		literal int DEVICE_INFO_ATTR_APP_CONTEXT                      =	(0x8000);
#		define	DEVICE_INFO_ATTR_APP_CONTEXT                      		(0x8000)

#		ifdef DEVICE_INFO_ATTR_PORTAL_CREATED                   
#			undef DEVICE_INFO_ATTR_PORTAL_CREATED                   
#		endif

		literal int DEVICE_INFO_ATTR_PORTAL_CREATED                   =	(0x10000);
#		define	DEVICE_INFO_ATTR_PORTAL_CREATED                   		(0x10000)

#		ifdef DEVICE_INFO_ATTR_OBJID                            
#			undef DEVICE_INFO_ATTR_OBJID                            
#		endif

		literal int DEVICE_INFO_ATTR_OBJID                            =	(0x20000);
#		define	DEVICE_INFO_ATTR_OBJID                            		(0x20000)

#		ifdef DEVICE_INFO_ATTR_FLAGS                            
#			undef DEVICE_INFO_ATTR_FLAGS                            
#		endif

		literal int DEVICE_INFO_ATTR_FLAGS                            =	(0x40000);
#		define	DEVICE_INFO_ATTR_FLAGS                            		(0x40000)
		
		
		/**
		 * DeviceInfoAttr attribute enumeration.
		 * DeviceInfoAttr attribute enumeration.
		 * */
		
		

#		ifdef FILE_INFO_ATTR_CREATED                            
#			undef FILE_INFO_ATTR_CREATED                            
#		endif

		literal int FILE_INFO_ATTR_CREATED                            =	(0x10000);
#		define	FILE_INFO_ATTR_CREATED                            		(0x10000)

#		ifdef FILE_INFO_ATTR_AVAILABLE                          
#			undef FILE_INFO_ATTR_AVAILABLE                          
#		endif

		literal int FILE_INFO_ATTR_AVAILABLE                          =	(0x20000);
#		define	FILE_INFO_ATTR_AVAILABLE                          		(0x20000)

#		ifdef FILE_INFO_ATTR_SEND_PROGRESS                      
#			undef FILE_INFO_ATTR_SEND_PROGRESS                      
#		endif

		literal int FILE_INFO_ATTR_SEND_PROGRESS                      =	(0x40000);
#		define	FILE_INFO_ATTR_SEND_PROGRESS                      		(0x40000)

#		ifdef FILE_INFO_ATTR_RECEIVE_PROGRESS                   
#			undef FILE_INFO_ATTR_RECEIVE_PROGRESS                   
#		endif

		literal int FILE_INFO_ATTR_RECEIVE_PROGRESS                   =	(0x80000);
#		define	FILE_INFO_ATTR_RECEIVE_PROGRESS                   		(0x80000)
		
		
		/**
		 * FileInfo attribute enumeration.
		 * FileInfo attribute enumeration.
		 * */
		

#		ifdef MESSAGE_INFO_ATTR_CREATED                         
#			undef MESSAGE_INFO_ATTR_CREATED                         
#		endif

		literal int MESSAGE_INFO_ATTR_CREATED                         =	(0x200000);
#		define	MESSAGE_INFO_ATTR_CREATED                         		(0x200000)
		
		/**
		 * MessageInfo attribute enumeration.
		 * MessageInfo attribute enumeration.
		 * */
		
		

#		ifdef APP_STATUS_ACTIVE                                 
#			undef APP_STATUS_ACTIVE                                 
#		endif

		literal int APP_STATUS_ACTIVE                                 =	(0);
#		define	APP_STATUS_ACTIVE                                 		(0)

#		ifdef APP_STATUS_SLEEPING                               
#			undef APP_STATUS_SLEEPING                               
#		endif

		literal int APP_STATUS_SLEEPING                               =	(1);
#		define	APP_STATUS_SLEEPING                               		(1)
		

#		ifdef ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               
#			undef ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               
#		endif

		literal int ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               =	(60);
#		define	ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               		(60)
		

#		ifdef MAX_TCP_SEND_PACKET_SIZE                          
#			undef MAX_TCP_SEND_PACKET_SIZE                          
#		endif

		literal int MAX_TCP_SEND_PACKET_SIZE                          =	(1200000);
#		define	MAX_TCP_SEND_PACKET_SIZE                          		(1200000)
		
		
		/**
		 * Environs detectable platform constants
		 * Environs detectable platform constants
		 * Type: int
		 * Type: int
		 */

#		ifdef ENVIRONS_PLATFORMS_UNKNOWN                        
#			undef ENVIRONS_PLATFORMS_UNKNOWN                        
#		endif

		literal int ENVIRONS_PLATFORMS_UNKNOWN                        =	(0);
#		define	ENVIRONS_PLATFORMS_UNKNOWN                        		(0)
		/** MS Surface Tabletops */

#		ifdef ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 
#			undef ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 
#		endif

		literal int ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 =	(0x1000);
#		define	ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 		(0x1000)
		/** Surface 1 tabletop */

#		ifdef ENVIRONS_PLATFORMS_MSSUR01                        
#			undef ENVIRONS_PLATFORMS_MSSUR01                        
#		endif

		literal int ENVIRONS_PLATFORMS_MSSUR01                        =	(0x1001);
#		define	ENVIRONS_PLATFORMS_MSSUR01                        		(0x1001)
		/** Samsung SUR40 PixelSense */

#		ifdef ENVIRONS_PLATFORMS_SAMSUR40                       
#			undef ENVIRONS_PLATFORMS_SAMSUR40                       
#		endif

		literal int ENVIRONS_PLATFORMS_SAMSUR40                       =	(0x1002);
#		define	ENVIRONS_PLATFORMS_SAMSUR40                       		(0x1002)
		/** iPad */

#		ifdef ENVIRONS_PLATFORMS_IPAD_FLAG                      
#			undef ENVIRONS_PLATFORMS_IPAD_FLAG                      
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD_FLAG                      =	(0x2000);
#		define	ENVIRONS_PLATFORMS_IPAD_FLAG                      		(0x2000)

#		ifdef ENVIRONS_PLATFORMS_IPAD1                          
#			undef ENVIRONS_PLATFORMS_IPAD1                          
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD1                          =	(0x2011);
#		define	ENVIRONS_PLATFORMS_IPAD1                          		(0x2011)

#		ifdef ENVIRONS_PLATFORMS_IPAD2                          
#			undef ENVIRONS_PLATFORMS_IPAD2                          
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD2                          =	(0x2021);
#		define	ENVIRONS_PLATFORMS_IPAD2                          		(0x2021)

#		ifdef ENVIRONS_PLATFORMS_IPAD2MINI                      
#			undef ENVIRONS_PLATFORMS_IPAD2MINI                      
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD2MINI                      =	(0x2022);
#		define	ENVIRONS_PLATFORMS_IPAD2MINI                      		(0x2022)

#		ifdef ENVIRONS_PLATFORMS_IPAD3                          
#			undef ENVIRONS_PLATFORMS_IPAD3                          
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD3                          =	(0x2031);
#		define	ENVIRONS_PLATFORMS_IPAD3                          		(0x2031)

#		ifdef ENVIRONS_PLATFORMS_IPAD4                          
#			undef ENVIRONS_PLATFORMS_IPAD4                          
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD4                          =	(0x2041);
#		define	ENVIRONS_PLATFORMS_IPAD4                          		(0x2041)

#		ifdef ENVIRONS_PLATFORMS_IPAD4AIR                       
#			undef ENVIRONS_PLATFORMS_IPAD4AIR                       
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD4AIR                       =	(0x2042);
#		define	ENVIRONS_PLATFORMS_IPAD4AIR                       		(0x2042)

#		ifdef ENVIRONS_PLATFORMS_IPAD4MINI                      
#			undef ENVIRONS_PLATFORMS_IPAD4MINI                      
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD4MINI                      =	(0x2043);
#		define	ENVIRONS_PLATFORMS_IPAD4MINI                      		(0x2043)

#		ifdef ENVIRONS_PLATFORMS_IPAD4MINI3                     
#			undef ENVIRONS_PLATFORMS_IPAD4MINI3                     
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD4MINI3                     =	(0x2044);
#		define	ENVIRONS_PLATFORMS_IPAD4MINI3                     		(0x2044)

#		ifdef ENVIRONS_PLATFORMS_IPAD5AIR2                      
#			undef ENVIRONS_PLATFORMS_IPAD5AIR2                      
#		endif

		literal int ENVIRONS_PLATFORMS_IPAD5AIR2                      =	(0x2051);
#		define	ENVIRONS_PLATFORMS_IPAD5AIR2                      		(0x2051)
		/** iPhones */

#		ifdef ENVIRONS_PLATFORMS_IPHONE_FLAG                    
#			undef ENVIRONS_PLATFORMS_IPHONE_FLAG                    
#		endif

		literal int ENVIRONS_PLATFORMS_IPHONE_FLAG                    =	(0x4000);
#		define	ENVIRONS_PLATFORMS_IPHONE_FLAG                    		(0x4000)

#		ifdef ENVIRONS_PLATFORMS_IPHONE4                        
#			undef ENVIRONS_PLATFORMS_IPHONE4                        
#		endif

		literal int ENVIRONS_PLATFORMS_IPHONE4                        =	(0x4041);
#		define	ENVIRONS_PLATFORMS_IPHONE4                        		(0x4041)

#		ifdef ENVIRONS_PLATFORMS_IPHONE5                        
#			undef ENVIRONS_PLATFORMS_IPHONE5                        
#		endif

		literal int ENVIRONS_PLATFORMS_IPHONE5                        =	(0x4051);
#		define	ENVIRONS_PLATFORMS_IPHONE5                        		(0x4051)

#		ifdef ENVIRONS_PLATFORMS_IPHONE6                        
#			undef ENVIRONS_PLATFORMS_IPHONE6                        
#		endif

		literal int ENVIRONS_PLATFORMS_IPHONE6                        =	(0x4061);
#		define	ENVIRONS_PLATFORMS_IPHONE6                        		(0x4061)

#		ifdef ENVIRONS_PLATFORMS_IPHONE6P                       
#			undef ENVIRONS_PLATFORMS_IPHONE6P                       
#		endif

		literal int ENVIRONS_PLATFORMS_IPHONE6P                       =	(0x4062);
#		define	ENVIRONS_PLATFORMS_IPHONE6P                       		(0x4062)
		/** MultiTaction Cells */

#		ifdef ENVIRONS_PLATFORMS_MULTITACTION_FLAG              
#			undef ENVIRONS_PLATFORMS_MULTITACTION_FLAG              
#		endif

		literal int ENVIRONS_PLATFORMS_MULTITACTION_FLAG              =	(0x8000);
#		define	ENVIRONS_PLATFORMS_MULTITACTION_FLAG              		(0x8000)
		/** MultiTaction Cell 55. */

#		ifdef ENVIRONS_PLATFORMS_MULTITACTION55                 
#			undef ENVIRONS_PLATFORMS_MULTITACTION55                 
#		endif

		literal int ENVIRONS_PLATFORMS_MULTITACTION55                 =	(0x8055);
#		define	ENVIRONS_PLATFORMS_MULTITACTION55                 		(0x8055)
		

#		ifdef ENVIRONS_PLATFORMS_OSX_FLAG                       
#			undef ENVIRONS_PLATFORMS_OSX_FLAG                       
#		endif

		literal int ENVIRONS_PLATFORMS_OSX_FLAG                       =	(0x10000);
#		define	ENVIRONS_PLATFORMS_OSX_FLAG                       		(0x10000)

#		ifdef ENVIRONS_PLATFORMS_MACBOOK_FLAG                   
#			undef ENVIRONS_PLATFORMS_MACBOOK_FLAG                   
#		endif

		literal int ENVIRONS_PLATFORMS_MACBOOK_FLAG                   =	(0x10010);
#		define	ENVIRONS_PLATFORMS_MACBOOK_FLAG                   		(0x10010)

#		ifdef ENVIRONS_PLATFORMS_MACMINI_FLAG                   
#			undef ENVIRONS_PLATFORMS_MACMINI_FLAG                   
#		endif

		literal int ENVIRONS_PLATFORMS_MACMINI_FLAG                   =	(0x10020);
#		define	ENVIRONS_PLATFORMS_MACMINI_FLAG                   		(0x10020)
		

#		ifdef ENVIRONS_PLATFORMS_LINUX_FLAG                     
#			undef ENVIRONS_PLATFORMS_LINUX_FLAG                     
#		endif

		literal int ENVIRONS_PLATFORMS_LINUX_FLAG                     =	(0x40000);
#		define	ENVIRONS_PLATFORMS_LINUX_FLAG                     		(0x40000)

#		ifdef ENVIRONS_PLATFORMS_RASPBERRY                      
#			undef ENVIRONS_PLATFORMS_RASPBERRY                      
#		endif

		literal int ENVIRONS_PLATFORMS_RASPBERRY                      =	(0x40100);
#		define	ENVIRONS_PLATFORMS_RASPBERRY                      		(0x40100)
		

#		ifdef ENVIRONS_PLATFORMS_WINDOWS_FLAG                   
#			undef ENVIRONS_PLATFORMS_WINDOWS_FLAG                   
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWS_FLAG                   =	(0x20000);
#		define	ENVIRONS_PLATFORMS_WINDOWS_FLAG                   		(0x20000)

#		ifdef ENVIRONS_PLATFORMS_WINDOWSVISTA                   
#			undef ENVIRONS_PLATFORMS_WINDOWSVISTA                   
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWSVISTA                   =	(0x20050);
#		define	ENVIRONS_PLATFORMS_WINDOWSVISTA                   		(0x20050)

#		ifdef ENVIRONS_PLATFORMS_WINDOWSXP                      
#			undef ENVIRONS_PLATFORMS_WINDOWSXP                      
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWSXP                      =	(0x20060);
#		define	ENVIRONS_PLATFORMS_WINDOWSXP                      		(0x20060)

#		ifdef ENVIRONS_PLATFORMS_WINDOWS7                       
#			undef ENVIRONS_PLATFORMS_WINDOWS7                       
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWS7                       =	(0x20070);
#		define	ENVIRONS_PLATFORMS_WINDOWS7                       		(0x20070)

#		ifdef ENVIRONS_PLATFORMS_WINDOWS8                       
#			undef ENVIRONS_PLATFORMS_WINDOWS8                       
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWS8                       =	(0x20080);
#		define	ENVIRONS_PLATFORMS_WINDOWS8                       		(0x20080)

#		ifdef ENVIRONS_PLATFORMS_WINDOWS10                      
#			undef ENVIRONS_PLATFORMS_WINDOWS10                      
#		endif

		literal int ENVIRONS_PLATFORMS_WINDOWS10                      =	(0x20100);
#		define	ENVIRONS_PLATFORMS_WINDOWS10                      		(0x20100)
		

#		ifdef ENVIRONS_PLATFORMS_TABLET_FLAG                    
#			undef ENVIRONS_PLATFORMS_TABLET_FLAG                    
#		endif

		literal int ENVIRONS_PLATFORMS_TABLET_FLAG                    =	(0x100000);
#		define	ENVIRONS_PLATFORMS_TABLET_FLAG                    		(0x100000)

#		ifdef ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                
#			undef ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                
#		endif

		literal int ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                =	(0x200000);
#		define	ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                		(0x200000)

#		ifdef ENVIRONS_PLATFORMS_TABLETOP_FLAG                  
#			undef ENVIRONS_PLATFORMS_TABLETOP_FLAG                  
#		endif

		literal int ENVIRONS_PLATFORMS_TABLETOP_FLAG                  =	(0x400000);
#		define	ENVIRONS_PLATFORMS_TABLETOP_FLAG                  		(0x400000)

#		ifdef ENVIRONS_PLATFORMS_DISPLAY_FLAG                   
#			undef ENVIRONS_PLATFORMS_DISPLAY_FLAG                   
#		endif

		literal int ENVIRONS_PLATFORMS_DISPLAY_FLAG                   =	(0x800000);
#		define	ENVIRONS_PLATFORMS_DISPLAY_FLAG                   		(0x800000)
		

#		ifdef ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              
#			undef ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              
#		endif

		literal int ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              =	(0x1000000);
#		define	ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              		(0x1000000)
		
		/**
		 * Environs detectable platforms.
		 * Environs detectable platforms.
		 * */
		
		/*
		 * Mediator device class types used for GetDevicesFrom ( type )
		 * Mediator device class types used for GetDevicesFrom ( type )
		 */

#		ifdef MEDIATOR_DEVICE_CLASS_ALL                         
#			undef MEDIATOR_DEVICE_CLASS_ALL                         
#		endif

		literal int MEDIATOR_DEVICE_CLASS_ALL                         =	(0);
#		define	MEDIATOR_DEVICE_CLASS_ALL                         		(0)

#		ifdef MEDIATOR_DEVICE_CLASS_NEARBY                      
#			undef MEDIATOR_DEVICE_CLASS_NEARBY                      
#		endif

		literal int MEDIATOR_DEVICE_CLASS_NEARBY                      =	(1);
#		define	MEDIATOR_DEVICE_CLASS_NEARBY                      		(1)

#		ifdef MEDIATOR_DEVICE_CLASS_MEDIATOR                    
#			undef MEDIATOR_DEVICE_CLASS_MEDIATOR                    
#		endif

		literal int MEDIATOR_DEVICE_CLASS_MEDIATOR                    =	(2);
#		define	MEDIATOR_DEVICE_CLASS_MEDIATOR                    		(2)
		
		/*
		 * Crypt declarations
		 * Crypt declarations
		 */

#		ifdef ENVIRONS_DEVICES_KEYSIZE                          
#			undef ENVIRONS_DEVICES_KEYSIZE                          
#		endif

		literal int ENVIRONS_DEVICES_KEYSIZE                          =	(2048);
#		define	ENVIRONS_DEVICES_KEYSIZE                          		(2048)

#		ifdef ENVIRONS_CRYPT_PAD_OAEP                           
#			undef ENVIRONS_CRYPT_PAD_OAEP                           
#		endif

		literal int ENVIRONS_CRYPT_PAD_OAEP                           =	((1 << 24));
#		define	ENVIRONS_CRYPT_PAD_OAEP                           		((1 << 24))

#		ifdef ENVIRONS_CRYPT_PAD_PKCS1                          
#			undef ENVIRONS_CRYPT_PAD_PKCS1                          
#		endif

		literal int ENVIRONS_CRYPT_PAD_PKCS1                          =	((2 << 24));
#		define	ENVIRONS_CRYPT_PAD_PKCS1                          		((2 << 24))

#		ifdef ENVIRONS_CRYPT_PAD_PKCS1SHA1                      
#			undef ENVIRONS_CRYPT_PAD_PKCS1SHA1                      
#		endif

		literal int ENVIRONS_CRYPT_PAD_PKCS1SHA1                      =	((4 << 24));
#		define	ENVIRONS_CRYPT_PAD_PKCS1SHA1                      		((4 << 24))

#		ifdef ENVIRONS_CRYPT_PAD_PKCS1SHA256                    
#			undef ENVIRONS_CRYPT_PAD_PKCS1SHA256                    
#		endif

		literal int ENVIRONS_CRYPT_PAD_PKCS1SHA256                    =	((8 << 24));
#		define	ENVIRONS_CRYPT_PAD_PKCS1SHA256                    		((8 << 24))
		

#		ifdef MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   
#			undef MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   
#		endif

		literal int MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   =	(0x1FFFF);
#		define	MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   		(0x1FFFF)

#		ifdef DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  
#			undef DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  
#		endif

		literal int DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  =	(MEDIATOR_CLIENT_MAX_BUFFER_SIZE);
#		define	DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  		(MEDIATOR_CLIENT_MAX_BUFFER_SIZE)
		
		
		/**
		 * Mediator device class types enumeration.
		 * Mediator device class types enumeration.
		 * */
		
		/**
		 * Environs call flags
		 * Environs call flags
		 * Type: int
		 * Type: int
		 */

#		ifdef CALL_WAIT                                         
#			undef CALL_WAIT                                         
#		endif

		literal int CALL_WAIT                                         =	(0);
#		define	CALL_WAIT                                         		(0)

#		ifdef CALL_NOWAIT                                       
#			undef CALL_NOWAIT                                       
#		endif

		literal int CALL_NOWAIT                                       =	(1);
#		define	CALL_NOWAIT                                       		(1)
		
		
		/**
		 * Environs call enumeration.
		 * Environs call enumeration.
		 * */
		
		
		/**
		 * Environs RENDER_CALLBACK_TYPES
		 * Environs RENDER_CALLBACK_TYPES
		 * Type: int
		 * Type: int
		 */

#		ifdef RENDER_CALLBACK_TYPE_ALL                          
#			undef RENDER_CALLBACK_TYPE_ALL                          
#		endif

		literal int RENDER_CALLBACK_TYPE_ALL                          =	(0);
#		define	RENDER_CALLBACK_TYPE_ALL                          		(0)
		/** Call back with received ByteBuffer */

#		ifdef RENDER_CALLBACK_TYPE_INIT                         
#			undef RENDER_CALLBACK_TYPE_INIT                         
#		endif

		literal int RENDER_CALLBACK_TYPE_INIT                         =	(0x10);
#		define	RENDER_CALLBACK_TYPE_INIT                         		(0x10)
		/** Call back with EnvironsAVContext */

#		ifdef RENDER_CALLBACK_TYPE_AVCONTEXT                    
#			undef RENDER_CALLBACK_TYPE_AVCONTEXT                    
#		endif

		literal int RENDER_CALLBACK_TYPE_AVCONTEXT                    =	(0x20);
#		define	RENDER_CALLBACK_TYPE_AVCONTEXT                    		(0x20)
		/** Call back with IPortalDecoder */

#		ifdef RENDER_CALLBACK_TYPE_DECODER                      
#			undef RENDER_CALLBACK_TYPE_DECODER                      
#		endif

		literal int RENDER_CALLBACK_TYPE_DECODER                      =	(0x40);
#		define	RENDER_CALLBACK_TYPE_DECODER                      		(0x40)
		/** Call back with received ByteBuffer */

#		ifdef RENDER_CALLBACK_TYPE_IMAGE                        
#			undef RENDER_CALLBACK_TYPE_IMAGE                        
#		endif

		literal int RENDER_CALLBACK_TYPE_IMAGE                        =	(0x80);
#		define	RENDER_CALLBACK_TYPE_IMAGE                        		(0x80)
		
		/**
		 * Environs RENDER_CALLBACK_TYPES enumeration.
		 * Environs RENDER_CALLBACK_TYPES enumeration.
		 * */
		
		/**
		 * Environs AVCONTEXT_TYPES
		 * Environs AVCONTEXT_TYPES
		 * Type: int
		 * Type: int
		 */

#		ifdef DECODER_AVCONTEXT_TYPE_PIXELS                     
#			undef DECODER_AVCONTEXT_TYPE_PIXELS                     
#		endif

		literal int DECODER_AVCONTEXT_TYPE_PIXELS                     =	(0);
#		define	DECODER_AVCONTEXT_TYPE_PIXELS                     		(0)

#		ifdef DECODER_AVCONTEXT_TYPE_AVCONTEXT                  
#			undef DECODER_AVCONTEXT_TYPE_AVCONTEXT                  
#		endif

		literal int DECODER_AVCONTEXT_TYPE_AVCONTEXT                  =	(RENDER_CALLBACK_TYPE_AVCONTEXT);
#		define	DECODER_AVCONTEXT_TYPE_AVCONTEXT                  		(RENDER_CALLBACK_TYPE_AVCONTEXT)

#		ifdef DECODER_AVCONTEXT_TYPE_JPG                        
#			undef DECODER_AVCONTEXT_TYPE_JPG                        
#		endif

		literal int DECODER_AVCONTEXT_TYPE_JPG                        =	(2);
#		define	DECODER_AVCONTEXT_TYPE_JPG                        		(2)

#		ifdef DECODER_AVCONTEXT_TYPE_PNG                        
#			undef DECODER_AVCONTEXT_TYPE_PNG                        
#		endif

		literal int DECODER_AVCONTEXT_TYPE_PNG                        =	(3);
#		define	DECODER_AVCONTEXT_TYPE_PNG                        		(3)
		
		/**
		 * Environs AVCONTEXT_TYPES enumeration.
		 * Environs AVCONTEXT_TYPES enumeration.
		 * */
		
		/**
		 * Environs AVCONTEXT_SUBTYPES
		 * Environs AVCONTEXT_SUBTYPES
		 * Type: int
		 * Type: int
		 */

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    =	(0);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    		(0)

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   =	(1);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   		(1)

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   =	(2);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   		(2)
		

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    =	(6);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    		(6)

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   =	(7);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   		(7)

#		ifdef ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   
#			undef ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   
#		endif

		literal int ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   =	(8);
#		define	ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   		(8)
		

#		ifdef TYPES_SEPERATOR_2_ENVIRONS                        
#			undef TYPES_SEPERATOR_2_ENVIRONS                        
#		endif

		literal int TYPES_SEPERATOR_2_ENVIRONS                        =	(0);
#		define	TYPES_SEPERATOR_2_ENVIRONS                        		(0)
		
		/**
		 * Environs SENSOR_TYPES
		 * Environs SENSOR_TYPES
		 * Type: int
		 * Type: int
		 */

#		ifdef ENVIRONS_SENSOR_TYPE_ACCELEROMETER                
#			undef ENVIRONS_SENSOR_TYPE_ACCELEROMETER                
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ACCELEROMETER                =	(0);
#		define	ENVIRONS_SENSOR_TYPE_ACCELEROMETER                		(0)

#		ifdef ENVIRONS_SENSOR_TYPE_ACCELERATION                 
#			undef ENVIRONS_SENSOR_TYPE_ACCELERATION                 
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ACCELERATION                 =	(1);
#		define	ENVIRONS_SENSOR_TYPE_ACCELERATION                 		(1)

#		ifdef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                
#			undef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                
#		endif

		literal int ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                =	(2);
#		define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                		(2)

#		ifdef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION         
#			undef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION         
#		endif

		literal int ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION         =	(3);
#		define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_MOTION         		(3)

#		ifdef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB        
#			undef ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB        
#		endif

		literal int ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB        =	(4);
#		define	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD_UNCALIB        		(4)

#		ifdef ENVIRONS_SENSOR_TYPE_GYROSCOPE                    
#			undef ENVIRONS_SENSOR_TYPE_GYROSCOPE                    
#		endif

		literal int ENVIRONS_SENSOR_TYPE_GYROSCOPE                    =	(5);
#		define	ENVIRONS_SENSOR_TYPE_GYROSCOPE                    		(5)

#		ifdef ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB            
#			undef ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB            
#		endif

		literal int ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB            =	(6);
#		define	ENVIRONS_SENSOR_TYPE_GYROSCOPE_UNCALIB            		(6)

#		ifdef ENVIRONS_SENSOR_TYPE_ORIENTATION                  
#			undef ENVIRONS_SENSOR_TYPE_ORIENTATION                  
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ORIENTATION                  =	(7);
#		define	ENVIRONS_SENSOR_TYPE_ORIENTATION                  		(7)

#		ifdef ENVIRONS_SENSOR_TYPE_LIGHT                        
#			undef ENVIRONS_SENSOR_TYPE_LIGHT                        
#		endif

		literal int ENVIRONS_SENSOR_TYPE_LIGHT                        =	(8);
#		define	ENVIRONS_SENSOR_TYPE_LIGHT                        		(8)

#		ifdef ENVIRONS_SENSOR_TYPE_LOCATION                     
#			undef ENVIRONS_SENSOR_TYPE_LOCATION                     
#		endif

		literal int ENVIRONS_SENSOR_TYPE_LOCATION                     =	(9);
#		define	ENVIRONS_SENSOR_TYPE_LOCATION                     		(9)

#		ifdef ENVIRONS_SENSOR_TYPE_HEADING                      
#			undef ENVIRONS_SENSOR_TYPE_HEADING                      
#		endif

		literal int ENVIRONS_SENSOR_TYPE_HEADING                      =	(10);
#		define	ENVIRONS_SENSOR_TYPE_HEADING                      		(10)

#		ifdef ENVIRONS_SENSOR_TYPE_TEMPERATURE                  
#			undef ENVIRONS_SENSOR_TYPE_TEMPERATURE                  
#		endif

		literal int ENVIRONS_SENSOR_TYPE_TEMPERATURE                  =	(11);
#		define	ENVIRONS_SENSOR_TYPE_TEMPERATURE                  		(11)

#		ifdef ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT           
#			undef ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT           
#		endif

		literal int ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT           =	(12);
#		define	ENVIRONS_SENSOR_TYPE_MOTION_SIGNIFICANT           		(12)

#		ifdef ENVIRONS_SENSOR_TYPE_PRESSURE                     
#			undef ENVIRONS_SENSOR_TYPE_PRESSURE                     
#		endif

		literal int ENVIRONS_SENSOR_TYPE_PRESSURE                     =	(13);
#		define	ENVIRONS_SENSOR_TYPE_PRESSURE                     		(13)

#		ifdef ENVIRONS_SENSOR_TYPE_ATTITUDE                     
#			undef ENVIRONS_SENSOR_TYPE_ATTITUDE                     
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ATTITUDE                     =	(14);
#		define	ENVIRONS_SENSOR_TYPE_ATTITUDE                     		(14)

#		ifdef ENVIRONS_SENSOR_TYPE_ROTATION                     
#			undef ENVIRONS_SENSOR_TYPE_ROTATION                     
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ROTATION                     =	(15);
#		define	ENVIRONS_SENSOR_TYPE_ROTATION                     		(15)

#		ifdef ENVIRONS_SENSOR_TYPE_ROTATION_GAME                
#			undef ENVIRONS_SENSOR_TYPE_ROTATION_GAME                
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ROTATION_GAME                =	(16);
#		define	ENVIRONS_SENSOR_TYPE_ROTATION_GAME                		(16)

#		ifdef ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC         
#			undef ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC         
#		endif

		literal int ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC         =	(17);
#		define	ENVIRONS_SENSOR_TYPE_ROTATION_GEOMAGNETIC         		(17)

#		ifdef ENVIRONS_SENSOR_TYPE_GRAVITY                      
#			undef ENVIRONS_SENSOR_TYPE_GRAVITY                      
#		endif

		literal int ENVIRONS_SENSOR_TYPE_GRAVITY                      =	(18);
#		define	ENVIRONS_SENSOR_TYPE_GRAVITY                      		(18)

#		ifdef ENVIRONS_SENSOR_TYPE_STEPPER                      
#			undef ENVIRONS_SENSOR_TYPE_STEPPER                      
#		endif

		literal int ENVIRONS_SENSOR_TYPE_STEPPER                      =	(10);
#		define	ENVIRONS_SENSOR_TYPE_STEPPER                      		(10)

#		ifdef ENVIRONS_SENSOR_TYPE_STEPS                        
#			undef ENVIRONS_SENSOR_TYPE_STEPS                        
#		endif

		literal int ENVIRONS_SENSOR_TYPE_STEPS                        =	(20);
#		define	ENVIRONS_SENSOR_TYPE_STEPS                        		(20)

#		ifdef ENVIRONS_SENSOR_TYPE_TILT                         
#			undef ENVIRONS_SENSOR_TYPE_TILT                         
#		endif

		literal int ENVIRONS_SENSOR_TYPE_TILT                         =	(21);
#		define	ENVIRONS_SENSOR_TYPE_TILT                         		(21)

#		ifdef ENVIRONS_SENSOR_TYPE_HEARTRATE                    
#			undef ENVIRONS_SENSOR_TYPE_HEARTRATE                    
#		endif

		literal int ENVIRONS_SENSOR_TYPE_HEARTRATE                    =	(22);
#		define	ENVIRONS_SENSOR_TYPE_HEARTRATE                    		(22)

#		ifdef ENVIRONS_SENSOR_TYPE_PROXIMITY                    
#			undef ENVIRONS_SENSOR_TYPE_PROXIMITY                    
#		endif

		literal int ENVIRONS_SENSOR_TYPE_PROXIMITY                    =	(23);
#		define	ENVIRONS_SENSOR_TYPE_PROXIMITY                    		(23)

#		ifdef ENVIRONS_SENSOR_TYPE_VOC                          
#			undef ENVIRONS_SENSOR_TYPE_VOC                          
#		endif

		literal int ENVIRONS_SENSOR_TYPE_VOC                          =	(24);
#		define	ENVIRONS_SENSOR_TYPE_VOC                          		(24)

#		ifdef ENVIRONS_SENSOR_TYPE_CO2                          
#			undef ENVIRONS_SENSOR_TYPE_CO2                          
#		endif

		literal int ENVIRONS_SENSOR_TYPE_CO2                          =	(25);
#		define	ENVIRONS_SENSOR_TYPE_CO2                          		(25)

#		ifdef ENVIRONS_SENSOR_TYPE_HUMIDITY                     
#			undef ENVIRONS_SENSOR_TYPE_HUMIDITY                     
#		endif

		literal int ENVIRONS_SENSOR_TYPE_HUMIDITY                     =	(26);
#		define	ENVIRONS_SENSOR_TYPE_HUMIDITY                     		(26)

#		ifdef ENVIRONS_SENSOR_TYPE_CUSTOM                       
#			undef ENVIRONS_SENSOR_TYPE_CUSTOM                       
#		endif

		literal int ENVIRONS_SENSOR_TYPE_CUSTOM                       =	(27);
#		define	ENVIRONS_SENSOR_TYPE_CUSTOM                       		(27)

#		ifdef ENVIRONS_SENSOR_TYPE_MAX                          
#			undef ENVIRONS_SENSOR_TYPE_MAX                          
#		endif

		literal int ENVIRONS_SENSOR_TYPE_MAX                          =	(28);
#		define	ENVIRONS_SENSOR_TYPE_MAX                          		(28)
		
		/**
		 * Sensor type enumeration.
		 * Sensor type enumeration.
		 * */
		
		
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_SENSOR_PACK_TYPE_EXT                     
#			undef ENVIRONS_SENSOR_PACK_TYPE_EXT                     
#		endif

		literal int ENVIRONS_SENSOR_PACK_TYPE_EXT                     =	(0x40000000);
#		define	ENVIRONS_SENSOR_PACK_TYPE_EXT                     		(0x40000000)
		/** Ignore: for Resolver */

#		ifdef ENVIRONS_SENSOR_PACK_TYPE_DOUBLES                 
#			undef ENVIRONS_SENSOR_PACK_TYPE_DOUBLES                 
#		endif

		literal int ENVIRONS_SENSOR_PACK_TYPE_DOUBLES                 =	(0x80000000);
#		define	ENVIRONS_SENSOR_PACK_TYPE_DOUBLES                 		(0x80000000)
		
		
		/**
		 * Sensor type bit field declarations.
		 * Sensor type bit field declarations.
		 * If number of sensor flags exceed the 32 Bitfield, then another complete FLAG2 type has to be used.
		 * If number of sensor flags exceed the 32 Bitfield, then another complete FLAG2 type has to be used.
		 *
		 *
		 * */

#		ifdef ENVIRONS_SENSOR_FLAG_ACCELEROMETER                
#			undef ENVIRONS_SENSOR_FLAG_ACCELEROMETER                
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ACCELEROMETER                =	(0x1);
#		define	ENVIRONS_SENSOR_FLAG_ACCELEROMETER                		(0x1)

#		ifdef ENVIRONS_SENSOR_FLAG_ACCELERATION                 
#			undef ENVIRONS_SENSOR_FLAG_ACCELERATION                 
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ACCELERATION                 =	(0x2);
#		define	ENVIRONS_SENSOR_FLAG_ACCELERATION                 		(0x2)

#		ifdef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                
#			undef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                
#		endif

		literal int ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                =	(0x4);
#		define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                		(0x4)

#		ifdef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_MOTION         
#			undef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_MOTION         
#		endif

		literal int ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_MOTION         =	(0x8);
#		define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_MOTION         		(0x8)

#		ifdef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_UNCALIB        
#			undef ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_UNCALIB        
#		endif

		literal int ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_UNCALIB        =	(0x10);
#		define	ENVIRONS_SENSOR_FLAG_MAGNETICFIELD_UNCALIB        		(0x10)

#		ifdef ENVIRONS_SENSOR_FLAG_GYROSCOPE                    
#			undef ENVIRONS_SENSOR_FLAG_GYROSCOPE                    
#		endif

		literal int ENVIRONS_SENSOR_FLAG_GYROSCOPE                    =	(0x20);
#		define	ENVIRONS_SENSOR_FLAG_GYROSCOPE                    		(0x20)

#		ifdef ENVIRONS_SENSOR_FLAG_GYROSCOPE_UNCALIB            
#			undef ENVIRONS_SENSOR_FLAG_GYROSCOPE_UNCALIB            
#		endif

		literal int ENVIRONS_SENSOR_FLAG_GYROSCOPE_UNCALIB            =	(0x40);
#		define	ENVIRONS_SENSOR_FLAG_GYROSCOPE_UNCALIB            		(0x40)

#		ifdef ENVIRONS_SENSOR_FLAG_ORIENTATION                  
#			undef ENVIRONS_SENSOR_FLAG_ORIENTATION                  
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ORIENTATION                  =	(0x80);
#		define	ENVIRONS_SENSOR_FLAG_ORIENTATION                  		(0x80)

#		ifdef ENVIRONS_SENSOR_FLAG_LIGHT                        
#			undef ENVIRONS_SENSOR_FLAG_LIGHT                        
#		endif

		literal int ENVIRONS_SENSOR_FLAG_LIGHT                        =	(0x100);
#		define	ENVIRONS_SENSOR_FLAG_LIGHT                        		(0x100)

#		ifdef ENVIRONS_SENSOR_FLAG_LOCATION                     
#			undef ENVIRONS_SENSOR_FLAG_LOCATION                     
#		endif

		literal int ENVIRONS_SENSOR_FLAG_LOCATION                     =	(0x200);
#		define	ENVIRONS_SENSOR_FLAG_LOCATION                     		(0x200)

#		ifdef ENVIRONS_SENSOR_FLAG_HEADING                      
#			undef ENVIRONS_SENSOR_FLAG_HEADING                      
#		endif

		literal int ENVIRONS_SENSOR_FLAG_HEADING                      =	(0x400);
#		define	ENVIRONS_SENSOR_FLAG_HEADING                      		(0x400)

#		ifdef ENVIRONS_SENSOR_FLAG_TEMPERATURE                  
#			undef ENVIRONS_SENSOR_FLAG_TEMPERATURE                  
#		endif

		literal int ENVIRONS_SENSOR_FLAG_TEMPERATURE                  =	(0x800);
#		define	ENVIRONS_SENSOR_FLAG_TEMPERATURE                  		(0x800)

#		ifdef ENVIRONS_SENSOR_FLAG_MOTION_SIGNIFICANT           
#			undef ENVIRONS_SENSOR_FLAG_MOTION_SIGNIFICANT           
#		endif

		literal int ENVIRONS_SENSOR_FLAG_MOTION_SIGNIFICANT           =	(0x1000);
#		define	ENVIRONS_SENSOR_FLAG_MOTION_SIGNIFICANT           		(0x1000)

#		ifdef ENVIRONS_SENSOR_FLAG_PRESSURE                     
#			undef ENVIRONS_SENSOR_FLAG_PRESSURE                     
#		endif

		literal int ENVIRONS_SENSOR_FLAG_PRESSURE                     =	(0x2000);
#		define	ENVIRONS_SENSOR_FLAG_PRESSURE                     		(0x2000)

#		ifdef ENVIRONS_SENSOR_FLAG_ATTITUDE                     
#			undef ENVIRONS_SENSOR_FLAG_ATTITUDE                     
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ATTITUDE                     =	(0x4000);
#		define	ENVIRONS_SENSOR_FLAG_ATTITUDE                     		(0x4000)

#		ifdef ENVIRONS_SENSOR_FLAG_ROTATION                     
#			undef ENVIRONS_SENSOR_FLAG_ROTATION                     
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ROTATION                     =	(0x8000);
#		define	ENVIRONS_SENSOR_FLAG_ROTATION                     		(0x8000)

#		ifdef ENVIRONS_SENSOR_FLAG_ROTATION_GAME                
#			undef ENVIRONS_SENSOR_FLAG_ROTATION_GAME                
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ROTATION_GAME                =	(0x10000);
#		define	ENVIRONS_SENSOR_FLAG_ROTATION_GAME                		(0x10000)

#		ifdef ENVIRONS_SENSOR_FLAG_ROTATION_GEOMAGNETIC         
#			undef ENVIRONS_SENSOR_FLAG_ROTATION_GEOMAGNETIC         
#		endif

		literal int ENVIRONS_SENSOR_FLAG_ROTATION_GEOMAGNETIC         =	(0x20000);
#		define	ENVIRONS_SENSOR_FLAG_ROTATION_GEOMAGNETIC         		(0x20000)

#		ifdef ENVIRONS_SENSOR_FLAG_GRAVITY                      
#			undef ENVIRONS_SENSOR_FLAG_GRAVITY                      
#		endif

		literal int ENVIRONS_SENSOR_FLAG_GRAVITY                      =	(0x40000);
#		define	ENVIRONS_SENSOR_FLAG_GRAVITY                      		(0x40000)

#		ifdef ENVIRONS_SENSOR_FLAG_STEPPER                      
#			undef ENVIRONS_SENSOR_FLAG_STEPPER                      
#		endif

		literal int ENVIRONS_SENSOR_FLAG_STEPPER                      =	(0x80000);
#		define	ENVIRONS_SENSOR_FLAG_STEPPER                      		(0x80000)

#		ifdef ENVIRONS_SENSOR_FLAG_STEPS                        
#			undef ENVIRONS_SENSOR_FLAG_STEPS                        
#		endif

		literal int ENVIRONS_SENSOR_FLAG_STEPS                        =	(0x100000);
#		define	ENVIRONS_SENSOR_FLAG_STEPS                        		(0x100000)

#		ifdef ENVIRONS_SENSOR_FLAG_TILT                         
#			undef ENVIRONS_SENSOR_FLAG_TILT                         
#		endif

		literal int ENVIRONS_SENSOR_FLAG_TILT                         =	(0x200000);
#		define	ENVIRONS_SENSOR_FLAG_TILT                         		(0x200000)

#		ifdef ENVIRONS_SENSOR_FLAG_HEARTRATE                    
#			undef ENVIRONS_SENSOR_FLAG_HEARTRATE                    
#		endif

		literal int ENVIRONS_SENSOR_FLAG_HEARTRATE                    =	(0x400000);
#		define	ENVIRONS_SENSOR_FLAG_HEARTRATE                    		(0x400000)

#		ifdef ENVIRONS_SENSOR_FLAG_PROXIMITY                    
#			undef ENVIRONS_SENSOR_FLAG_PROXIMITY                    
#		endif

		literal int ENVIRONS_SENSOR_FLAG_PROXIMITY                    =	(0x800000);
#		define	ENVIRONS_SENSOR_FLAG_PROXIMITY                    		(0x800000)

#		ifdef ENVIRONS_SENSOR_FLAG_VOC                          
#			undef ENVIRONS_SENSOR_FLAG_VOC                          
#		endif

		literal int ENVIRONS_SENSOR_FLAG_VOC                          =	(0x1000000);
#		define	ENVIRONS_SENSOR_FLAG_VOC                          		(0x1000000)

#		ifdef ENVIRONS_SENSOR_FLAG_CO2                          
#			undef ENVIRONS_SENSOR_FLAG_CO2                          
#		endif

		literal int ENVIRONS_SENSOR_FLAG_CO2                          =	(0x2000000);
#		define	ENVIRONS_SENSOR_FLAG_CO2                          		(0x2000000)

#		ifdef ENVIRONS_SENSOR_FLAG_HUMIDITY                     
#			undef ENVIRONS_SENSOR_FLAG_HUMIDITY                     
#		endif

		literal int ENVIRONS_SENSOR_FLAG_HUMIDITY                     =	(0x4000000);
#		define	ENVIRONS_SENSOR_FLAG_HUMIDITY                     		(0x4000000)

#		ifdef ENVIRONS_SENSOR_FLAG_CUSTOM                       
#			undef ENVIRONS_SENSOR_FLAG_CUSTOM                       
#		endif

		literal int ENVIRONS_SENSOR_FLAG_CUSTOM                       =	(0x8000000);
#		define	ENVIRONS_SENSOR_FLAG_CUSTOM                       		(0x8000000)
		

#		ifdef MAX_ENVIRONS_SENSOR_TYPE_VALUE                    
#			undef MAX_ENVIRONS_SENSOR_TYPE_VALUE                    
#		endif

		literal int MAX_ENVIRONS_SENSOR_TYPE_VALUE                    =	(ENVIRONS_SENSOR_FLAG_CUSTOM);
#		define	MAX_ENVIRONS_SENSOR_TYPE_VALUE                    		(ENVIRONS_SENSOR_FLAG_CUSTOM)
		
		
		
		
		

#		ifdef ENVIRONS_WIFI_OBSERVER_INTERVAL_MIN               
#			undef ENVIRONS_WIFI_OBSERVER_INTERVAL_MIN               
#		endif

		literal int ENVIRONS_WIFI_OBSERVER_INTERVAL_MIN               =	(30000);
#		define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MIN               		(30000)

#		ifdef ENVIRONS_WIFI_OBSERVER_INTERVAL_CHECK_MIN         
#			undef ENVIRONS_WIFI_OBSERVER_INTERVAL_CHECK_MIN         
#		endif

		literal int ENVIRONS_WIFI_OBSERVER_INTERVAL_CHECK_MIN         =	(2000);
#		define	ENVIRONS_WIFI_OBSERVER_INTERVAL_CHECK_MIN         		(2000)

#		ifdef ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_MIN        
#			undef ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_MIN        
#		endif

		literal int ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_MIN        =	(20000);
#		define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_MIN        		(20000)

#		ifdef ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_CHECK_MIN  
#			undef ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_CHECK_MIN  
#		endif

		literal int ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_CHECK_MIN  =	(2000);
#		define	ENVIRONS_WIFI_OBSERVER_INTERVAL_MOBILE_CHECK_MIN  		(2000)
		
		

#		ifdef ENVIRONS_BT_OBSERVER_INTERVAL_MIN                 
#			undef ENVIRONS_BT_OBSERVER_INTERVAL_MIN                 
#		endif

		literal int ENVIRONS_BT_OBSERVER_INTERVAL_MIN                 =	(30000);
#		define	ENVIRONS_BT_OBSERVER_INTERVAL_MIN                 		(30000)

#		ifdef ENVIRONS_BT_OBSERVER_INTERVAL_CHECK_MIN           
#			undef ENVIRONS_BT_OBSERVER_INTERVAL_CHECK_MIN           
#		endif

		literal int ENVIRONS_BT_OBSERVER_INTERVAL_CHECK_MIN           =	(10000);
#		define	ENVIRONS_BT_OBSERVER_INTERVAL_CHECK_MIN           		(10000)

#		ifdef ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_MIN          
#			undef ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_MIN          
#		endif

		literal int ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_MIN          =	(20000);
#		define	ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_MIN          		(20000)

#		ifdef ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_CHECK_MIN    
#			undef ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_CHECK_MIN    
#		endif

		literal int ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_CHECK_MIN    =	(10000);
#		define	ENVIRONS_BT_OBSERVER_INTERVAL_MOBILE_CHECK_MIN    		(10000)
		
		
		/** Ignore: for CLI all the remaining content*/


	}; /// -> class TypesSource


	typedef	Status		Status_t;
	typedef	ThreadStatus		ThreadStatus_t;
	typedef	DeviceStatus		DeviceStatus_t;
	typedef	Source		Source_t;
	typedef	PortalType		PortalType_t;
	typedef	PortalStatus		PortalStatus_t;
	typedef	PortalSourceStatus		PortalSourceStatus_t;
	typedef	PortalStreamType		PortalStreamType_t;
	typedef	InputType		InputType_t;
	typedef	InputState		InputState_t;
	typedef	InputCommand		InputCommand_t;
	typedef	MediatorFilter		MediatorFilter_t;
	typedef	DeviceSourceType		DeviceSourceType_t;
	typedef	DeviceFlagsInternal		DeviceFlagsInternal_t;
	typedef	InterfaceType		InterfaceType_t;
	typedef	CaptureType		CaptureType_t;
	typedef	PortalBufferType		PortalBufferType_t;
	typedef	CaptureBufferType		CaptureBufferType_t;
	typedef	EncoderBufferType		EncoderBufferType_t;
	typedef	NetworkConnection		NetworkConnection_t;
	typedef	DeviceInfoFlag		DeviceInfoFlag_t;
	typedef	FileInfoFlag		FileInfoFlag_t;
	typedef	MessageInfoFlag		MessageInfoFlag_t;
	typedef	Platforms		Platforms_t;
	typedef	DeviceClass		DeviceClass_t;
	typedef	Call		Call_t;
	typedef	RenderCallbackType		RenderCallbackType_t;
	typedef	DecoderContextType		DecoderContextType_t;
	typedef	SensorType		SensorType_t;



} /// -> namespace environs





#endif



