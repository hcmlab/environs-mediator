/* DO NOT EDIT THIS FILE - it is machine generated by j2c.jar (see Environs.framework) */
/* Events, Types, Messages for hcm_environs Types */

/**
 * Types - This class defines integer values which are used as constant
 * for status values, events, message types and so on
 * delivered by the environment.
 * ------------------------------------------------------------------
 * Copyright (c) Chi-Tai Dang
 *
 * @author	Chi-Tai Dang
 * @version	1.0
 * @remarks
 *
 * This file is part of the Environs framework developed at the
 * Lab for Human Centered Multimedia of the University of Augsburg.
 * http://hcm-lab.de/environs
 *
 * Environ is free software; you can redistribute it and/or modify
 * it under the terms of the Eclipse Public License v1.0.
 * A copy of the license may be obtained at:
 * http://www.eclipse.org/org/documents/epl-v10.html
 * --------------------------------------------------------------------
 */
/** 
 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
 * 
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace hcm.environs
{
	/// <summary>
	/// Events, Types, Messages for hcm_environs Types 
	/// This class defines integer values which identifies status values, events, message types and so on delivered by Environs.
	/// </summary>
	public partial class Environs 
	{

			
		/**
		 * Environs native layer status
		 * Environs native layer status
		 */
		/** Uninitialized. Usually after creation of an Environs object. */
		public const int STATUS_UNINITIALIZED                              =	(0);
		/** Environs is about to be disposed. */
		public const int STATUS_DISPOSING                                  =	(1);
		/** Environs is initializing. */
		public const int STATUS_INITIALIZING                               =	(2);
		/** Environs is initialized. Usually after a call to Environs.Init() */
		public const int STATUS_INITIALIZED                                =	(3);
		/** Environs is stopped. Usually after a call to Environs.Stop() */
		public const int STATUS_STOPPED                                    =	(4);
		/** Environs is about to Stop. Thread are being shut down and allocated resources are being released. */
		public const int STATUS_STOPPING                                   =	(5);
		/** Environs is about to Start. Thread are being started and resources are being allocated. */
		public const int STATUS_STARTING                                   =	(6);
		/** Environs is started. Usually after a call to Environs.Start() */
		public const int STATUS_STARTED                                    =	(7);
		/** Environs is in connected state and connected to at least one device. */
		public const int STATUS_CONNECTED                                  =	(8);
		
		/** 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * */
		public enum Status {
			/** Uninitialized. Usually after creation of an Environs object. */
			Uninitialized       	=	STATUS_UNINITIALIZED,
			/** Environs is about to be disposed. */
			Disposing           	=	STATUS_DISPOSING,
			/** Environs is initializing. */
			Initializing        	=	STATUS_INITIALIZING,
			/** Environs is initialized. Usually after a call to Environs.Init() */
			Initialized         	=	STATUS_INITIALIZED,
			/** Environs is stopped. Usually after a call to Environs.Stop() */
			Stopped             	=	STATUS_STOPPED,
			/** Environs is about to Stop. Thread are being shut down and allocated resources are being released. */
			Stopping            	=	STATUS_STOPPING,
			/** Environs is about to Start. Thread are being started and resources are being allocated. */
			Starting            	=	STATUS_STARTING,
			/** Environs is started. Usually after a call to Environs.Start() */
			Started             	=	STATUS_STARTED,
			/** Environs is in connected state and connected to at least one device. */
			Connected           	=	STATUS_CONNECTED,
		}


		
		/** Deleteable. Device object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */
		public const int DEVICE_STATUS_DELETEABLE                          =	(0);
		/** Device object has just been created. */
		public const int DEVICE_STATUS_CREATED                             =	(2);
		/** Connect in progress. Device object has been created and the connecting task is in progress. */
		public const int DEVICE_STATUS_CONNECT_IN_PROGRESS                 =	(3);
		/** Connected. Device object is connected to the destination device and active. */
		public const int DEVICE_STATUS_CONNECTED                           =	(4);
		
		/** 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * */
		public enum DeviceStatus {
			/** Deleteable. Device object has been disabled.&nbsp; 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * */
			Deleteable          	=	DEVICE_STATUS_DELETEABLE,
			/** Device object has just been created. */
			Created             	=	DEVICE_STATUS_CREATED,
			/** Connect in progress. Device object has been created and the connecting task is in progress. */
			ConnectInProgress   	=	DEVICE_STATUS_CONNECT_IN_PROGRESS,
			/** Connected. Device object is connected to the destination device and active. */
			Connected           	=	DEVICE_STATUS_CONNECTED,
		}


			
		/* 
		 * Environs source values which determines the source of an event, data, or message.
		 * Environs source values which determines the source of an event, data, or message.
		 */
		/** Sent by native layer. */
		public const int SOURCE_NATIVE                                     =	(0);
		/** Sent by platform specific layer. */
		public const int SOURCE_PLATFORM                                   =	(1);
		/** Sent by another device within the environment.  */
		public const int SOURCE_DEVICE                                     =	(2);
		/** Sent by the app layer. */
		public const int SOURCE_APPLICATION                                =	(3);
		
		/** 
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * */
		public enum Source {
			/** Sent by native layer. */
			Native              	=	SOURCE_NATIVE,
			/** Sent by platform specific layer. */
			Platform            	=	SOURCE_PLATFORM,
			/** Sent by another device within the environment.  */
			Device              	=	SOURCE_DEVICE,
			/** Sent by the app layer. */
			Application         	=	SOURCE_APPLICATION,
		}


		
		
		public const int ENVIRONS_OBJECT_DISPOSED                          =	(-1);
		
		/* 
		 * Crypt declarations
		 * Crypt declarations
		 */
		public const int ENVIRONS_DEVICES_KEYSIZE                          =	(2048);
		public const int ENVIRONS_CRYPT_PAD_OAEP                           =	((1 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1                          =	((2 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1SHA1                      =	((4 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1SHA256                    =	((8 << 24));
		
		/* 
		 * Mediator device class types used for GetDevicesFrom ( type )
		 * Mediator device class types used for GetDevicesFrom ( type )
		 */
		public const int MEDIATOR_DEVICE_CLASS_ALL                         =	(0);
		public const int MEDIATOR_DEVICE_CLASS_NEARBY                      =	(1);
		public const int MEDIATOR_DEVICE_CLASS_MEDIATOR                    =	(2);
		
		/*
		 * Native payload type class is determined by the upper byte of payload
		 * Native payload type class is determined by the upper byte of payload
		 */
		public const int MSG_NOTIFY_ID                                     =	(0xFF00);
		public const int MSG_NOTIFY_CLASS                                  =	(0xFF0000);
			
		/*
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Type: unsigned short 0xFFFF
		 * Type: unsigned short 0xFFFF
		 */
		/** Class: Helo type */
		public const int MSG_TYPE_HELO                                     =	(0);
		// Handshake states
		public const int MSG_HANDSHAKE                                     =	(0x100);
			
		/** Main channel */
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN                                =	(MSG_HANDSHAKE | 0x10);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_REQ                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_ACK                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_FAIL                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_CLOSED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4);
		
		public const int MSG_HANDSHAKE_BULK                                =	(MSG_HANDSHAKE | 0x20);
		public const int MSG_HANDSHAKE_BULK_REQ                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 1);
		public const int MSG_HANDSHAKE_BULK_ACK                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 2);
		public const int MSG_HANDSHAKE_BULK_FAILED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 3);
		public const int MSG_HANDSHAKE_BULK_CLOSED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 4);
		
		public const int MSG_HANDSHAKE_PROC                                =	(MSG_HANDSHAKE | 0x40);
		// Former 'P'
		public const int MSG_HANDSHAKE_PORTS                               =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1);
		public const int MSG_HANDSHAKE_PORTS_ACK                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2);
		public const int MSG_HANDSHAKE_CONIG_REQ                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3);
		public const int MSG_HANDSHAKE_CONIG_RESP                          =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4);
		public const int MSG_HANDSHAKE_CONIG_RESP_ACK                      =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5);
		public const int MSG_HANDSHAKE_CONNECTED                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA);
		public const int MSG_HANDSHAKE_DISCONNECTED                        =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB);
			
		
		public const int MSG_HANDSHAKE_UDP                                 =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6);
		public const int MSG_HANDSHAKE_UDP_ACK                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7);
			
		public const int MSG_HANDSHAKE_SUCCESS                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE);
		public const int MSG_HANDSHAKE_SUCCESS_ACK                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF);
			
		public const int MSG_HANDSHAKE_SHORT_MESSAGE                       =	(MSG_HANDSHAKE | 0x81);
		public const int MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   =	(MSG_HANDSHAKE | 0x82);
		
		public const int NOTIFY_TYPE_CONNECTION                            =	((MSG_TYPE_HELO << 16));
		public const int NOTIFY_CONNECTION_MAIN_NEW                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ);
		public const int NOTIFY_CONNECTION_MAIN_ACK                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK);
		public const int NOTIFY_CONNECTION_MAIN_FAILED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL);
		public const int NOTIFY_CONNECTION_MAIN_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED);
		public const int NOTIFY_CONNECTION_BULK_NEW                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_REQ);
		public const int NOTIFY_CONNECTION_BULK_ACK                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_ACK);
		public const int NOTIFY_CONNECTION_BULK_FAILED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_FAILED);
		public const int NOTIFY_CONNECTION_BULK_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_CLOSED);
		public const int NOTIFY_CONNECTION_DATA_ACK                        =	(NOTIFY_TYPE_CONNECTION | 0xA);
		public const int NOTIFY_CONNECTION_DATA_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | 0xC);
		
		public const int NOTIFY_CONNECTION_PROGRESS                        =	(NOTIFY_TYPE_CONNECTION | 0xD);
			
		public const int NOTIFY_CONNECTION_ESTABLISHED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS);
		public const int NOTIFY_CONNECTION_ESTABLISHED_ACK                 =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK);
		public const int NOTIFY_CONNECTION_CLOSED                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED);
			
		public const int NOTIFY_SHORT_MESSAGE                              =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE);
		public const int NOTIFY_SHORT_MESSAGE_ACK                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK);
			
			
		// Stream types
		public const int DATA_STREAM                                       =	(0x200);
		public const int DATA_STREAM_INIT                                  =	(1);
		
		public const int DATA_STREAM_IFRAME                                =	(0x400);
		
		/** Class: Image type */
		public const int MSG_TYPE_IMAGE                                    =	(1);
		// 0x10
		public const int DATA_STREAM_IMAGE                                 =	(MSG_TYPE_IMAGE << 4);
		public const int DATA_STREAM_IMAGE_INIT                            =	(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT);
		public const int DATA_STREAM_IMAGE_DATA                            =	(DATA_STREAM | DATA_STREAM_IMAGE | 8);
		public const int DATA_STREAM_IMAGE_JPEG                            =	(DATA_STREAM_IMAGE_DATA | 2);
		public const int DATA_STREAM_IMAGE_PNG                             =	(DATA_STREAM_IMAGE_DATA | 4);
		
		/** Class: Video type */
		public const int MSG_TYPE_STREAM                                   =	(2);
		// 0x20
		public const int DATA_STREAM_H264                                  =	(MSG_TYPE_STREAM << 4);
		// Initialization protocol version 1 packet with width and height
		public const int DATA_STREAM_H264_INIT                             =	(DATA_STREAM | DATA_STREAM_H264 | DATA_STREAM_INIT);
		// Header packets of h264
		public const int DATA_STREAM_H264_HDR                              =	(DATA_STREAM | DATA_STREAM_H264 | 2);
		public const int DATA_STREAM_H264_NAL                              =	(DATA_STREAM | DATA_STREAM_H264 | 4);
		public const int DATA_STREAM_H264_NALUS                            =	(DATA_STREAM | DATA_STREAM_H264 | 8);
		/*
		 * Native file types to app
		 * Native file types to app
		 */
		public const int MSG_TYPE_FILE                                     =	(3);
		/** Class: File type */
		// File types
		public const int NATIVE_FILE_TYPE                                  =	(0x400);
		public const int NATIVE_FILE_TYPE_APP_DEFINED                      =	(NATIVE_FILE_TYPE);
		public const int NATIVE_FILE_TYPE_EXT_DEFINED                      =	(NATIVE_FILE_TYPE | 1);
		public const int NATIVE_FILE_TYPE_CHUNKED                          =	(NATIVE_FILE_TYPE | 6);
		public const int NATIVE_FILE_TYPE_ACK                              =	(NATIVE_FILE_TYPE | 0xF);
		
		public const int MSG_TYPE_MESSAGE                                  =	(4);
		public const int MESSAGE_FROM_APP                                  =	(0x800);
		public const int MESSAGE_APP_STRING                                =	(MESSAGE_FROM_APP | 1);
		
		
		public const int NOTIFY_TYPE_FILE                                  =	((MSG_TYPE_FILE << 16));
		public const int NOTIFY_TYPE_FILE_PROGRESS                         =	(NOTIFY_TYPE_FILE | 0x20);
		
		public const int NOTIFY_FILE_SEND_PROGRESS                         =	(NOTIFY_TYPE_FILE_PROGRESS | 1);
		public const int NOTIFY_FILE_RECEIVE_PROGRESS                      =	(NOTIFY_TYPE_FILE_PROGRESS | 2);
		/** 
		 * Portal Source Status enumeration.
		 * Portal Source Status enumeration.
		 * */
		public enum PortalStatus {
			/** Deleteable. The portal object has been disabled.&nbsp; 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * */
			Deleteable          	=	0,
			/** The portal has just been created. */
			Created             	=	1,
			/** Initialized. The portal is initialized, that is the resources (threads, plugins, the pipeline) has been established or are ready to use */
			Initialized         	=	2,
			/** Active. The portal is initialized and actively streaming. */
			Active              	=	3,
		}


		
		/** Class: Portal constants */
		public const int MAX_PORTAL_STREAMS_A_DEVICE                       =	(3);
		public const int MAX_PORTAL_CONTEXTS                               =	(3);
		public const int MAX_PORTAL_OVERLAYS                               =	(3);
		public const int MAX_PORTAL_GENERATOR_SLOTS                        =	(5);
		public const int MAX_PORTAL_REQUEST_WAIT_TIME_MS                   =	(30000);
		
		
		
		/** Class: Portal type */
		public const int PORTAL_TYPE_ANY                                   =	(0);
		public const int PORTAL_TYPE_SCREEN                                =	(0x1000);
		public const int PORTAL_TYPE_BACK_CAM                              =	(0x2000);
		public const int PORTAL_TYPE_FRONT_CAM                             =	(0x4000);
		public const int PORTAL_TYPE_MASK                                  =	(0xF000);
			
		/** 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * */
		public enum PortalType {
			/** Any type. The requested portal can be of any type. Which one depends on the application logic.
			 * */
			Any                 	=	PORTAL_TYPE_ANY,
			/** The devices screen. */
			Screen              	=	PORTAL_TYPE_SCREEN,
			/** The back facing camera. */
			BackCam             	=	PORTAL_TYPE_BACK_CAM,
			/** The front facing camera. */
			FrontCam            	=	PORTAL_TYPE_FRONT_CAM,
		}


		
		/** Class: Portal stream type */
		public const int STREAMTYPE_UNKNOWN                                =	(0);
		public const int STREAMTYPE_IMAGES                                 =	(0x10);
		public const int STREAMTYPE_IMAGES_JPEG                            =	(STREAMTYPE_IMAGES | 0x1);
		public const int STREAMTYPE_IMAGES_PNG                             =	(STREAMTYPE_IMAGES | 0x2);
		public const int STREAMTYPE_VIDEO                                  =	(0x20);
		public const int STREAMTYPE_VIDEO_H264                             =	(STREAMTYPE_VIDEO | 0x1);
			
		/** 
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * */
		public enum PortalStreamType {
			Unknown             	=	STREAMTYPE_UNKNOWN,
			/** Sequence of jpeg images. 	*/
			Images              	=	STREAMTYPE_IMAGES,
			/** Sequence of jpeg images. 	*/
			ImagesJPEG          	=	STREAMTYPE_IMAGES_JPEG,
			/** Sequence of png images. 	*/
			ImagesPNG           	=	STREAMTYPE_IMAGES_PNG,
			/** Video stream. 						*/
			Video               	=	STREAMTYPE_VIDEO,
			/** Video stream H264. 						*/
			VideoH264           	=	STREAMTYPE_VIDEO_H264,
		}


		
		/** Class: PortalInfo flag bits */
		public const int PORTAL_INFO_FLAG_LOCATION                         =	(0x1);
		public const int PORTAL_INFO_FLAG_ANGLE                            =	(0x2);
		public const int PORTAL_INFO_FLAG_SIZE                             =	(0x4);
			
		
		/** Class: Portal messages and notifications */
		public const int MSG_TYPE_PORTAL                                   =	(5);
		public const int MSG_PORTAL_ERROR                                  =	(0x400);
		public const int PORTAL_DIR_INCOMING                               =	(0x200);
		public const int PORTAL_DIR_OUTGOING                               =	(0x100);
		public const int PORTAL_DIR_MASK                                   =	(0x300);
		public const int NOTIFY_PORTAL                                     =	(0x800);
		
		
	// Portal message subtypes
		public const int MSG_PORTAL_REQUEST_ID                             =	(0);
		public const int MSG_PORTAL_REQUEST                                =	(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID);
		public const int MSG_PORTAL_PROVIDE_STREAM_ID                      =	(1);
		public const int MSG_PORTAL_PROVIDE_STREAM                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID);
		public const int MSG_PORTAL_PROVIDE_IMAGES_ID                      =	(2);
		public const int MSG_PORTAL_PROVIDE_IMAGES                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID);
		public const int MSG_PORTAL_REQUEST_FAIL_ID                        =	(3);
		public const int MSG_PORTAL_REQUEST_FAIL                           =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID);
			
		public const int MSG_PORTAL_STOP_ID                                =	(4);
		public const int MSG_PORTAL_STOP                                   =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID);
		public const int MSG_PORTAL_STOP_ACK_ID                            =	(5);
		public const int MSG_PORTAL_STOP_ACK                               =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID);
		public const int MSG_PORTAL_STOP_FAIL_ID                           =	(6);
		public const int MSG_PORTAL_STOP_FAIL                              =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID);
		public const int MSG_PORTAL_START_ID                               =	(7);
		public const int MSG_PORTAL_START                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID);
		public const int MSG_PORTAL_START_ACK_ID                           =	(8);
		public const int MSG_PORTAL_START_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID);
		public const int MSG_PORTAL_START_FAIL_ID                          =	(9);
		public const int MSG_PORTAL_START_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID);
		public const int MSG_PORTAL_PAUSE_ID                               =	(10);
		public const int MSG_PORTAL_PAUSE                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID);
		public const int MSG_PORTAL_PAUSE_ACK_ID                           =	(11);
		public const int MSG_PORTAL_PAUSE_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID);
		public const int MSG_PORTAL_PAUSE_FAIL_ID                          =	(12);
		public const int MSG_PORTAL_PAUSE_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID);
		
		
		public const int MSG_PORTAL_BUFFER_FULL_ID                         =	(13);
		public const int MSG_PORTAL_BUFFER_FULL                            =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID);
		public const int MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  =	(14);
		public const int MSG_PORTAL_BUFFER_AVAIL_AGAIN                     =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID);
		public const int MSG_PORTAL_IFRAME_REQUEST_ID                      =	(15);
		public const int MSG_PORTAL_IFRAME_REQUEST                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID);
		
		public const int MSG_PORTAL_MAX_COUNT                              =	(15 + 1);
		
		
		public const int NOTIFY_TYPE_PORTAL                                =	((MSG_TYPE_PORTAL << 16));
		
		public const int NOTIFY_PORTAL_REQUEST                             =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST);
		public const int NOTIFY_PORTAL_STREAM_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_IMAGES_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_RECEIVER_READY                      =	(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING);
		public const int NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING);
		public const int NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING);
		public const int NOTIFY_PORTAL_PROVIDER_READY                      =	(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK);
		public const int NOTIFY_PORTAL_REQUEST_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_PROVIDE_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING);
			
		public const int NOTIFY_PORTAL_STREAM_STARTED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK);
		public const int NOTIFY_PORTAL_STREAM_PAUSED                       =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK);
		public const int NOTIFY_PORTAL_STREAM_STOPPED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK);
		
		public const int NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             =	(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF);
		
		
		/**
		 * Environs options set/get messages
		 * Environs options set/get messages
		 */
		/** Class: Options type */
		public const int MSG_TYPE_OPTIONS                                  =	(6);
		public const int MSG_TYPE_OPTIONS_RESPONSE                         =	(7);
		public const int MSG_OPTION_TYPE                                   =	(0xF00);
		public const int MSG_OPTION_SET                                    =	(0x100);
		public const int MSG_OPTION_GET                                    =	(0x200);
		
		// Transport options
		public const int MSG_OPTION_TRANSPORT                              =	(0x10);
		public const int MSG_OPT_TRANSP_TCP_PORTAL                         =	(MSG_OPTION_TRANSPORT | 0x1);
		public const int MSG_OPT_TRANSP_TCP_PORTAL_SET                     =	(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL);
		public const int MSG_OPT_TRANSP_TCP_PORTAL_GET                     =	(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL);
		
		// Portal options
		public const int MSG_OPTION_PORTAL                                 =	(0x20);
		public const int MSG_OPT_PORTAL_CENTER                             =	(MSG_OPTION_PORTAL | 0x1);
		public const int MSG_OPT_PORTAL_CENTER_SET                         =	(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER);
		public const int MSG_OPT_PORTAL_CENTER_GET                         =	(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER);
		public const int MSG_OPT_PORTAL_WH                                 =	(MSG_OPTION_PORTAL | 0x2);
		public const int MSG_OPT_PORTAL_WH_SET                             =	(MSG_OPTION_SET | MSG_OPT_PORTAL_WH);
		public const int MSG_OPT_PORTAL_INFO                               =	(MSG_OPTION_PORTAL | 0x4);
		public const int MSG_OPT_PORTAL_INFO_SET                           =	(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO);
		public const int MSG_OPT_PORTAL_INFO_GET                           =	(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO);
		
		// Physical contact options
		public const int MSG_OPTION_CONTACT                                =	(0x40);
		public const int MSG_OPT_CONTACT_DIRECT                            =	(MSG_OPTION_CONTACT | 0x1);
		public const int MSG_OPT_CONTACT_DIRECT_SET                        =	(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT);
		public const int MSG_OPT_CONTACT_DIRECT_GET                        =	(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT);
			
		public const int NOTIFY_TYPE_OPTIONS                               =	((MSG_TYPE_OPTIONS << 16));
		public const int NOTIFY_PORTAL_LOCATION_CHANGED                    =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET);
		public const int NOTIFY_PORTAL_SIZE_CHANGED                        =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET);
		public const int NOTIFY_CONTACT_DIRECT_CHANGED                     =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET);
		
			
		/*
		 * Environs options data identifiers for onData
		 * Environs options data identifiers for onData
		 */
			
		/*
		 * Native callback for errors
		 * Native callback for errors
		 */
		public const int NOTIFY_TOUCHSOURCE                                =	(0x40);
		public const int NOTIFY_TOUCHSOURCE_STARTED                        =	(NOTIFY_TOUCHSOURCE | 2);
		public const int NOTIFY_TOUCHSOURCE_STOPPED                        =	(NOTIFY_TOUCHSOURCE | 4);
			
		public const int NOTIFY_TOUCHSOURCE_NOTAVAIL                       =	(NOTIFY_TOUCHSOURCE | 8);
		public const int NOTIFY_TOUCHSOURCE_FAILED                         =	(NOTIFY_TOUCHSOURCE | 9);
		
		
		/**
		 * Environs human input declarations
		 * Environs human input declarations
		 */
		/**
		 * Input types for human input
		 * Input types for human input
		 * */
		public const int INPUT_TYPE_CURSOR                                 =	(0);
		public const int INPUT_TYPE_FINGER                                 =	(1);
		public const int INPUT_TYPE_PEN                                    =	(2);
		public const int INPUT_TYPE_MARKER                                 =	(4);
		public const int INPUT_TYPE_BLOB                                   =	(8);
			
		/**
		 * Native callback for errors
		 * Native callback for errors
		 */
		public const int NATIVE_EVENT_ERROR_MISC                           =	(0x80);
		public const int NATIVE_EVENT_DATA_CON_FAILED                      =	(NATIVE_EVENT_ERROR_MISC | 3);
		public const int NATIVE_EVENT_TOUCH_SOURCE_FAILED                  =	(NATIVE_EVENT_ERROR_MISC | 4);
		
		/**
		 * Input states for a particular human input entity
		 * Input states for a particular human input entity
		 * */
		public const int INPUT_STATE_ADD                                   =	(1);
		public const int INPUT_STATE_CHANGE                                =	(2);
		public const int INPUT_STATE_NOCHANGE                              =	(3);
		public const int INPUT_STATE_DROP                                  =	(4);
		
		/**
		 * Input commands for a particular human input entity
		 * Input commands for a particular human input entity
		 * */
		public const int INPUTSOURCE_COMMAND_INIT                          =	(0);
		public const int INPUTSOURCE_COMMAND_ADD                           =	(1);
		public const int INPUTSOURCE_COMMAND_CHANGE                        =	(2);
		public const int INPUTSOURCE_COMMAND_DROP                          =	(4);
		public const int INPUTSOURCE_COMMAND_CANCEL                        =	(6);
		public const int INPUTSOURCE_COMMAND_FLUSH                         =	(8);
		public const int INPUTSOURCE_COMMAND_FOLLOWUP                      =	(0x80);
		
		/**
		 * Environs Start notifications
		 * Environs Start notifications
		 */
		/** Class: Environs type */
		public const int MSG_TYPE_ENVIRONS                                 =	(8);
		public const int MSG_TYPE_MAX_COUNT                                =	(MSG_TYPE_ENVIRONS + 1);
		
		public const int NOTIFY_TYPE_ENVIRONS                              =	((MSG_TYPE_ENVIRONS << 16));
		public const int NOTIFY_START                                      =	(NOTIFY_TYPE_ENVIRONS | 0x100);
		public const int NOTIFY_START_IN_PROGRESS                          =	(NOTIFY_START | 1);
		public const int NOTIFY_START_ENABLING_WIFI                        =	(NOTIFY_START | 2);
		public const int NOTIFY_START_STREAM_DECODER                       =	(NOTIFY_START | 3);
		public const int NOTIFY_START_INIT                                 =	(NOTIFY_START | 4);
		
		public const int NOTIFY_START_INIT_FAILED                          =	(NOTIFY_START | 7);
		public const int NOTIFY_START_METHOD_FAILED                        =	(NOTIFY_START | 8);
		public const int NOTIFY_START_DECODER_FAILED                       =	(NOTIFY_START | 9);
		public const int NOTIFY_START_WIFI_FAILED                          =	(NOTIFY_START | 10);
		public const int NOTIFY_START_FAILED                               =	(NOTIFY_START | 11);
		
		public const int NOTIFY_START_INIT_SUCCESS                         =	(NOTIFY_START | 12);
		public const int NOTIFY_START_SUCCESS                              =	(NOTIFY_START | 13);
		public const int NOTIFY_START_LISTEN_SUCCESS                       =	(NOTIFY_START | 14);
		public const int NOTIFY_START_LISTENDA_SUCCESS                     =	(NOTIFY_START | 15);
		
		/**
		 * Environs Stop notifications
		 * Environs Stop notifications
		 */
		public const int NOTIFY_STOP                                       =	(NOTIFY_TYPE_ENVIRONS | 0x200);
		public const int NOTIFY_STOP_IN_PROGRESS                           =	(NOTIFY_STOP | 1);
		public const int NOTIFY_STOP_FAILED                                =	(NOTIFY_STOP | 10);
		public const int NOTIFY_STOP_SUCCESS                               =	(NOTIFY_STOP | 11);
		public const int NOTIFY_STOP_RELEASED                              =	(NOTIFY_STOP | 12);
			
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */
		public const int NOTIFY_SOCKET                                     =	(NOTIFY_TYPE_ENVIRONS | 0x400);
		public const int NOTIFY_SOCKET_BIND_FAILED                         =	(NOTIFY_SOCKET | 7);
		public const int NOTIFY_SOCKET_LISTEN_FAILED                       =	(NOTIFY_SOCKET | 8);
		public const int NOTIFY_SOCKET_FAILED                              =	(NOTIFY_SOCKET | 9);
		
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */
		public const int NOTIFY_SETTINGS                                   =	(NOTIFY_TYPE_ENVIRONS | 0x480);
		public const int NOTIFY_SETTINGS_CHANGED                           =	(NOTIFY_SETTINGS | 0x1);
			
		/**
		 * Environs device paring notifications
		 * Environs device paring notifications
		 */
		public const int NOTIFY_PAIRING                                    =	(NOTIFY_TYPE_ENVIRONS | 0x800);
		public const int NOTIFY_DEVICE_ON_SURFACE                          =	(NOTIFY_PAIRING | 1);
		public const int NOTIFY_DEVICE_NOT_ON_SURFACE                      =	(NOTIFY_PAIRING | 2);
		
		/**
		 * Environs mediator filter constants
		 * Environs mediator filter constants
		 */
		public const int MEDIATOR_FILTER_NONE                              =	(0);
		public const int MEDIATOR_FILTER_PROJECT                           =	(1);
		public const int MEDIATOR_FILTER_PROJECT_AND_APP                   =	(2);
		/// Disable all devicelist notifications
		public const int MEDIATOR_FILTER_ALL                               =	(8);
		
		
		/**
		 * Environs mediator broadcast found values
		 * Environs mediator broadcast found values
		 */
		public const int DEVICEINFO_DEVICE_MEDIATOR                        =	(0);
		public const int DEVICEINFO_DEVICE_BROADCAST                       =	(1);
		public const int DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          =	(2);
		
		/**
		 * Environs mediator broadcast message Start bytes
		 * Environs mediator broadcast message Start bytes
		 */
		public const int MEDIATOR_BROADCAST_DEVICETYPE_START               =	(11);
		public const int MEDIATOR_BROADCAST_DEVICEID_START                 =	(12);
		public const int MEDIATOR_BROADCAST_PORTS_START                    =	(20);
		public const int MEDIATOR_BROADCAST_PLATFORM_START                 =	(24);
		public const int MEDIATOR_BROADCAST_DESC_START                     =	(28);
		public const int MEDIATOR_BROADCAST_SPARE_ID_LEN                   =	(28);
		
		/**
		 * Environs DeviceInstance struct Start bytes
		 * Environs DeviceInstance struct Start bytes
		 */
		public const int MAX_NAMEPROPERTY                                  =	(30);
		public const int DEVICEINFO_DEVICEID_START                         =	(0);
		public const int DEVICEINFO_NATIVE_ID_START                        =	(4);
		public const int DEVICEINFO_IP_START                               =	(DEVICEINFO_NATIVE_ID_START + 4);
		public const int DEVICEINFO_IPe_START                              =	(DEVICEINFO_IP_START + 4);
		public const int DEVICEINFO_TCP_PORT_START                         =	(DEVICEINFO_IPe_START + 4);
		public const int DEVICEINFO_UDP_PORT_START                         =	(DEVICEINFO_TCP_PORT_START + 2);
		public const int DEVICEINFO_UPDATES_START                          =	(DEVICEINFO_UDP_PORT_START + 2);
		public const int DEVICEINFO_PLATFORM_START                         =	(DEVICEINFO_UPDATES_START + 4);
		public const int DEVICEINFO_BROADCAST_START                        =	(DEVICEINFO_PLATFORM_START + 4);
		public const int DEVICEINFO_UNAVAILABLE_START                      =	(DEVICEINFO_BROADCAST_START + 1);
		public const int DEVICEINFO_ISCONNECTED_START                      =	(DEVICEINFO_UNAVAILABLE_START + 1);
		public const int DEVICEINFO_DEVICETYPE_START                       =	(DEVICEINFO_ISCONNECTED_START + 2);
		public const int DEVICEINFO_DEVICENAME_START                       =	(DEVICEINFO_DEVICETYPE_START + 1);
		public const int DEVICEINFO_PROJECTNAME_START                      =	(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1));
		public const int DEVICEINFO_APPNAME_START                          =	(DEVICEINFO_PROJECTNAME_START + (MAX_NAMEPROPERTY + 1));
		
		
		/**
		 * Environs mediator notifications
		 * Environs mediator notifications
		 */
		public const int NOTIFY_MEDIATOR                                   =	(NOTIFY_TYPE_ENVIRONS | 0x1000);
		public const int NOTIFY_MEDIATOR_SERVER                            =	(NOTIFY_MEDIATOR | 0x100);
			
		public const int NOTIFY_MEDIATOR_DEVICE_CHANGED                    =	(NOTIFY_MEDIATOR | 1);
		public const int NOTIFY_MEDIATOR_DEVICE_ADDED                      =	(NOTIFY_MEDIATOR | 2);
		public const int NOTIFY_MEDIATOR_DEVICE_REMOVED                    =	(NOTIFY_MEDIATOR | 4);
		public const int NOTIFY_MEDIATOR_SERVER_CONNECTED                  =	(NOTIFY_MEDIATOR | 20);
		public const int NOTIFY_MEDIATOR_SERVER_DISCONNECTED               =	(NOTIFY_MEDIATOR | 21);
		
		public const int NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      =	(NOTIFY_MEDIATOR | 51);
		public const int NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               =	(NOTIFY_MEDIATOR | 52);
		
		public const int NOTIFY_MEDIATOR_MED_CHANGED                       =	(NOTIFY_MEDIATOR | 11);
			
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                =	(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  =	(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                =	(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 =	(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER);
			
		public const int NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              =	(NOTIFY_MEDIATOR | 41);
		public const int NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           =	(NOTIFY_MEDIATOR | 42);
		
		
		/**
		 * Environs network notifications
		 * Environs network notifications
		 */
		public const int NOTIFY_NETWORK                                    =	(NOTIFY_TYPE_ENVIRONS | 0x2000);
		public const int NOTIFY_NETWORK_CHANGED                            =	(NOTIFY_NETWORK | 0x1);
		
		
		/** Ignore: for Resolver */
		public const String META_MSG_IDENT                                    =	("~META~:");
		/** Ignore: for Resolver */
		public const String META_MSG_NAME_ID                                  =	(" NAME ");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_PROJECT_NAME                     =	("Environs");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_APP_NAME                         =	("HCMDefaultApp");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_DEVICE_NAME                      =	("DefaultDevice");
		
		/**
		 * Device types. Obsolete. Should not be used anymore.
		 * Device types. Obsolete. Should not be used anymore.
		 * Type: char
		 * Type: char
		 */
		public const char DEVICE_TYPE_DISPLAY                               =	('D');
		public const char DEVICE_TYPE_MULTITACTION                          =	('M');
		public const char DEVICE_TYPE_SURFACE1                              =	('R');
		public const char DEVICE_TYPE_SURFACE2                              =	('S');
		public const char DEVICE_TYPE_TABLET                                =	('T');
		public const char DEVICE_TYPE_UNKNOWN                               =	('U');
		public const char DEVICE_TYPE_SMARTPHONE                            =	('P');
		
		
		/**
		 * Device display orientation types used in Device.Display.h
		 * Device display orientation types used in Device.Display.h
		 * Type: char
		 * Type: char
		 */
		public const int DISPLAY_ORIENTATION_LANDSCAPE                     =	(0);
		public const int DISPLAY_ORIENTATION_PORTRAIT                      =	(1);
		
		
		/**
		 * Device activity / connectivity flags
		 * Device activity / connectivity flags
		 * Type: int
		 * Type: int
		 */
		public const int DEVICE_ACTIVITY_MAIN_CONNECTED                    =	(0x1);
		public const int DEVICE_ACTIVITY_BULK_CONNECTED                    =	(0x2);
		public const int DEVICE_ACTIVITY_UDP_CONNECTED                     =	(0x4);
		public const int DEVICE_ACTIVITY_CONNECTED                         =	(0x10);
		public const int DEVICE_ACTIVITY_REQUESTOR                         =	(0x100);
		public const int DEVICE_ACTIVITY_RESPONDER                         =	(0x200);
			
		/**
		 * Environs common native declarations
		 * Environs common native declarations
		 *  
		 *  
		 */
		public const int MEDIATOR_BUFFER_SIZE_MAX                          =	(65535);
		public const int ENVIRONS_SEND_SIZE_MAX                            =	((40 * 1024 * 1024));
		
		/** 
		 * Extension plugin interface type enumeration.
		 * Extension plugin interface type enumeration.
		 * */
		public enum InterfaceType {
			Unknown             	=	0,
			/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
			Capture             	=	1,
			/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
			Render              	=	2,
			/** An Encoder encodes the rendered image to a target format / stream. */
			Encoder             	=	3,
			/** A Decoder decodes stream packets to images */
			Decoder             	=	4,
			/** A Tracker that analyzes raw images for objects, touches, etc. */
			Tracker             	=	5,
			/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InputRecognizer     	=	10,
			/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			OrientationRecognizer          	=	11,
		}


		
		/** 
		 * Capture subtype enumeration.
		 * Capture subtype enumeration.
		 * */
		public enum CaptureType {
			Unknown             	=	0,
			/** A screen such as the dekstop window, 
			 *  where the device may cover only part of the display.
			 *  where the device may cover only part of the display.
			 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
			Screen              	=	1,
			/** An application window, where each device may have a different app window and may cover only part of the window. */
			AppWindow           	=	2,
			/** Camera */
			Camera              	=	6,
		}


		
		/** 
		 * Capture plugin data buffer type enumeration.
		 * Capture plugin data buffer type enumeration.
		 * */
		public enum CaptureBufferType {
			Unknown             	=	0,
			/** The data is stored as pixel data usually in rgba order. */
			PixelBuffer         	=	1,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	10,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	11,
		}


		
		/** 
		 * Portal stage buffer data type enumeration.
		 * Portal stage buffer data type enumeration.
		 * */
		public enum PortalBufferType {
			Unknown             	=	0,
			/** Windows ARGB. */
			ARGB                	=	0x1,
			/** Windows ARGB and the associated HBITMAP handle. */
			ARGBHandle          	=	0x2,
			/** iOS ARGB. */
			BGRA                	=	0x3,
			/** I420. */
			YUV420              	=	0x10,
			/** GDIBitmap. */
			GDIBitmap           	=	0x100,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	0x1000,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	0x2000,
			/** CVPixelBufferRef of apple platforms. */
			CVPixelBufferIOSX   	=	0x3000,
		}


		
		/** 
		 * Encoder buffer data type enumeration.
		 * Encoder buffer data type enumeration.
		 * */
		public enum EncoderBufferType {
			Unknown             	=	0,
			/** Windows ARGB. */
			ARGB                	=	1,
			/** I420. */
			YUV420              	=	10,
		}


		
		
		/**
		 * Input recognizer states
		 * Input recognizer states
		 * Type: int
		 * Type: int
		 */
		public const int RECOGNIZER_GIVE_BACK_INPUTS                       =	(-1);
		public const int RECOGNIZER_REJECT                                 =	(0);
		public const int RECOGNIZER_HANDLED                                =	(1);
		public const int RECOGNIZER_TAKEN_OVER_INPUTS                      =	(2);
		
		
		public const int NETWORK_CONNECTION_NO_NETWORK                     =	(-1);
		public const int NETWORK_CONNECTION_NO_INTERNET                    =	(0);
		public const int NETWORK_CONNECTION_MOBILE_DATA                    =	(1);
		public const int NETWORK_CONNECTION_WIFI                           =	(2);
		public const int NETWORK_CONNECTION_LAN                            =	(3);
			
		public const int ERR_LEVEL                                         =	(-1);
		public const int WARN_LEVEL                                        =	(-2);
		
		
		public const int DEVICE_INFO_ATTR_DISPOSED                         =	(0x1);
		public const int DEVICE_INFO_ATTR_ISCONNECTED                      =	(0x2);
		public const int DEVICE_INFO_ATTR_CONNECT_PROGRESS                 =	(0x4);
		public const int DEVICE_INFO_ATTR_USER_NAME                        =	(0x10);
		
		public const int DEVICE_INFO_ATTR_IDENTITY                         =	(0x20);
		
		public const int DEVICE_INFO_ATTR_DEVICE_PLATFORM                  =	(0x40);
		public const int DEVICE_INFO_ATTR_DEVICE_TYPE                      =	(0x40);
		public const int DEVICE_INFO_ATTR_NATIVEID                         =	(0x80);
		public const int DEVICE_INFO_ATTR_IP                               =	(0x100);
		public const int DEVICE_INFO_ATTR_IPE                              =	(0x200);
		public const int DEVICE_INFO_ATTR_TCP_PORT                         =	(0x400);
		public const int DEVICE_INFO_ATTR_UDP_PORT                         =	(0x800);
		public const int DEVICE_INFO_ATTR_UNAVAILABLE                      =	(0x1000);
		public const int DEVICE_INFO_ATTR_BROADCAST_FOUND                  =	(0x2000);
		public const int DEVICE_INFO_ATTR_DIRECT_CONTACT                   =	(0x4000);
		
		public const int DEVICE_INFO_ATTR_PORTAL_CREATED                   =	(0x10000);
			
		
		public const int APP_STATUS_ACTIVE                                 =	(0);
		public const int APP_STATUS_SLEEPING                               =	(1);
		
		public const int ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               =	(60);
		
		
		/**
		 * Environs detectable platforms.
		 * Environs detectable platforms.
		 * */
		public enum Platforms {
			Unknown             	=	0,
			/** MS Surface Tabletops */
			MSSurface_Flag      	=	0x1000,
			/** Samsung SUR40 */
			MSSUR01             	=	0x1001,
			/** Samsung SUR40 */
			SAMSUR40            	=	0x1002,
		
			/** iPad */
			iPad_Flag           	=	0x2000,
			iPad1               	=	0x2011,
			iPad2               	=	0x2021,
			iPad2Mini           	=	0x2022,
			iPad3               	=	0x2031,
			iPad4               	=	0x2041,
			iPad4Air            	=	0x2042,
			iPad4Mini           	=	0x2043,
			iPad4Mini3          	=	0x2044,
			iPad5Air2           	=	0x2051,
		
			/** iPhones */
			iPhone_Flag         	=	0x4000,
			iPhone4             	=	0x4041,
			iPhone5             	=	0x4051,
			iPhone6             	=	0x4061,
			iPhone6p            	=	0x4062,
		
			/** MultiTaction Cells */
			MultiTaction_Flag   	=	0x8000,
			/** MultiTaction Cell 55. */
			MultiTaction55      	=	0x8055,
		
			OSX_Flag            	=	0x10000,
			MacBook_Flag        	=	0x10010,
			MacMini_Flag        	=	0x10020,
		
			Windows_Flag        	=	0x20000,
			WindowsVista        	=	0x20050,
			WindowsXP           	=	0x20060,
			Windows7            	=	0x20070,
			Windows8            	=	0x20080,
		
			Tablet_Flag         	=	0x100000,
			Smartphone_Flag     	=	0x200000,
			Tabletop_Flag       	=	0x400000,
			Display_Flag        	=	0x800000,
		
		
		
		
		
		
		
		}


		
		
		/**
		 * Environs call flags
		 * Environs call flags
		 * Type: int
		 * Type: int
		 */
		public const int CALL_SYNC                                         =	(0);
		public const int CALL_ASYNC                                        =	(1);
		
		
		/**
		 * Environs RENDER_CALLBACK_TYPES
		 * Environs RENDER_CALLBACK_TYPES
		 * Type: int
		 * Type: int
		 */
		public const int RENDER_CALLBACK_TYPE_ALL                          =	(0);
		/** Call back with received ByteBuffer */
		public const int RENDER_CALLBACK_TYPE_INIT                         =	(0x10);
		/** Call back with EnvironsAVContext */
		public const int RENDER_CALLBACK_TYPE_AVCONTEXT                    =	(0x20);
		/** Call back with IPortalDecoder */
		public const int RENDER_CALLBACK_TYPE_DECODER                      =	(0x40);
		/** Call back with received ByteBuffer */
		public const int RENDER_CALLBACK_TYPE_IMAGE                        =	(0x80);
		
		
		/**
		 * Environs AVCONTEXT_TYPES
		 * Environs AVCONTEXT_TYPES
		 * Type: int
		 * Type: int
		 */
		public const int DECODER_AVCONTEXT_TYPE_PIXELS                     =	(0);
		public const int DECODER_AVCONTEXT_TYPE_AVCONTEXT                  =	(RENDER_CALLBACK_TYPE_AVCONTEXT);
		public const int DECODER_AVCONTEXT_TYPE_JPG                        =	(2);
		public const int DECODER_AVCONTEXT_TYPE_PNG                        =	(3);
		
		
		/**
		 * Environs AVCONTEXT_SUBTYPES
		 * Environs AVCONTEXT_SUBTYPES
		 * Type: int
		 * Type: int
		 */
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    =	(0);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   =	(1);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   =	(2);
		
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    =	(6);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   =	(7);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   =	(8);
		


		public static readonly string 	[] 	MSG_PORTAL_Descriptions = {
			"Portal requested",
			"Stream portal provided",
			"Image portal provided",
			"Portal request failed",
			"Portal Stop",
			"Portal Stop ack",
			"Portal Stop failed",
			"Portal Start",
			"Portal Start ack",
			"Portal Start failed",
			"Portal pause",
			"Portal pause ack",
			"Portal pause failed",
			"Portal buffer full",
			"Portal buffer available again",
			"Portal i-frame requested",
		};


	} /// -> class Types
} /// -> namespace environs

