/* DO NOT EDIT THIS FILE - it is machine generated by j2c.jar (see Environs.framework) */
/* Events, Types, Messages for environs Types */

/**
 * Types - This class defines integer values which are used as constant
 * for status values, events, message types and so on
 * delivered by the environment.
 * ------------------------------------------------------------------
 * Copyright (c) Chi-Tai Dang
 *
 * @author	Chi-Tai Dang
 * @version	1.0
 * @remarks
 *
 * This file is part of the Environs framework developed at the
 * Lab for Human Centered Multimedia of the University of Augsburg.
 * http://hcm-lab.de/environs
 *
 * Environ is free software; you can redistribute it and/or modify
 * it under the terms of the Eclipse Public License v1.0.
 * A copy of the license may be obtained at:
 * http://www.eclipse.org/org/documents/epl-v10.html
 * --------------------------------------------------------------------
 */
/** 
 * Types - This class defines integer values which identifies status values, events, message types and so on delivered by the environment.
 * @author Chi-Tai Dang, dang@hcm-lab.de, University of Augsburg
 * 
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace environs
{
	/// <summary>
	/// Events, Types, Messages for environs Types 
	/// This class defines integer values which identifies status values, events, message types and so on delivered by Environs.
	/// </summary>
	public partial class Environs 
	{

		/**
		 * Environs native layer status
		 * Environs native layer status
		 */
		/** Disposed. */
		public const int STATUS_DISPOSED                                   =	(-1);
		/** Uninitialized. Usually after creation of an Environs object. */
		public const int STATUS_UNINITIALIZED                              =	(0);
		/** Environs is about to be disposed. */
		public const int STATUS_DISPOSING                                  =	(1);
		/** Environs is initializing. */
		public const int STATUS_INITIALIZING                               =	(2);
		/** Environs is initialized. Usually after a call to Environs.Init() */
		public const int STATUS_INITIALIZED                                =	(3);
		/** Environs is stopped. Usually after a call to Environs.Stop() */
		public const int STATUS_STOPPED                                    =	(4);
		/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */
		public const int STATUS_STOP_IN_PROGRESS                           =	(5);
		/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */
		public const int STATUS_STOPPING                                   =	(6);
		/** Environs is about to Start. Thread are being started and resources are being allocated. */
		public const int STATUS_STARTING                                   =	(7);
		/** Environs is started. Usually after a call to Environs.Start() */
		public const int STATUS_STARTED                                    =	(8);
		/** Environs is in connected state and connected to at least one device. */
		public const int STATUS_CONNECTED                                  =	(9);
		
		/** 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * Environs Status enumeration. Represents the same values as for NATIVE_STATUS_* 
		 * */
		public enum Status {
			/** Disposed. */
			Disposed            	=	STATUS_DISPOSED,
			/** Uninitialized. Usually after creation of an Environs object. */
			Uninitialized       	=	STATUS_UNINITIALIZED,
			/** Environs is about to be disposed. */
			Disposing           	=	STATUS_DISPOSING,
			/** Environs is initializing. */
			Initializing        	=	STATUS_INITIALIZING,
			/** Environs is initialized. Usually after a call to Environs.Init() */
			Initialized         	=	STATUS_INITIALIZED,
			/** Environs is stopped. Usually after a call to Environs.Stop() */
			Stopped             	=	STATUS_STOPPED,
			/** Environs is currently stopping. Threads are being shut down and allocated resources are being released. */
			StopInProgress      	=	STATUS_STOP_IN_PROGRESS,
			/** Environs is about to Stop. Threads are being shut down and allocated resources are being released. */
			Stopping            	=	STATUS_STOPPING,
			/** Environs is about to Start. Thread are being started and resources are being allocated. */
			Starting            	=	STATUS_STARTING,
			/** Environs is started. Usually after a call to Environs.Start() */
			Started             	=	STATUS_STARTED,
			/** Environs is in connected state and connected to at least one device. */
			Connected           	=	STATUS_CONNECTED,
		}


		
		/**
		 * Max supported instances of Environs objects that each application can run at the same time.
		 * Max supported instances of Environs objects that each application can run at the same time.
		 * */
		public const int ENVIRONS_MAX_ENVIRONS_INSTANCES                   =	(10);
		
		/**
		 * A constant value that identifies an uninitialized display value.
		 * A constant value that identifies an uninitialized display value.
		 * */
		public const int ENVIRONS_DISPLAY_UNINITIALIZED_VALUE              =	(-1);
		
		/**
		 * Environs thread states
		 * Environs thread states
		 */
		/** Uninitialized. Usually after creation of an Environs object. */
		public const int ENVIRONS_THREAD_NO_THREAD                         =	(0);
		/** Thread is either created and not yet running or terminated. */
		public const int ENVIRONS_THREAD_DETACHEABLE                       =	(1);
		/** Thread is running. */
		public const int ENVIRONS_THREAD_RUNNING                           =	(2);
		
		
		
		/** Deleteable. Device object has been disabled.&nbsp; 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * "Garbage Collection" should dispose and delete the object on the next occasion. 
		 * */
		public const int DEVICE_STATUS_DELETEABLE                          =	(0);
		/** Device object has just been created. */
		public const int DEVICE_STATUS_CREATED                             =	(2);
		/** Connect in progress. Device object has been created and the connecting task is in progress. */
		public const int DEVICE_STATUS_CONNECT_IN_PROGRESS                 =	(3);
		/** Connected. Device object is connected to the destination device and active. */
		public const int DEVICE_STATUS_CONNECTED                           =	(4);
		
		/** 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * Device Connect Status enumeration. Represents the same values as for DEVICE_STATUS_* 
		 * */
		public enum DeviceStatus {
			/** Deleteable. Device object has been disabled.&nbsp; 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * */
			Deleteable          	=	DEVICE_STATUS_DELETEABLE,
			/** Device object has just been created. */
			Created             	=	DEVICE_STATUS_CREATED,
			/** Connect in progress. Device object has been created and the connecting task is in progress. */
			ConnectInProgress   	=	DEVICE_STATUS_CONNECT_IN_PROGRESS,
			/** Connected. Device object is connected to the destination device and active. */
			Connected           	=	DEVICE_STATUS_CONNECTED,
		}


			
		/* 
		 * Environs source values which determines the source of an event, data, or message.
		 * Environs source values which determines the source of an event, data, or message.
		 */
		/** Sent by native layer. */
		public const int SOURCE_NATIVE                                     =	(0);
		/** Sent by platform specific layer. */
		public const int SOURCE_PLATFORM                                   =	(1);
		/** Sent by another device within the environment.  */
		public const int SOURCE_DEVICE                                     =	(2);
		/** Sent by the app layer. */
		public const int SOURCE_APPLICATION                                =	(3);
		
		/** 
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Environs source values which determines the source of an event, data, or message.&nbsp;
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * Represents the same values as for ENVIRONS_SOURCE_* 
		 * */
		public enum Source {
			/** Sent by native layer. */
			Native              	=	SOURCE_NATIVE,
			/** Sent by platform specific layer. */
			Platform            	=	SOURCE_PLATFORM,
			/** Sent by another device within the environment.  */
			Device              	=	SOURCE_DEVICE,
			/** Sent by the app layer. */
			Application         	=	SOURCE_APPLICATION,
		}


		
		
		public const int ENVIRONS_OBJECT_DISPOSED                          =	(-1);
		public const int ENVIRONS_OBJECT_DISPOSED_PLATFORM                 =	(-2);
		
		/*
		 * Native payload type class is determined by the upper byte of payload
		 * Native payload type class is determined by the upper byte of payload
		 */
		public const int MSG_NOTIFY_ID                                     =	(0xFF00);
		public const int MSG_NOTIFY_CLASS                                  =	(0xFF0000);
			
		/*
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Native packet data types, first 4 bytes must confirm to one of these types
		 * Type: unsigned short 0xFFFF
		 * Type: unsigned short 0xFFFF
		 */
		/** Class: Helo type */
		public const int MSG_TYPE_HELO                                     =	(0);
		// Handshake states
		public const int MSG_HANDSHAKE                                     =	(0x100);
			
		/** Main channel */
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN                                =	(MSG_HANDSHAKE | 0x10);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_REQ                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 1);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_ACK                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 2);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_FAIL                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 3);
		// Former 'D'
		public const int MSG_HANDSHAKE_MAIN_CLOSED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_MAIN | 4);
		
		public const int MSG_HANDSHAKE_BULK                                =	(MSG_HANDSHAKE | 0x20);
		public const int MSG_HANDSHAKE_BULK_REQ                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 1);
		public const int MSG_HANDSHAKE_BULK_ACK                            =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 2);
		public const int MSG_HANDSHAKE_BULK_FAILED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 3);
		public const int MSG_HANDSHAKE_BULK_CLOSED                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_BULK | 4);
		
		public const int MSG_HANDSHAKE_PROC                                =	(MSG_HANDSHAKE | 0x40);
		// Former 'P'
		public const int MSG_HANDSHAKE_PORTS                               =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 1);
		public const int MSG_HANDSHAKE_PORTS_ACK                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 2);
		public const int MSG_HANDSHAKE_CONIG_REQ                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 3);
		public const int MSG_HANDSHAKE_CONIG_RESP                          =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 4);
		public const int MSG_HANDSHAKE_CONIG_RESP_ACK                      =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 5);
		public const int MSG_HANDSHAKE_CONNECTED                           =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xA);
		public const int MSG_HANDSHAKE_DISCONNECTED                        =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xB);
		public const int MSG_HANDSHAKE_PING                                =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xC);
			
		
		public const int MSG_HANDSHAKE_UDP                                 =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 6);
		public const int MSG_HANDSHAKE_UDP_ACK                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 7);
			
		public const int MSG_HANDSHAKE_SUCCESS                             =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xE);
		public const int MSG_HANDSHAKE_SUCCESS_ACK                         =	(MSG_HANDSHAKE | MSG_HANDSHAKE_PROC | 0xF);
			
		public const int MSG_HANDSHAKE_SHORT_MESSAGE                       =	(MSG_HANDSHAKE | 0x81);
		public const int MSG_HANDSHAKE_SHORT_MESSAGE_ACK                   =	(MSG_HANDSHAKE | 0x82);
		
		public const int NOTIFY_TYPE_CONNECTION                            =	((MSG_TYPE_HELO << 16));
		public const int NOTIFY_CONNECTION_MAIN_NEW                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_REQ);
		public const int NOTIFY_CONNECTION_MAIN_ACK                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_ACK);
		public const int NOTIFY_CONNECTION_MAIN_FAILED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_FAIL);
		public const int NOTIFY_CONNECTION_MAIN_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_MAIN_CLOSED);
		public const int NOTIFY_CONNECTION_BULK_NEW                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_REQ);
		public const int NOTIFY_CONNECTION_BULK_ACK                        =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_ACK);
		public const int NOTIFY_CONNECTION_BULK_FAILED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_FAILED);
		public const int NOTIFY_CONNECTION_BULK_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_BULK_CLOSED);
		public const int NOTIFY_CONNECTION_DATA_ACK                        =	(NOTIFY_TYPE_CONNECTION | 0xA);
		public const int NOTIFY_CONNECTION_DATA_CLOSED                     =	(NOTIFY_TYPE_CONNECTION | 0xC);
		
		public const int NOTIFY_CONNECTION_PROGRESS                        =	(NOTIFY_TYPE_CONNECTION | 0xD);
			
		public const int NOTIFY_CONNECTION_ESTABLISHED                     =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS);
		public const int NOTIFY_CONNECTION_ESTABLISHED_ACK                 =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SUCCESS_ACK);
		public const int NOTIFY_CONNECTION_CLOSED                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_DISCONNECTED);
			
		public const int NOTIFY_SHORT_MESSAGE                              =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE);
		public const int NOTIFY_SHORT_MESSAGE_ACK                          =	(NOTIFY_TYPE_CONNECTION | MSG_HANDSHAKE_SHORT_MESSAGE_ACK);
			
			
		// Stream types
		public const int DATA_STREAM                                       =	(0x200);
		public const int DATA_STREAM_INIT                                  =	(1);
		
		public const int DATA_STREAM_IFRAME                                =	(0x400);
		
		/** Class: Image type */
		public const int MSG_TYPE_IMAGE                                    =	(1);
		// 0x10
		public const int DATA_STREAM_IMAGE                                 =	(MSG_TYPE_IMAGE << 4);
		public const int DATA_STREAM_IMAGE_INIT                            =	(DATA_STREAM | DATA_STREAM_IMAGE | DATA_STREAM_INIT);
		public const int DATA_STREAM_IMAGE_DATA                            =	(DATA_STREAM | DATA_STREAM_IMAGE | 8);
		public const int DATA_STREAM_IMAGE_JPEG                            =	(DATA_STREAM_IMAGE_DATA | 2);
		public const int DATA_STREAM_IMAGE_PNG                             =	(DATA_STREAM_IMAGE_DATA | 4);
		
		/** Class: Video type */
		public const int MSG_TYPE_STREAM                                   =	(2);
		// 0x20
		public const int DATA_STREAM_H264                                  =	(MSG_TYPE_STREAM << 4);
		// Initialization protocol version 1 packet with width and height
		public const int DATA_STREAM_H264_INIT                             =	(DATA_STREAM | DATA_STREAM_H264 | DATA_STREAM_INIT);
		// Header packets of h264
		public const int DATA_STREAM_H264_HDR                              =	(DATA_STREAM | DATA_STREAM_H264 | 2);
		public const int DATA_STREAM_H264_NAL                              =	(DATA_STREAM | DATA_STREAM_H264 | 4);
		public const int DATA_STREAM_H264_NALUS                            =	(DATA_STREAM | DATA_STREAM_H264 | 8);
		
		
		/** 
		 * Portal Source Status enumeration.
		 * Portal Source Status enumeration.
		 * */
		public enum PortalStatus {
			/** Deleteable. The portal object has been disabled.&nbsp; 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * "Garbage Collection" should dispose and delete the object on the next occasion. 
			 * */
			Deleteable          	=	0,
			/** The portal has just been created. */
			Created             	=	1,
			/** Initialized. The portal is initialized, that is the resources (threads, plugins, the pipeline) has been established or are ready to use */
			Initialized         	=	2,
			/** Active. The portal is initialized and actively streaming. */
			Active              	=	3,
		}


		
		/** Class: Portal constants */
		public const int MAX_PORTAL_STREAMS_A_DEVICE                       =	(6);
		public const int MAX_PORTAL_CONTEXT_WORKERS                        =	(2);
		public const int MAX_PORTAL_OVERLAYS                               =	(6);
		public const int MAX_PORTAL_GENERATOR_SLOTS                        =	(5);
		public const int MAX_PORTAL_REQUEST_WAIT_TIME_MS                   =	(30000);
		
		
		/**
		 * A portal ID is masked as follows:
		 * A portal ID is masked as follows:
		 * 0xFFFFFFFF
		 * 0xFFFFFFFF
		 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
		 * 0xFF000000 portal map table identifier (used internal by devices to access the map)
		 * 0x0000F000 portal type
		 * 0x0000F000 portal type
		 * 0x00000300 direction
		 * 0x00000300 direction
		 * 0x000000FF portal id (the same between both devices)
		 * 0x000000FF portal id (the same between both devices)
		 */
		
		/** Class: Portal type */
		public const int PORTAL_TYPE_ANY                                   =	(0);
		public const int PORTAL_TYPE_SCREEN                                =	(0x1000);
		public const int PORTAL_TYPE_BACK_CAM                              =	(0x2000);
		public const int PORTAL_TYPE_FRONT_CAM                             =	(0x4000);
		public const int PORTAL_TYPE_MASK                                  =	(0xF000);
			
		/** 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * Portal types enumeration. Represents the same values as for PORTAL_TYPE_* 
		 * */
		public enum PortalType {
			/** Any type. The requested portal can be of any type. Which one depends on the application logic.
			 * */
			Any                 	=	PORTAL_TYPE_ANY,
			/** The devices screen. */
			Screen              	=	PORTAL_TYPE_SCREEN,
			/** The back facing camera. */
			BackCam             	=	PORTAL_TYPE_BACK_CAM,
			/** The front facing camera. */
			FrontCam            	=	PORTAL_TYPE_FRONT_CAM,
		}


		
		/** Class: Portal status */
		public const int PORTAL_STATUS_DISPOSED                            =	(ENVIRONS_OBJECT_DISPOSED);
		public const int PORTAL_STATUS_CREATED                             =	(0);
		public const int PORTAL_STATUS_CREATED_FROM_REQUEST                =	(1);
		public const int PORTAL_STATUS_CREATED_ASK_REQUEST                 =	(2);
		public const int PORTAL_STATUS_ESTABLISHED                         =	(4);
		public const int PORTAL_STATUS_STARTED                             =	(6);
		
		
		/** Class: Portal stream type */
		public const int STREAMTYPE_UNKNOWN                                =	(0);
		public const int STREAMTYPE_IMAGES                                 =	(0x10);
		public const int STREAMTYPE_IMAGES_JPEG                            =	(STREAMTYPE_IMAGES | 0x1);
		public const int STREAMTYPE_IMAGES_PNG                             =	(STREAMTYPE_IMAGES | 0x2);
		public const int STREAMTYPE_VIDEO                                  =	(0x20);
		public const int STREAMTYPE_VIDEO_H264                             =	(STREAMTYPE_VIDEO | 0x1);
			
		/** 
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * Portal stream type enumeration. Represents the same values as for STREAMTYPE_*
		 * */
		public enum PortalStreamType {
			Unknown             	=	STREAMTYPE_UNKNOWN,
			/** Sequence of jpeg images. 	*/
			Images              	=	STREAMTYPE_IMAGES,
			/** Sequence of jpeg images. 	*/
			ImagesJPEG          	=	STREAMTYPE_IMAGES_JPEG,
			/** Sequence of png images. 	*/
			ImagesPNG           	=	STREAMTYPE_IMAGES_PNG,
			/** Video stream. 						*/
			Video               	=	STREAMTYPE_VIDEO,
			/** Video stream H264. 						*/
			VideoH264           	=	STREAMTYPE_VIDEO_H264,
		}


		
		/** Class: PortalInfo flag bits */
		public const int PORTAL_INFO_FLAG_LOCATION                         =	(0x1);
		public const int PORTAL_INFO_FLAG_ANGLE                            =	(0x2);
		public const int PORTAL_INFO_FLAG_SIZE                             =	(0x4);
		
		
		/** Class: Portal messages and notifications */
		public const int MSG_TYPE_PORTAL                                   =	(5);
		public const int MSG_PORTAL_ERROR                                  =	(0x400);
		public const int PORTAL_DIR_INCOMING                               =	(0x200);
		public const int PORTAL_DIR_OUTGOING                               =	(0x100);
		public const int PORTAL_DIR_MASK                                   =	(0x300);
		public const int NOTIFY_PORTAL                                     =	(0x800);
		
		
		public const int NOTIFY_PORTAL_INSTANCE                            =	(0x100800);
		public const int PORTAL_INSTANCE_FLAG_SURFACE_CHANGED              =	(NOTIFY_PORTAL_INSTANCE | 0x1);
		
	// Portal message subtypes
		public const int MSG_PORTAL_REQUEST_ID                             =	(0);
		public const int MSG_PORTAL_REQUEST                                =	(NOTIFY_PORTAL 	| MSG_PORTAL_REQUEST_ID);
		public const int MSG_PORTAL_ASK_FOR_REQUEST_ID                     =	(1);
		public const int MSG_PORTAL_ASK_FOR_REQUEST                        =	(NOTIFY_PORTAL 	| MSG_PORTAL_ASK_FOR_REQUEST_ID);
		public const int MSG_PORTAL_PROVIDE_STREAM_ID                      =	(2);
		public const int MSG_PORTAL_PROVIDE_STREAM                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_STREAM_ID);
		public const int MSG_PORTAL_PROVIDE_IMAGES_ID                      =	(3);
		public const int MSG_PORTAL_PROVIDE_IMAGES                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_PROVIDE_IMAGES_ID);
		public const int MSG_PORTAL_REQUEST_FAIL_ID                        =	(4);
		public const int MSG_PORTAL_REQUEST_FAIL                           =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_REQUEST_FAIL_ID);
			
		public const int MSG_PORTAL_STOP_ID                                =	(5);
		public const int MSG_PORTAL_STOP                                   =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ID);
		public const int MSG_PORTAL_STOP_ACK_ID                            =	(6);
		public const int MSG_PORTAL_STOP_ACK                               =	(NOTIFY_PORTAL 	| MSG_PORTAL_STOP_ACK_ID);
		public const int MSG_PORTAL_STOP_FAIL_ID                           =	(7);
		public const int MSG_PORTAL_STOP_FAIL                              =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_STOP_FAIL_ID);
		public const int MSG_PORTAL_START_ID                               =	(8);
		public const int MSG_PORTAL_START                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ID);
		public const int MSG_PORTAL_START_ACK_ID                           =	(9);
		public const int MSG_PORTAL_START_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_START_ACK_ID);
		public const int MSG_PORTAL_START_FAIL_ID                          =	(10);
		public const int MSG_PORTAL_START_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_START_FAIL_ID);
		public const int MSG_PORTAL_PAUSE_ID                               =	(11);
		public const int MSG_PORTAL_PAUSE                                  =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ID);
		public const int MSG_PORTAL_PAUSE_ACK_ID                           =	(12);
		public const int MSG_PORTAL_PAUSE_ACK                              =	(NOTIFY_PORTAL 	| MSG_PORTAL_PAUSE_ACK_ID);
		public const int MSG_PORTAL_PAUSE_FAIL_ID                          =	(13);
		public const int MSG_PORTAL_PAUSE_FAIL                             =	(MSG_PORTAL_ERROR 	| MSG_PORTAL_PAUSE_FAIL_ID);
		
		
		public const int MSG_PORTAL_BUFFER_FULL_ID                         =	(14);
		public const int MSG_PORTAL_BUFFER_FULL                            =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_FULL_ID);
		public const int MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID                  =	(15);
		public const int MSG_PORTAL_BUFFER_AVAIL_AGAIN                     =	(NOTIFY_PORTAL 	| MSG_PORTAL_BUFFER_AVAIL_AGAIN_ID);
		public const int MSG_PORTAL_IFRAME_REQUEST_ID                      =	(16);
		public const int MSG_PORTAL_IFRAME_REQUEST                         =	(NOTIFY_PORTAL 	| MSG_PORTAL_IFRAME_REQUEST_ID);
		
		public const int MSG_PORTAL_MAX_COUNT                              =	(16 + 1);
		
		
		public const int NOTIFY_TYPE_PORTAL                                =	((MSG_TYPE_PORTAL << 16));
		public const int NOTIFY_PORTAL_ESTABLISHED                         =	(0x80);
		public const int NOTIFY_PORTAL_ESTABLISHED_RESOLUTION              =	(NOTIFY_TYPE_PORTAL | 0x81);
		
		public const int NOTIFY_PORTAL_REQUEST                             =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST);
		public const int NOTIFY_PORTAL_ASK_REQUEST                         =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_ASK_FOR_REQUEST);
		public const int NOTIFY_PORTAL_STREAM_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_IMAGES_INCOMING                     =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_INCOMING_ESTABLISHED                =	(NOTIFY_PORTAL_STREAM_INCOMING | NOTIFY_PORTAL_IMAGES_INCOMING | NOTIFY_PORTAL_ESTABLISHED);
		public const int NOTIFY_PORTAL_PROVIDE_STREAM_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_STREAM | PORTAL_DIR_OUTGOING);
		public const int NOTIFY_PORTAL_PROVIDE_IMAGES_ACK                  =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PROVIDE_IMAGES | PORTAL_DIR_OUTGOING);
		public const int NOTIFY_PORTAL_PROVIDER_READY                      =	(NOTIFY_PORTAL_PROVIDE_STREAM_ACK | NOTIFY_PORTAL_PROVIDE_IMAGES_ACK | NOTIFY_PORTAL_ESTABLISHED);
		public const int NOTIFY_PORTAL_REQUEST_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_INCOMING);
		public const int NOTIFY_PORTAL_PROVIDE_FAIL                        =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_REQUEST_FAIL | PORTAL_DIR_OUTGOING);
			
		public const int NOTIFY_PORTAL_STREAM_STARTED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_START_ACK);
		public const int NOTIFY_PORTAL_STREAM_PAUSED                       =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_PAUSE_ACK);
		public const int NOTIFY_PORTAL_STREAM_STOPPED                      =	(NOTIFY_TYPE_PORTAL | MSG_PORTAL_STOP_ACK);
		
		public const int NOTIFY_PORTAL_STREAM_RECEIVER_STARTED             =	(NOTIFY_PORTAL_REQUEST | PORTAL_DIR_INCOMING | 0xFF);
		
		
		/**
		 * Environs options set/get messages
		 * Environs options set/get messages
		 */
		/** Class: Options type */
		public const int MSG_TYPE_OPTIONS                                  =	(6);
		public const int MSG_TYPE_OPTIONS_RESPONSE                         =	(7);
		public const int MSG_OPTION_TYPE                                   =	(0xF00);
		public const int MSG_OPTION_SET                                    =	(0x100);
		public const int MSG_OPTION_GET                                    =	(0x200);
		
		// Transport options
		public const int MSG_OPTION_TRANSPORT                              =	(0x10);
		public const int MSG_OPT_TRANSP_TCP_PORTAL                         =	(MSG_OPTION_TRANSPORT | 0x1);
		public const int MSG_OPT_TRANSP_TCP_PORTAL_SET                     =	(MSG_OPTION_SET | MSG_OPT_TRANSP_TCP_PORTAL);
		public const int MSG_OPT_TRANSP_TCP_PORTAL_GET                     =	(MSG_OPTION_GET | MSG_OPT_TRANSP_TCP_PORTAL);
		
		// Portal options
		public const int MSG_OPTION_PORTAL                                 =	(0x20);
		public const int MSG_OPT_PORTAL_CENTER                             =	(MSG_OPTION_PORTAL | 0x1);
		public const int MSG_OPT_PORTAL_CENTER_SET                         =	(MSG_OPTION_SET | MSG_OPT_PORTAL_CENTER);
		public const int MSG_OPT_PORTAL_CENTER_GET                         =	(MSG_OPTION_GET | MSG_OPT_PORTAL_CENTER);
		public const int MSG_OPT_PORTAL_WH                                 =	(MSG_OPTION_PORTAL | 0x2);
		public const int MSG_OPT_PORTAL_WH_SET                             =	(MSG_OPTION_SET | MSG_OPT_PORTAL_WH);
		public const int MSG_OPT_PORTAL_INFO                               =	(MSG_OPTION_PORTAL | 0x4);
		public const int MSG_OPT_PORTAL_INFO_SET                           =	(MSG_OPTION_SET | MSG_OPT_PORTAL_INFO);
		public const int MSG_OPT_PORTAL_INFO_GET                           =	(MSG_OPTION_GET | MSG_OPT_PORTAL_INFO);
		
		// Physical contact options
		public const int MSG_OPTION_CONTACT                                =	(0x40);
		public const int MSG_OPT_CONTACT_DIRECT                            =	(MSG_OPTION_CONTACT | 0x1);
		public const int MSG_OPT_CONTACT_DIRECT_SET                        =	(MSG_OPTION_SET | MSG_OPT_CONTACT_DIRECT);
		public const int MSG_OPT_CONTACT_DIRECT_GET                        =	(MSG_OPTION_GET | MSG_OPT_CONTACT_DIRECT);
			
		public const int NOTIFY_TYPE_OPTIONS                               =	((MSG_TYPE_OPTIONS << 16));
		public const int NOTIFY_PORTAL_LOCATION_CHANGED                    =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_CENTER_SET);
		public const int NOTIFY_PORTAL_SIZE_CHANGED                        =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_PORTAL_WH_SET);
		public const int NOTIFY_CONTACT_DIRECT_CHANGED                     =	(NOTIFY_TYPE_OPTIONS | MSG_OPT_CONTACT_DIRECT_SET);
		
		
		/*
		 * Native file types to app
		 * Native file types to app
		 */
		public const int MSG_TYPE_FILE                                     =	(3);
		/** Class: File type */
		// File types
		public const int NATIVE_FILE_TYPE                                  =	(0x400);
		public const int NATIVE_FILE_TYPE_APP_DEFINED                      =	(NATIVE_FILE_TYPE);
		public const int NATIVE_FILE_TYPE_EXT_DEFINED                      =	(NATIVE_FILE_TYPE | 1);
		public const int NATIVE_FILE_TYPE_CHUNKED                          =	(NATIVE_FILE_TYPE | 6);
		public const int NATIVE_FILE_TYPE_ACK                              =	(NATIVE_FILE_TYPE | 0xF);
		
		public const int MSG_TYPE_MESSAGE                                  =	(4);
		public const int MESSAGE_FROM_APP                                  =	(0x800);
		public const int MESSAGE_APP_STRING                                =	(MESSAGE_FROM_APP | 1);
		
		
		public const int NOTIFY_TYPE_FILE                                  =	((MSG_TYPE_FILE << 16));
		public const int NOTIFY_TYPE_FILE_PROGRESS                         =	(NOTIFY_TYPE_FILE | 0x20);
		
		public const int NOTIFY_FILE_SEND_PROGRESS                         =	(NOTIFY_TYPE_FILE_PROGRESS | 1);
		public const int NOTIFY_FILE_RECEIVE_PROGRESS                      =	(NOTIFY_TYPE_FILE_PROGRESS | 2);
		
		
		/*
		 * Environs options data identifiers for onData
		 * Environs options data identifiers for onData
		 */
			
		/*
		 * Native callback for errors
		 * Native callback for errors
		 */
		public const int NOTIFY_TOUCHSOURCE                                =	(0x40);
		public const int NOTIFY_TOUCHSOURCE_STARTED                        =	(NOTIFY_TOUCHSOURCE | 2);
		public const int NOTIFY_TOUCHSOURCE_STOPPED                        =	(NOTIFY_TOUCHSOURCE | 4);
			
		public const int NOTIFY_TOUCHSOURCE_NOTAVAIL                       =	(NOTIFY_TOUCHSOURCE | 8);
		public const int NOTIFY_TOUCHSOURCE_FAILED                         =	(NOTIFY_TOUCHSOURCE | 9);
		
		
		/**
		 * Environs human input declarations
		 * Environs human input declarations
		 */
		/**
		 * Input types for human input
		 * Input types for human input
		 * */
		public const int INPUT_TYPE_CURSOR                                 =	(0);
		public const int INPUT_TYPE_FINGER                                 =	(1);
		public const int INPUT_TYPE_PEN                                    =	(2);
		public const int INPUT_TYPE_MARKER                                 =	(4);
		public const int INPUT_TYPE_BLOB                                   =	(8);
			
		/**
		 * Native callback for errors
		 * Native callback for errors
		 */
		public const int NATIVE_EVENT_ERROR_MISC                           =	(0x80);
		public const int NATIVE_EVENT_DATA_CON_FAILED                      =	(NATIVE_EVENT_ERROR_MISC | 3);
		public const int NATIVE_EVENT_TOUCH_SOURCE_FAILED                  =	(NATIVE_EVENT_ERROR_MISC | 4);
		
		/**
		 * Input states for a particular human input entity
		 * Input states for a particular human input entity
		 * */
		public const int INPUT_STATE_ADD                                   =	(1);
		public const int INPUT_STATE_CHANGE                                =	(2);
		public const int INPUT_STATE_NOCHANGE                              =	(3);
		public const int INPUT_STATE_DROP                                  =	(4);
		
		/**
		 * Input commands for a particular human input entity
		 * Input commands for a particular human input entity
		 * */
		public const int INPUTSOURCE_COMMAND_INIT                          =	(0);
		public const int INPUTSOURCE_COMMAND_ADD                           =	(1);
		public const int INPUTSOURCE_COMMAND_CHANGE                        =	(2);
		public const int INPUTSOURCE_COMMAND_DROP                          =	(4);
		public const int INPUTSOURCE_COMMAND_CANCEL                        =	(6);
		public const int INPUTSOURCE_COMMAND_FLUSH                         =	(8);
		public const int INPUTSOURCE_COMMAND_FOLLOWUP                      =	(0x80);
		
		/**
		 * Environs Start notifications
		 * Environs Start notifications
		 */
		/** Class: Environs type */
		public const int MSG_TYPE_ENVIRONS                                 =	(8);
		
		public const int NOTIFY_TYPE_ENVIRONS                              =	((MSG_TYPE_ENVIRONS << 16));
		public const int NOTIFY_START                                      =	(NOTIFY_TYPE_ENVIRONS | 0x100);
		public const int NOTIFY_START_IN_PROGRESS                          =	(NOTIFY_START | 1);
		public const int NOTIFY_START_ENABLING_WIFI                        =	(NOTIFY_START | 2);
		public const int NOTIFY_START_STREAM_DECODER                       =	(NOTIFY_START | 3);
		public const int NOTIFY_START_INIT                                 =	(NOTIFY_START | 4);
		
		public const int NOTIFY_START_INIT_FAILED                          =	(NOTIFY_START | 7);
		public const int NOTIFY_START_METHOD_FAILED                        =	(NOTIFY_START | 8);
		public const int NOTIFY_START_DECODER_FAILED                       =	(NOTIFY_START | 9);
		public const int NOTIFY_START_WIFI_FAILED                          =	(NOTIFY_START | 10);
		public const int NOTIFY_START_FAILED                               =	(NOTIFY_START | 11);
		
		public const int NOTIFY_START_INIT_SUCCESS                         =	(NOTIFY_START | 12);
		public const int NOTIFY_START_SUCCESS                              =	(NOTIFY_START | 13);
		public const int NOTIFY_START_LISTEN_SUCCESS                       =	(NOTIFY_START | 14);
		public const int NOTIFY_START_LISTENDA_SUCCESS                     =	(NOTIFY_START | 15);
		
		/**
		 * Environs Stop notifications
		 * Environs Stop notifications
		 */
		public const int NOTIFY_STOP                                       =	(NOTIFY_TYPE_ENVIRONS | 0x200);
		public const int NOTIFY_STOP_BEGIN                                 =	(NOTIFY_STOP | 1);
		public const int NOTIFY_STOP_IN_PROGRESS                           =	(NOTIFY_STOP | 2);
		public const int NOTIFY_STOP_FAILED                                =	(NOTIFY_STOP | 10);
		public const int NOTIFY_STOP_SUCCESS                               =	(NOTIFY_STOP | 11);
		public const int NOTIFY_STOP_RELEASED                              =	(NOTIFY_STOP | 12);
			
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */
		public const int NOTIFY_SOCKET                                     =	(NOTIFY_TYPE_ENVIRONS | 0x400);
		public const int NOTIFY_SOCKET_BIND_FAILED                         =	(NOTIFY_SOCKET | 7);
		public const int NOTIFY_SOCKET_LISTEN_FAILED                       =	(NOTIFY_SOCKET | 8);
		public const int NOTIFY_SOCKET_FAILED                              =	(NOTIFY_SOCKET | 9);
		
		/**
		 * Environs socket notifications
		 * Environs socket notifications
		 */
		public const int NOTIFY_SETTINGS                                   =	(NOTIFY_TYPE_ENVIRONS | 0x480);
		public const int NOTIFY_SETTINGS_CHANGED                           =	(NOTIFY_SETTINGS | 0x1);
			
		/**
		 * Environs device paring notifications
		 * Environs device paring notifications
		 */
		public const int NOTIFY_PAIRING                                    =	(NOTIFY_TYPE_ENVIRONS | 0x800);
		public const int NOTIFY_DEVICE_ON_SURFACE                          =	(NOTIFY_PAIRING | 1);
		public const int NOTIFY_DEVICE_NOT_ON_SURFACE                      =	(NOTIFY_PAIRING | 2);
		
		/**
		 * Environs Start notifications
		 * Environs Start notifications
		 */
		/** Class: Environs type */
		public const int MSG_TYPE_SENSOR                                   =	(9);
		public const int MSG_TYPE_MAX_COUNT                                =	(MSG_TYPE_SENSOR + 1);
		
		/**
		 * Environs mediator filter constants
		 * Environs mediator filter constants
		 */
		public const int MEDIATOR_FILTER_NONE                              =	(0);
		public const int MEDIATOR_FILTER_AREA                              =	(1);
		public const int MEDIATOR_FILTER_AREA_AND_APP                      =	(2);
		/// Disable all devicelist notifications
		public const int MEDIATOR_FILTER_ALL                               =	(8);
		
		
		/**
		 * Environs mediator filter enumeration.
		 * Environs mediator filter enumeration.
		 * */
		public enum MediatorFilter {
			None                	=	MEDIATOR_FILTER_NONE,
			Area                	=	MEDIATOR_FILTER_AREA,
			AreaAndApp          	=	MEDIATOR_FILTER_AREA_AND_APP,
			All                 	=	MEDIATOR_FILTER_ALL,
		
		}


		
		
		/**
		 * Environs mediator broadcast found values
		 * Environs mediator broadcast found values
		 */
		public const int DEVICEINFO_DEVICE_MEDIATOR                        =	(0);
		public const int DEVICEINFO_DEVICE_BROADCAST                       =	(1);
		public const int DEVICEINFO_DEVICE_BROADCAST_AND_MEDIATOR          =	(2);
		
		/**
		 * Environs mediator broadcast message Start bytes
		 * Environs mediator broadcast message Start bytes
		 */
		public const int MEDIATOR_BROADCAST_DEVICETYPE_START               =	(11);
		public const int MEDIATOR_BROADCAST_DEVICEID_START                 =	(12);
		public const int MEDIATOR_BROADCAST_PORTS_START                    =	(20);
		public const int MEDIATOR_BROADCAST_PLATFORM_START                 =	(24);
		public const int MEDIATOR_BROADCAST_DESC_START                     =	(28);
		
		/**
		 * Environs mediator broadcast message constants
		 * Environs mediator broadcast message constants
		 */
		public const int TYPES_SEPERATOR_1_ENVIRONS                        =	(28);
		public const int MEDIATOR_BROADCAST_SPARE_ID_LEN                   =	(28);
		
		/**
		 * Environs DeviceInstance struct Start bytes
		 * Environs DeviceInstance struct Start bytes
		 */
		public const int MAX_NAMEPROPERTY                                  =	(30);
		/** Ignore: for Resolver */
		public const int MAX_LENGTH_AREA_NAME                              =	(MAX_NAMEPROPERTY + 1);
		/** Ignore: for Resolver */
		public const int MAX_LENGTH_APP_NAME                               =	(MAX_NAMEPROPERTY + 1);
		/** Ignore: for Resolver */
		public const int MAX_LENGTH_DEVICE_NAME                            =	(MAX_NAMEPROPERTY + 1);
		
		public const int DEVICEINFO_DEVICEID_START                         =	(0);
		public const int DEVICEINFO_NATIVE_ID_START                        =	(4);
		public const int DEVICEINFO_IP_START                               =	(DEVICEINFO_NATIVE_ID_START + 4);
		public const int DEVICEINFO_IPe_START                              =	(DEVICEINFO_IP_START + 4);
		public const int DEVICEINFO_TCP_PORT_START                         =	(DEVICEINFO_IPe_START + 4);
		public const int DEVICEINFO_UDP_PORT_START                         =	(DEVICEINFO_TCP_PORT_START + 2);
		public const int DEVICEINFO_UPDATES_START                          =	(DEVICEINFO_UDP_PORT_START + 2);
		public const int DEVICEINFO_PLATFORM_START                         =	(DEVICEINFO_UPDATES_START + 4);
		public const int DEVICEINFO_BROADCAST_START                        =	(DEVICEINFO_PLATFORM_START + 4);
		public const int DEVICEINFO_UNAVAILABLE_START                      =	(DEVICEINFO_BROADCAST_START + 1);
		public const int DEVICEINFO_ISCONNECTED_START                      =	(DEVICEINFO_UNAVAILABLE_START + 1);
		public const int DEVICEINFO_DEVICETYPE_START                       =	(DEVICEINFO_ISCONNECTED_START + 2);
		public const int DEVICEINFO_DEVICENAME_START                       =	(DEVICEINFO_DEVICETYPE_START + 1);
		public const int DEVICEINFO_AREANAME_START                         =	(DEVICEINFO_DEVICENAME_START + (MAX_NAMEPROPERTY + 1));
		public const int DEVICEINFO_APPNAME_START                          =	(DEVICEINFO_AREANAME_START + (MAX_NAMEPROPERTY + 1));
		public const int DEVICEINFO_OBJID_START                            =	(DEVICEINFO_APPNAME_START + (MAX_NAMEPROPERTY + 1) + 2);
		
		
		/**
		 * Environs mediator notifications
		 * Environs mediator notifications
		 */
		public const int NOTIFY_MEDIATOR                                   =	(NOTIFY_TYPE_ENVIRONS | 0x1000);
		public const int NOTIFY_MEDIATOR_SERVER                            =	(NOTIFY_MEDIATOR | 0x100);
			
		public const int NOTIFY_MEDIATOR_DEVICE_CHANGED                    =	(NOTIFY_MEDIATOR | 1);
		public const int NOTIFY_MEDIATOR_DEVICE_ADDED                      =	(NOTIFY_MEDIATOR | 2);
		public const int NOTIFY_MEDIATOR_DEVICE_REMOVED                    =	(NOTIFY_MEDIATOR | 4);
		public const int NOTIFY_MEDIATOR_SERVER_CONNECTED                  =	(NOTIFY_MEDIATOR | 20);
		public const int NOTIFY_MEDIATOR_SERVER_DISCONNECTED               =	(NOTIFY_MEDIATOR | 21);
		
		public const int NOTIFY_MEDIATOR_DEVICELISTS_UPDATE_AVAILABLE      =	(NOTIFY_MEDIATOR | 51);
		public const int NOTIFY_MEDIATOR_DEVICELISTS_CHANGED               =	(NOTIFY_MEDIATOR | 52);
		
		public const int NOTIFY_MEDIATOR_MED_CHANGED                       =	(NOTIFY_MEDIATOR | 11);
			
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_CHANGED                =	(NOTIFY_MEDIATOR_DEVICE_CHANGED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_ADDED                  =	(NOTIFY_MEDIATOR_DEVICE_ADDED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_DEVICE_REMOVED                =	(NOTIFY_MEDIATOR_DEVICE_REMOVED | NOTIFY_MEDIATOR_SERVER);
		public const int NOTIFY_MEDIATOR_SRV_STUNT_REG_REQ                 =	(NOTIFY_MEDIATOR | 22 | NOTIFY_MEDIATOR_SERVER);
			
		public const int NOTIFY_MEDIATOR_SERVER_PASSWORD_FAIL              =	(NOTIFY_MEDIATOR | 41);
		public const int NOTIFY_MEDIATOR_SERVER_PASSWORD_MISSING           =	(NOTIFY_MEDIATOR | 42);
		
		
		/**
		 * Environs network notifications
		 * Environs network notifications
		 */
		public const int NOTIFY_NETWORK                                    =	(NOTIFY_TYPE_ENVIRONS | 0x2000);
		public const int NOTIFY_NETWORK_CHANGED                            =	(NOTIFY_NETWORK | 0x1);
		
		
		/** Ignore: for Resolver */
		public const String META_MSG_IDENT                                    =	("~META~:");
		/** Ignore: for Resolver */
		public const String META_MSG_NAME_ID                                  =	(" NAME ");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_AREA_NAME                        =	("Environs");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_APP_NAME                         =	("HCMDefaultApp");
		/** Ignore: for Resolver */
		public const String ENVIRONS_DEFAULT_DEVICE_NAME                      =	("DefaultDevice");
		/** Ignore: for Resolver */
		public const int ENVIRONS_STUNT_MAX_TRY                            =	(15);
		/** Ignore: for Resolver */
		public const int ENVIRONS_STUN_MAX_TRY                             =	(10);
		
		
		/**
		 * Environs network notifications
		 * Environs network notifications
		 */
		public const int NOTIFY_TRACKER                                    =	(NOTIFY_TYPE_ENVIRONS | 0x4000);
		
		public const int NOTIFY_TRACKER_FAILED_FLAG                        =	(0x8);
		
		public const int NOTIFY_TRACKER_ENABLED                            =	(NOTIFY_TRACKER | 0x1);
		public const int NOTIFY_TRACKER_CHANGED                            =	(NOTIFY_TRACKER | 0x2);
		public const int NOTIFY_TRACKER_DISABLED                           =	(NOTIFY_TRACKER | 0x4);
		public const int NOTIFY_TRACKER_ENABLE_FAILED                      =	(NOTIFY_TRACKER | NOTIFY_TRACKER_FAILED_FLAG);
		
		public const int NOTIFY_TRACKER_STATE_INIT_SENSOR                  =	(NOTIFY_TRACKER | 0x10);
		public const int NOTIFY_TRACKER_STATE_INIT_SENSOR_FAILED           =	(NOTIFY_TRACKER_STATE_INIT_SENSOR | NOTIFY_TRACKER_FAILED_FLAG);
		public const int NOTIFY_TRACKER_STATE_START                        =	(NOTIFY_TRACKER | 0x20);
		public const int NOTIFY_TRACKER_STATE_START_FAILED                 =	(NOTIFY_TRACKER | NOTIFY_TRACKER_STATE_START | NOTIFY_TRACKER_FAILED_FLAG);
		public const int NOTIFY_TRACKER_STATE_STOP                         =	(NOTIFY_TRACKER | 0x40);
		
		/**
		 * Device types. Obsolete. Should not be used anymore.
		 * Device types. Obsolete. Should not be used anymore.
		 * Type: char
		 * Type: char
		 */
		public const char DEVICE_TYPE_DISPLAY                               =	('D');
		public const char DEVICE_TYPE_MULTITACTION                          =	('M');
		public const char DEVICE_TYPE_SURFACE1                              =	('R');
		public const char DEVICE_TYPE_SURFACE2                              =	('S');
		public const char DEVICE_TYPE_TABLET                                =	('T');
		public const char DEVICE_TYPE_UNKNOWN                               =	('U');
		public const char DEVICE_TYPE_SMARTPHONE                            =	('P');
		
		
		/**
		 * Device queue commands.
		 * Device queue commands.
		 * Type: int
		 * Type: int
		 */
		public const int DEVICELIST_QUEUE_COMMAND_RELOAD                   =	(0);
		public const int DEVICELIST_QUEUE_COMMAND_CLEAR                    =	(1);
		public const int DEVICELIST_QUEUE_COMMAND_APPEND                   =	(2);
		public const int DEVICELIST_QUEUE_COMMAND_UPDATE                   =	(3);
		public const int DEVICELIST_QUEUE_COMMAND_INSERT_AT                =	(4);
		public const int DEVICELIST_QUEUE_COMMAND_REMOVE_AT                =	(5);
		public const int DEVICELIST_QUEUE_COMMAND_INSERT_CALL              =	(6);
		public const int DEVICELIST_QUEUE_COMMAND_DISPOSE_LIST             =	(7);
		public const int DEVICELIST_QUEUE_COMMAND_LOCK                     =	(8);
		
		
		/**
		 * Device display orientation types used in Device.Display.h
		 * Device display orientation types used in Device.Display.h
		 * Type: char
		 * Type: char
		 */
		public const int DISPLAY_ORIENTATION_LANDSCAPE                     =	(0);
		public const int DISPLAY_ORIENTATION_PORTRAIT                      =	(1);
		
		
		/**
		 * Device activity / connectivity flags
		 * Device activity / connectivity flags
		 * Type: int
		 * Type: int
		 */
		public const int DEVICE_ACTIVITY_MAIN_CONNECTED                    =	(0x1);
		public const int DEVICE_ACTIVITY_BULK_CONNECTED                    =	(0x2);
		public const int DEVICE_ACTIVITY_UDP_CONNECTED                     =	(0x4);
		public const int DEVICE_ACTIVITY_CONNECTED                         =	(0x10);
		public const int DEVICE_ACTIVITY_REQUESTOR                         =	(0x100);
		public const int DEVICE_ACTIVITY_RESPONDER                         =	(0x200);
		public const int DEVICE_ACTIVITY_LISTENER_CLOSED                   =	(0x8000);
		public const int DEVICE_ACTIVITY_PLATFORM_DISPOSED                 =	(0x1000);
			
		/**
		 * Environs common native declarations
		 * Environs common native declarations
		 *  
		 *  
		 */
		public const int MEDIATOR_BUFFER_SIZE_MAX                          =	(65535);
		public const int ENVIRONS_SEND_SIZE_MAX                            =	((40 * 1024 * 1024));
		
		
		
		/**
		 * Extension plugin interface type
		 * Extension plugin interface type
		 * Type: int
		 * Type: int
		 */
		public const int INTERFACE_TYPE_UNKNOWN                            =	(0);
		/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
		public const int INTERFACE_TYPE_CAPTURE                            =	(1);
		/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
		public const int INTERFACE_TYPE_RENDER                             =	(2);
		/** An Encoder encodes the rendered image to a target format / stream. */
		public const int INTERFACE_TYPE_ENCODER                            =	(3);
		/** A Decoder decodes stream packets to images */
		public const int INTERFACE_TYPE_DECODER                            =	(4);
		/** A Tracker that analyzes raw images for objects, touches, etc. */
		public const int INTERFACE_TYPE_TRACKER                            =	(5);
		/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
		public const int INTERFACE_TYPE_INPUT_RECOGNIZER                   =	(10);
		/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
		public const int INTERFACE_TYPE_ORIENTATION_RECOGNIZER             =	(11);
		
		
		/** 
		 * Extension plugin interface type enumeration.
		 * Extension plugin interface type enumeration.
		 * */
		public enum InterfaceType {
			Unknown             	=	INTERFACE_TYPE_UNKNOWN,
			/** A Capture plugin grabs images from a capture source and provides the image buffer to the pipeline. */
			Capture             	=	INTERFACE_TYPE_CAPTURE,
			/** A Render plugin renders a capture image (compare, rotate, scale, etc.). */
			Render              	=	INTERFACE_TYPE_RENDER,
			/** An Encoder encodes the rendered image to a target format / stream. */
			Encoder             	=	INTERFACE_TYPE_ENCODER,
			/** A Decoder decodes stream packets to images */
			Decoder             	=	INTERFACE_TYPE_DECODER,
			/** A Tracker that analyzes raw images for objects, touches, etc. */
			Tracker             	=	INTERFACE_TYPE_TRACKER,
			/** A InputRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			InputRecognizer     	=	INTERFACE_TYPE_INPUT_RECOGNIZER,
			/** A TouchRecognizer is called back and provided a list of the current TouchDispatch state in order to perform gesture recognition. */
			OrientationRecognizer          	=	INTERFACE_TYPE_ORIENTATION_RECOGNIZER,
		
		}


		
		
		/**
		 * Capture subtype
		 * Capture subtype
		 * Type: int
		 * Type: int
		 */
		public const int CAPTURE_TYPE_UNKNOWN                              =	(0);
		/** A screen such as the dekstop window,
		 *  where the device may cover only part of the display.
		 *  where the device may cover only part of the display.
		 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
		public const int CAPTURE_TYPE_SCREEN                               =	(1);
		/** An application window, where each device may have a different app window and may cover only part of the window. */
		public const int CAPTURE_TYPE_APP_WINDOW                           =	(2);
		/** Camera */
		public const int CAPTURE_TYPE_CAMERA                               =	(6);
		
		/** 
		 * Capture subtype enumeration.
		 * Capture subtype enumeration.
		 * */
		public enum CaptureType {
			Unknown             	=	CAPTURE_TYPE_UNKNOWN,
			/** A screen such as the dekstop window, 
			 *  where the device may cover only part of the display.
			 *  where the device may cover only part of the display.
			 *  The screen size must not be changed as long as the grabber class is used by at least one instance. */
			Screen              	=	CAPTURE_TYPE_SCREEN,
			/** An application window, where each device may have a different app window and may cover only part of the window. */
			AppWindow           	=	CAPTURE_TYPE_APP_WINDOW,
			/** Camera */
			Camera              	=	CAPTURE_TYPE_CAMERA,
		}


		
		
		/**
		 * Portal stage buffer data type
		 * Portal stage buffer data type
		 * Type: int
		 * Type: int
		 */
		public const int PORTAL_BUFFERTYPE_UNKNOWN                         =	(0);
		/** Windows ARGB. */
		public const int PORTAL_BUFFERTYPE_ARGB                            =	(0x1);
		/** Windows ARGB and the associated HBITMAP handle. */
		public const int PORTAL_BUFFERTYPE_ARGB_HANDLE                     =	(0x2);
		/** iOS ARGB. */
		public const int PORTAL_BUFFERTYPE_BGRA                            =	(0x3);
		/** RGB 24bit. */
		public const int PORTAL_BUFFERTYPE_RGB                             =	(0x4);
		/** I420. */
		public const int PORTAL_BUFFERTYPE_YUV420                          =	(0x10);
		/** YV12. */
		public const int PORTAL_BUFFERTYPE_YV12                            =	(0x12);
		/** YUY2. */
		public const int PORTAL_BUFFERTYPE_YUV2                            =	(0x14);
		/** GDIBitmap. */
		public const int PORTAL_BUFFERTYPE_GDI_BITMAP                      =	(0x100);
		/** The data follows either D3D or OpenGL texture format. */
		public const int PORTAL_BUFFERTYPE_TEXTURE_3D                      =	(0x1000);
		/** The data follows either D3D or OpenGL buffer format. */
		public const int PORTAL_BUFFERTYPE_PIXELBUFFER_3D                  =	(0x2000);
		/** CVPixelBufferRef of apple platforms. */
		public const int PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX              =	(0x3000);
		
		/** 
		 * Portal stage buffer data type enumeration.
		 * Portal stage buffer data type enumeration.
		 * */
		public enum PortalBufferType {
			Unknown             	=	PORTAL_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			ARGB                	=	PORTAL_BUFFERTYPE_ARGB,
			/** Windows ARGB and the associated HBITMAP handle. */
			ARGBHandle          	=	PORTAL_BUFFERTYPE_ARGB_HANDLE,
			/** iOS ARGB. */
			BGRA                	=	PORTAL_BUFFERTYPE_BGRA,
			/** RGB 24bit. */
			RGB                 	=	PORTAL_BUFFERTYPE_RGB,
			/** I420. */
			YUV420              	=	PORTAL_BUFFERTYPE_YUV420,
			/** YV12. */
			YV12                	=	PORTAL_BUFFERTYPE_YV12,
			/** YUY2. */
			YUY2                	=	PORTAL_BUFFERTYPE_YUV2,
			/** GDIBitmap. */
			GDIBitmap           	=	PORTAL_BUFFERTYPE_GDI_BITMAP,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	PORTAL_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	PORTAL_BUFFERTYPE_PIXELBUFFER_3D,
			/** CVPixelBufferRef of apple platforms. */
			CVPixelBufferIOSX   	=	PORTAL_BUFFERTYPE_CVPIXELBUFFER_IOSX,
		}


		
		
		/**
		 * Capture plugin data buffer type
		 * Capture plugin data buffer type
		 * Type: int
		 * Type: int
		 */
		public const int CAPTURE_BUFFERTYPE_UNKNOWN                        =	(0);
		/** The data is stored as pixel data usually in rgba order. */
		public const int CAPTURE_BUFFERTYPE_PIXELBUFFER                    =	(1);
		/** The data follows either D3D or OpenGL texture format. */
		public const int CAPTURE_BUFFERTYPE_TEXTURE_3D                     =	(10);
		/** The data follows either D3D or OpenGL buffer format. */
		public const int CAPTURE_BUFFERTYPE_PIXELBUFFER_3D                 =	(11);
		
		/**
		 * Capture plugin data buffer type enumeration.
		 * Capture plugin data buffer type enumeration.
		 * */
		public enum CaptureBufferType {
			Unknown             	=	CAPTURE_BUFFERTYPE_UNKNOWN,
			/** The data is stored as pixel data usually in rgba order. */
			PixelBuffer         	=	CAPTURE_BUFFERTYPE_PIXELBUFFER,
			/** The data follows either D3D or OpenGL texture format. */
			Texture3D           	=	CAPTURE_BUFFERTYPE_TEXTURE_3D,
			/** The data follows either D3D or OpenGL buffer format. */
			PixelBuffer3D       	=	CAPTURE_BUFFERTYPE_PIXELBUFFER_3D,
		
		}


		
		
		/**
		 * Encoder buffer data type
		 * Encoder buffer data type
		 * Type: int
		 * Type: int
		 */
		public const int ENCODER_BUFFERTYPE_UNKNOWN                        =	(0);
		/** Windows ARGB. */
		public const int ENCODER_BUFFERTYPE_ARGB                           =	(1);
		/** I420. */
		public const int ENCODER_BUFFERTYPE_YUV420                         =	(10);
		
		/** 
		 * Encoder buffer data type enumeration.
		 * Encoder buffer data type enumeration.
		 * */
		public enum EncoderBufferType {
			Unknown             	=	ENCODER_BUFFERTYPE_UNKNOWN,
			/** Windows ARGB. */
			ARGB                	=	ENCODER_BUFFERTYPE_ARGB,
			/** I420. */
			YUV420              	=	ENCODER_BUFFERTYPE_YUV420,
		}


		
		
		/**
		 * Input recognizer states
		 * Input recognizer states
		 * Type: int
		 * Type: int
		 */
		public const int RECOGNIZER_GIVE_BACK_INPUTS                       =	(-1);
		public const int RECOGNIZER_REJECT                                 =	(0);
		public const int RECOGNIZER_HANDLED                                =	(1);
		public const int RECOGNIZER_TAKEN_OVER_INPUTS                      =	(2);
		
		
		public const int NETWORK_CONNECTION_TRIGGER_UPDATE                 =	(-3);
		public const int NETWORK_CONNECTION_UNKNOWN                        =	(-2);
		public const int NETWORK_CONNECTION_NO_NETWORK                     =	(-1);
		public const int NETWORK_CONNECTION_NO_INTERNET                    =	(0);
		public const int NETWORK_CONNECTION_MOBILE_DATA                    =	(1);
		public const int NETWORK_CONNECTION_WIFI                           =	(2);
		public const int NETWORK_CONNECTION_LAN                            =	(3);
			
		public const int ERR_LEVEL                                         =	(-1);
		public const int WARN_LEVEL                                        =	(-2);
		
		
		public const int DEVICE_INFO_ATTR_DISPOSED                         =	(0x1);
		public const int DEVICE_INFO_ATTR_ISCONNECTED                      =	(0x2);
		public const int DEVICE_INFO_ATTR_CONNECT_PROGRESS                 =	(0x4);
		public const int DEVICE_INFO_ATTR_USER_NAME                        =	(0x10);
		
		public const int DEVICE_INFO_ATTR_IDENTITY                         =	(0x20);
		
		public const int DEVICE_INFO_ATTR_DEVICE_PLATFORM                  =	(0x40);
		public const int DEVICE_INFO_ATTR_DEVICE_TYPE                      =	(0x41);
		public const int DEVICE_INFO_ATTR_NATIVEID                         =	(0x80);
		public const int DEVICE_INFO_ATTR_IP                               =	(0x100);
		public const int DEVICE_INFO_ATTR_IPE                              =	(0x200);
		public const int DEVICE_INFO_ATTR_TCP_PORT                         =	(0x400);
		public const int DEVICE_INFO_ATTR_UDP_PORT                         =	(0x800);
		public const int DEVICE_INFO_ATTR_UNAVAILABLE                      =	(0x1000);
		public const int DEVICE_INFO_ATTR_BROADCAST_FOUND                  =	(0x2000);
		public const int DEVICE_INFO_ATTR_DIRECT_CONTACT                   =	(0x4000);
		public const int DEVICE_INFO_ATTR_APP_CONTEXT                      =	(0x8000);
		public const int DEVICE_INFO_ATTR_PORTAL_CREATED                   =	(0x10000);
		public const int DEVICE_INFO_ATTR_OBJID                            =	(0x20000);
		
		
		/**
		 * DeviceInfoAttr attribute enumeration.
		 * DeviceInfoAttr attribute enumeration.
		 * */
		public enum DeviceInfoFlag {
			Disposed            	=	DEVICE_INFO_ATTR_DISPOSED,
			IsConnected         	=	DEVICE_INFO_ATTR_ISCONNECTED,
			ConnectProgress     	=	DEVICE_INFO_ATTR_CONNECT_PROGRESS,
			UserName            	=	DEVICE_INFO_ATTR_USER_NAME,
			Identity            	=	DEVICE_INFO_ATTR_IDENTITY,
			Platform            	=	DEVICE_INFO_ATTR_DEVICE_PLATFORM,
			DeviceType          	=	DEVICE_INFO_ATTR_DEVICE_TYPE,
			NativeID            	=	DEVICE_INFO_ATTR_NATIVEID,
			IP                  	=	DEVICE_INFO_ATTR_IP,
			IPe                 	=	DEVICE_INFO_ATTR_IPE,
			TcpPort             	=	DEVICE_INFO_ATTR_TCP_PORT,
			UdpPort             	=	DEVICE_INFO_ATTR_UDP_PORT,
			Unavailable         	=	DEVICE_INFO_ATTR_UNAVAILABLE,
			BroadcastFound      	=	DEVICE_INFO_ATTR_BROADCAST_FOUND,
			DirectContact       	=	DEVICE_INFO_ATTR_DIRECT_CONTACT,
			AppContext          	=	DEVICE_INFO_ATTR_APP_CONTEXT,
			PortalCreated       	=	DEVICE_INFO_ATTR_PORTAL_CREATED,
		
		}


		
		
		public const int FILE_INFO_ATTR_CREATED                            =	(0x10000);
		public const int FILE_INFO_ATTR_AVAILABLE                          =	(0x20000);
		public const int FILE_INFO_ATTR_SEND_PROGRESS                      =	(0x40000);
		public const int FILE_INFO_ATTR_RECEIVE_PROGRESS                   =	(0x80000);
		
		
		/**
		 * FileInfo attribute enumeration.
		 * FileInfo attribute enumeration.
		 * */
		public enum FileInfoFlag {
			Created             	=	FILE_INFO_ATTR_CREATED,
			Available           	=	FILE_INFO_ATTR_AVAILABLE,
			SendProgress        	=	FILE_INFO_ATTR_SEND_PROGRESS,
			ReceiveProgress     	=	FILE_INFO_ATTR_RECEIVE_PROGRESS,
		
		}


		
		public const int MESSAGE_INFO_ATTR_CREATED                         =	(0x200000);
		
		/**
		 * MessageInfo attribute enumeration.
		 * MessageInfo attribute enumeration.
		 * */
		public enum MessageInfoFlag {
			Created             	=	MESSAGE_INFO_ATTR_CREATED,
		
		}


		
		
		public const int APP_STATUS_ACTIVE                                 =	(0);
		public const int APP_STATUS_SLEEPING                               =	(1);
		
		public const int ENVIRONS_DIALOG_NO_ACTIVITY_TIMEOUT               =	(60);
		
		public const int MAX_TCP_SEND_PACKET_SIZE                          =	(1200000);
		
		
		/**
		 * Environs detectable platform constants
		 * Environs detectable platform constants
		 * Type: int
		 * Type: int
		 */
		public const int ENVIRONS_PLATFORMS_UNKNOWN                        =	(0);
		/** MS Surface Tabletops */
		public const int ENVIRONS_PLATFORMS_MSSURFACE_FLAG                 =	(0x1000);
		/** Surface 1 tabletop */
		public const int ENVIRONS_PLATFORMS_MSSUR01                        =	(0x1001);
		/** Samsung SUR40 PixelSense */
		public const int ENVIRONS_PLATFORMS_SAMSUR40                       =	(0x1002);
		/** iPad */
		public const int ENVIRONS_PLATFORMS_IPAD_FLAG                      =	(0x2000);
		public const int ENVIRONS_PLATFORMS_IPAD1                          =	(0x2011);
		public const int ENVIRONS_PLATFORMS_IPAD2                          =	(0x2021);
		public const int ENVIRONS_PLATFORMS_IPAD2MINI                      =	(0x2022);
		public const int ENVIRONS_PLATFORMS_IPAD3                          =	(0x2031);
		public const int ENVIRONS_PLATFORMS_IPAD4                          =	(0x2041);
		public const int ENVIRONS_PLATFORMS_IPAD4AIR                       =	(0x2042);
		public const int ENVIRONS_PLATFORMS_IPAD4MINI                      =	(0x2043);
		public const int ENVIRONS_PLATFORMS_IPAD4MINI3                     =	(0x2044);
		public const int ENVIRONS_PLATFORMS_IPAD5AIR2                      =	(0x2051);
		/** iPhones */
		public const int ENVIRONS_PLATFORMS_IPHONE_FLAG                    =	(0x4000);
		public const int ENVIRONS_PLATFORMS_IPHONE4                        =	(0x4041);
		public const int ENVIRONS_PLATFORMS_IPHONE5                        =	(0x4051);
		public const int ENVIRONS_PLATFORMS_IPHONE6                        =	(0x4061);
		public const int ENVIRONS_PLATFORMS_IPHONE6P                       =	(0x4062);
		/** MultiTaction Cells */
		public const int ENVIRONS_PLATFORMS_MULTITACTION_FLAG              =	(0x8000);
		/** MultiTaction Cell 55. */
		public const int ENVIRONS_PLATFORMS_MULTITACTION55                 =	(0x8055);
		
		public const int ENVIRONS_PLATFORMS_OSX_FLAG                       =	(0x10000);
		public const int ENVIRONS_PLATFORMS_MACBOOK_FLAG                   =	(0x10010);
		public const int ENVIRONS_PLATFORMS_MACMINI_FLAG                   =	(0x10020);
		
		public const int ENVIRONS_PLATFORMS_WINDOWS_FLAG                   =	(0x20000);
		public const int ENVIRONS_PLATFORMS_WINDOWSVISTA                   =	(0x20050);
		public const int ENVIRONS_PLATFORMS_WINDOWSXP                      =	(0x20060);
		public const int ENVIRONS_PLATFORMS_WINDOWS7                       =	(0x20070);
		public const int ENVIRONS_PLATFORMS_WINDOWS8                       =	(0x20080);
		public const int ENVIRONS_PLATFORMS_WINDOWS10                      =	(0x20100);
		
		public const int ENVIRONS_PLATFORMS_TABLET_FLAG                    =	(0x100000);
		public const int ENVIRONS_PLATFORMS_SMARTPHONE_FLAG                =	(0x200000);
		public const int ENVIRONS_PLATFORMS_TABLETOP_FLAG                  =	(0x400000);
		public const int ENVIRONS_PLATFORMS_DISPLAY_FLAG                   =	(0x800000);
		
		public const int ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG              =	(0x1000000);
		
		/**
		 * Environs detectable platforms.
		 * Environs detectable platforms.
		 * */
		public enum Platforms {
			Unknown             	=	ENVIRONS_PLATFORMS_UNKNOWN,
			/** MS Surface Tabletops */
			MSSurface_Flag      	=	ENVIRONS_PLATFORMS_MSSURFACE_FLAG,
			/** Surface 1 tabletop */
			MSSUR01             	=	ENVIRONS_PLATFORMS_MSSUR01,
			/** Samsung SUR40 PixelSense */
			SAMSUR40            	=	ENVIRONS_PLATFORMS_SAMSUR40,
		
			/** iPad */
			iPad_Flag           	=	ENVIRONS_PLATFORMS_IPAD_FLAG,
			iPad1               	=	ENVIRONS_PLATFORMS_IPAD1,
			iPad2               	=	ENVIRONS_PLATFORMS_IPAD2,
			iPad2Mini           	=	ENVIRONS_PLATFORMS_IPAD2MINI,
			iPad3               	=	ENVIRONS_PLATFORMS_IPAD3,
			iPad4               	=	ENVIRONS_PLATFORMS_IPAD4,
			iPad4Air            	=	ENVIRONS_PLATFORMS_IPAD4AIR,
			iPad4Mini           	=	ENVIRONS_PLATFORMS_IPAD4MINI,
			iPad4Mini3          	=	ENVIRONS_PLATFORMS_IPAD4MINI3,
			iPad5Air2           	=	ENVIRONS_PLATFORMS_IPAD5AIR2,
		
			/** iPhones */
			iPhone_Flag         	=	ENVIRONS_PLATFORMS_IPHONE_FLAG,
			iPhone4             	=	ENVIRONS_PLATFORMS_IPHONE4,
			iPhone5             	=	ENVIRONS_PLATFORMS_IPHONE5,
			iPhone6             	=	ENVIRONS_PLATFORMS_IPHONE6,
			iPhone6p            	=	ENVIRONS_PLATFORMS_IPHONE6P,
		
			/** MultiTaction Cells */
			MultiTaction_Flag   	=	ENVIRONS_PLATFORMS_MULTITACTION_FLAG,
			/** MultiTaction Cell 55. */
			MultiTaction55      	=	ENVIRONS_PLATFORMS_MULTITACTION55,
		
			OSX_Flag            	=	ENVIRONS_PLATFORMS_OSX_FLAG,
			MacBook_Flag        	=	ENVIRONS_PLATFORMS_MACBOOK_FLAG,
			MacMini_Flag        	=	ENVIRONS_PLATFORMS_MACMINI_FLAG,
		
			Windows_Flag        	=	ENVIRONS_PLATFORMS_WINDOWS_FLAG,
			WindowsVista        	=	ENVIRONS_PLATFORMS_WINDOWSVISTA,
			WindowsXP           	=	ENVIRONS_PLATFORMS_WINDOWSXP,
			Windows7            	=	ENVIRONS_PLATFORMS_WINDOWS7,
			Windows8            	=	ENVIRONS_PLATFORMS_WINDOWS8,
			Windows10           	=	ENVIRONS_PLATFORMS_WINDOWS10,
		
			Tablet_Flag         	=	ENVIRONS_PLATFORMS_TABLET_FLAG,
			Smartphone_Flag     	=	ENVIRONS_PLATFORMS_SMARTPHONE_FLAG,
			Tabletop_Flag       	=	ENVIRONS_PLATFORMS_TABLETOP_FLAG,
			Display_Flag        	=	ENVIRONS_PLATFORMS_DISPLAY_FLAG,
		
			LocationNode_Flag   	=	ENVIRONS_PLATFORMS_LOCATIONNODE_FLAG,
		
		
		
		
		
		
		
		
		}


		
		/*
		 * Mediator device class types used for GetDevicesFrom ( type )
		 * Mediator device class types used for GetDevicesFrom ( type )
		 */
		public const int MEDIATOR_DEVICE_CLASS_ALL                         =	(0);
		public const int MEDIATOR_DEVICE_CLASS_NEARBY                      =	(1);
		public const int MEDIATOR_DEVICE_CLASS_MEDIATOR                    =	(2);
		
		/*
		 * Crypt declarations
		 * Crypt declarations
		 */
		public const int ENVIRONS_DEVICES_KEYSIZE                          =	(2048);
		public const int ENVIRONS_CRYPT_PAD_OAEP                           =	((1 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1                          =	((2 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1SHA1                      =	((4 << 24));
		public const int ENVIRONS_CRYPT_PAD_PKCS1SHA256                    =	((8 << 24));
		
		public const int MEDIATOR_CLIENT_MAX_BUFFER_SIZE                   =	(0xFFFF);
		public const int DEVICE_HANDSHAKE_BUFFER_MAX_SIZE                  =	(MEDIATOR_CLIENT_MAX_BUFFER_SIZE);
		
		
		/**
		 * Mediator device class types enumeration.
		 * Mediator device class types enumeration.
		 * */
		public enum DeviceClass {
			All                 	=	MEDIATOR_DEVICE_CLASS_ALL,
			Nearby              	=	MEDIATOR_DEVICE_CLASS_NEARBY,
			Mediator            	=	MEDIATOR_DEVICE_CLASS_MEDIATOR,
		
		}


		
		/**
		 * Environs call flags
		 * Environs call flags
		 * Type: int
		 * Type: int
		 */
		public const int CALL_WAIT                                         =	(0);
		public const int CALL_NOWAIT                                       =	(1);
		
		
		/**
		 * Environs call enumeration.
		 * Environs call enumeration.
		 * */
		public enum Call {
			Wait                	=	CALL_WAIT,
			NoWait              	=	CALL_NOWAIT,
		
		}


		
		
		/**
		 * Environs RENDER_CALLBACK_TYPES
		 * Environs RENDER_CALLBACK_TYPES
		 * Type: int
		 * Type: int
		 */
		public const int RENDER_CALLBACK_TYPE_ALL                          =	(0);
		/** Call back with received ByteBuffer */
		public const int RENDER_CALLBACK_TYPE_INIT                         =	(0x10);
		/** Call back with EnvironsAVContext */
		public const int RENDER_CALLBACK_TYPE_AVCONTEXT                    =	(0x20);
		/** Call back with IPortalDecoder */
		public const int RENDER_CALLBACK_TYPE_DECODER                      =	(0x40);
		/** Call back with received ByteBuffer */
		public const int RENDER_CALLBACK_TYPE_IMAGE                        =	(0x80);
		
		/**
		 * Environs RENDER_CALLBACK_TYPES enumeration.
		 * Environs RENDER_CALLBACK_TYPES enumeration.
		 * */
		public enum RenderCallbackType {
			All                 	=	RENDER_CALLBACK_TYPE_ALL,
			Init                	=	RENDER_CALLBACK_TYPE_INIT,
			AvContext           	=	RENDER_CALLBACK_TYPE_AVCONTEXT,
			Decoder             	=	RENDER_CALLBACK_TYPE_DECODER,
			Image               	=	RENDER_CALLBACK_TYPE_IMAGE,
		
		}


		
		/**
		 * Environs AVCONTEXT_TYPES
		 * Environs AVCONTEXT_TYPES
		 * Type: int
		 * Type: int
		 */
		public const int DECODER_AVCONTEXT_TYPE_PIXELS                     =	(0);
		public const int DECODER_AVCONTEXT_TYPE_AVCONTEXT                  =	(RENDER_CALLBACK_TYPE_AVCONTEXT);
		public const int DECODER_AVCONTEXT_TYPE_JPG                        =	(2);
		public const int DECODER_AVCONTEXT_TYPE_PNG                        =	(3);
		
		/**
		 * Environs AVCONTEXT_TYPES enumeration.
		 * Environs AVCONTEXT_TYPES enumeration.
		 * */
		public enum DecoderContextType {
			AvContext           	=	DECODER_AVCONTEXT_TYPE_AVCONTEXT,
			Jpg                 	=	DECODER_AVCONTEXT_TYPE_JPG,
			Png                 	=	DECODER_AVCONTEXT_TYPE_PNG,
		
		}


		
		/**
		 * Environs AVCONTEXT_SUBTYPES
		 * Environs AVCONTEXT_SUBTYPES
		 * Type: int
		 * Type: int
		 */
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_RGB                    =	(0);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_RGBA                   =	(1);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_ARGB                   =	(2);
		
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_BGR                    =	(6);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_BGRA                   =	(7);
		public const int ENVIRONS_AVCONTEXT_SUBTYPE_ABGR                   =	(8);
		
		public const int TYPES_SEPERATOR_2_ENVIRONS                        =	(0);
		
		/**
		 * Environs SENSOR_TYPES
		 * Environs SENSOR_TYPES
		 * Type: int
		 * Type: int
		 */
		public const int ENVIRONS_SENSOR_TYPE_ACCELEROMETER                =	(0);
		public const int ENVIRONS_SENSOR_TYPE_MAGNETICFIELD                =	(1);
		public const int ENVIRONS_SENSOR_TYPE_GYROSCOPE                    =	(2);
		public const int ENVIRONS_SENSOR_TYPE_ORIENTATION                  =	(3);
		
		public const int ENVIRONS_SENSOR_TYPE_LIGHT                        =	(4);
		public const int ENVIRONS_SENSOR_TYPE_LOCATION                     =	(5);
		
		public const int ENVIRONS_SENSOR_TYPE_ALTIMETER                    =	(6);
		public const int ENVIRONS_SENSOR_TYPE_HEARTRATE                    =	(7);
		public const int ENVIRONS_SENSOR_TYPE_MAX                          =	(8);
		
		public const int MAX_ENVIRONS_SENSOR_TYPE_VALUE                    =	(0x100);
		
		/**
		 * Sensor type enumeration.
		 * Sensor type enumeration.
		 * */
		public enum SensorType {
			All                 	=	-1,
			Accelerometer       	=	ENVIRONS_SENSOR_TYPE_ACCELEROMETER,
			MagneticField       	=	ENVIRONS_SENSOR_TYPE_MAGNETICFIELD,
			Gyroscope           	=	ENVIRONS_SENSOR_TYPE_GYROSCOPE,
			Orientation         	=	ENVIRONS_SENSOR_TYPE_ORIENTATION,
			Light               	=	ENVIRONS_SENSOR_TYPE_LIGHT,
			Location            	=	ENVIRONS_SENSOR_TYPE_LOCATION,
			Altimeter           	=	ENVIRONS_SENSOR_TYPE_ALTIMETER,
			Heartrate           	=	ENVIRONS_SENSOR_TYPE_HEARTRATE,
			Max                 	=	ENVIRONS_SENSOR_TYPE_MAX,
			Unknown             	=	MAX_ENVIRONS_SENSOR_TYPE_VALUE,
		
		}


		
		public const int ENVIRONS_SENSOR_PACK_TYPE_EXT                     =	(0x10000);
		
		public const int ENVIRONS_SENSOR_FLAG_ACCELEROMETER                =	(0x1);
		public const int ENVIRONS_SENSOR_FLAG_MAGNETICFIELD                =	(0x2);
		public const int ENVIRONS_SENSOR_FLAG_GYROSCOPE                    =	(0x4);
		public const int ENVIRONS_SENSOR_FLAG_ORIENTATION                  =	(0x8);
		
		public const int ENVIRONS_SENSOR_FLAG_LIGHT                        =	(0x10);
		public const int ENVIRONS_SENSOR_FLAG_LOCATION                     =	(0x20);
		
		public const int ENVIRONS_SENSOR_FLAG_ALTIMETER                    =	(0x40);
		public const int ENVIRONS_SENSOR_FLAG_HEARTRATE                    =	(0x80);
		
		
		
		
		/** Ignore: for CLI all the remaining content*/
		
		/**
		 * Environs Option keys
		 * Environs Option keys
		 * Type: String
		 * Type: String
		 */
		/** Ignore: for Resolver */
		public const String APPENV_MAPPINGS                                   =	("mappings");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT             =	("optDefaultMedToken");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM              =	("optCustomMedToken");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_TOKEN_MEDIATOR_DEFAULT_N           =	("optDNefaultMedToken");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_TOKEN_MEDIATOR_CUSTOM_N            =	("optCNustomMedToken");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_TOKEN_MEDIATOR_USERNAME            =	("optMediatorUsername");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_INITIALS                           =	("optInitialSettings");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_NATIVE_DECODER              =	("optUseNativeDecoder");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_HARDWARE_DECODER            =	("optUseHardwareEncoder");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_SHOW_DEBUG_LOGS             =	("useShowDebugStatus");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_LOG_FILE                    =	("useLogFile");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_PUSH_NOTIFS                 =	("optUsePushNotifications");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_GL_USE_SENSORS                     =	("optUseSensors");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_PORTAL_AUTOSTART               =	("optPortalAutoStart");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_DEFAULT_MEDIATOR               =	("optUseDefaultMediator");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CUSTOM_MEDIATOR                =	("optUseCustomMediator");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_PORTAL_TCP                     =	("optPortalTCP");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_NATIVE_RESOLUTION              =	("optNativeResolution");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_STREAM                         =	("optUseStream");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CLS_MEDIATOR                   =	("useCLSMediator");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CLS_DEVICE                     =	("useCLSDevice");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CLS_DEV_ENFORCE                =	("useCLSDevEnforce");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_AUTH                           =	("useAuth");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_ANONYMOUS                      =	("useAnonymous");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_PORTAL_AUTOACCEPT              =	("portalAutoAccept");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_DEVICE_ID                          =	("optDeviceID");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_DEVICE_UID                         =	("uid");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_DEVICE_NAME                        =	("optDeviceName");
		
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_MEDIATOR_LOGIN_DLG             =	("useMediatorLoginDialog");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CUSTOMMEDIATOR_PORT            =	("optMediatorPort");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_CUSTOMMEDIATOR_IP              =	("optMediatorIP");
		/** Ignore: for Resolver */
		public const String APPENV_SETTING_USE_PORTALVIEW_DIMS_AUTO           =	("optUsePortalViewDimsAuto");
		
		
		


	} /// -> class Types
} /// -> namespace environs

