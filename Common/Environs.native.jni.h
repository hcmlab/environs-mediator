/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class hcm_environs_Environs */

#ifndef _Included_hcm_environs_Environs
#define _Included_hcm_environs_Environs
#ifdef __cplusplus
extern "C" {
#endif
#undef hcm_environs_Environs_PortalInfoSize
#define hcm_environs_Environs_PortalInfoSize 36L
/*
 * Class:     hcm_environs_Environs
 * Method:    setUseNotifyDebugMessage
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseNotifyDebugMessage
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseNotifyDebugMessage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseNotifyDebugMessage
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseLogFile
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseLogFile
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseLogFile
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseLogFile
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getVersionString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_hcm_environs_Environs_getVersionString
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getVersionMajor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getVersionMajor
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getVersionMinor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getVersionMinor
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getVersionRevision
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getVersionRevision
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceID
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceID
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDeviceID1
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setDeviceID1
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseExtendedtouch
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseExtendedtouch
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceIDFromMediator
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceIDFromMediator
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getIPAddress
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getIPAddress
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getSubnetMask
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getSubnetMask
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDirectContactStatus
 * Signature: (ILjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getDirectContactStatus
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalEnabled
 * Signature: (ILjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalEnabled
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    hasDeviceUID
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_hasDeviceUID
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getIsReleaseBuild
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getIsReleaseBuild
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDeviceUID
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setDeviceUID
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDeviceName
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setDeviceName
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setMediatorUserName1
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setMediatorUserName1
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getMediatorUserName1
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_hcm_environs_Environs_getMediatorUserName1
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setMediatorPassword1
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setMediatorPassword1
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseAuthentication
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseAuthentication
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    setAppStatus
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setAppStatus
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseTouchRecognizer1
 * Signature: (Ljava/lang/String;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setUseTouchRecognizer1
  (JNIEnv *, jclass, jstring, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    allocPlatform
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_allocPlatform
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    registerAtMediators
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_registerAtMediators
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    resetIdentKeys
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_resetIdentKeys
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setRenderSurface1
 * Signature: (ILjava/lang/String;Ljava/lang/String;ILandroid/view/Surface;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setRenderSurface1
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jobject, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    releaseRenderSurface1
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_releaseRenderSurface1
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    requestPortalIntraFrame
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_requestPortalIntraFrame
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    IsNativeAllocated
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_IsNativeAllocated
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    registerMainThread
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_registerMainThread
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    initStorage
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_initStorage
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    initWorkDir
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_initWorkDir
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setNetworkStatus
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setNetworkStatus
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    init1
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_init1
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    start1
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_start1
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getMediatorFilterLevel
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getMediatorFilterLevel
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setMediatorFilterLevel
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setMediatorFilterLevel
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getRuntimePlatform
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getRuntimePlatform
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    deviceConnect
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_deviceConnect
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    deviceDisconnect1
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_deviceDisconnect1
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceConnectStatus
 * Signature: (ILjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceConnectStatus
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getConnectedDevicesCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getConnectedDevicesCount
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    release1
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_release1
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    stop1
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_stop1
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getStatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getStatus
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPorts1
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setPorts1
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setOSLevel
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setOSLevel
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDebug
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setDebug
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDeviceDims
 * Signature: (IIFFII)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setDeviceDims
  (JNIEnv *, jclass, jint, jint, jfloat, jfloat, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    setProjectName1
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setProjectName1
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setApplicationName1
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setApplicationName1
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setDeviceType
 * Signature: (C)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setDeviceType
  (JNIEnv *, jclass, jchar);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPlatform
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPlatform
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceType
 * Signature: ()C
 */
JNIEXPORT jchar JNICALL Java_hcm_environs_Environs_getDeviceType
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setGCM
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setGCM
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseCLSForMediator
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseCLSForMediator
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCLSForMediator
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseCLSForMediator
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseCLSForDevices
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseCLSForDevices
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCLSForDevices
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseCLSForDevices
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseCLSForDevicesEnforce
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseCLSForDevicesEnforce
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCLSForDevicesEnforce
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseCLSForDevicesEnforce
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseCLSForAllTraffic
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseCLSForAllTraffic
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCLSForAllTraffic
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseCLSForAllTraffic
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseStream
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseStream
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseStream
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseStream
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseNativeDecoder
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseNativeDecoder
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseNativeDecoder
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseNativeDecoder
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseHardwareEncoder1
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseHardwareEncoder1
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseHardwareEncoder
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseHardwareEncoder
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseEncoder
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setUseEncoder
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseDecoder
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setUseDecoder
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseRenderer
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setUseRenderer
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCapturer
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setUseCapturer
  (JNIEnv *, jclass, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseSensors
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseSensors
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseSensors
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseSensors
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUsePushNotifications
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUsePushNotifications
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUsePushNotifications
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUsePushNotifications
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseDefaultMediator
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseDefaultMediator
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseDefaultMediator
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseDefaultMediator
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getUseCustomMediator
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getUseCustomMediator
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setUseCustomMediator
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setUseCustomMediator
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    setMediator
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setMediator
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getMediatorPort
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getMediatorPort
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getMediatorIP
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_hcm_environs_Environs_getMediatorIP
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalNativeResolution
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPortalNativeResolution
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalNativeResolution
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalNativeResolution
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalAutoStart
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPortalAutoStart
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalAutoStart
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalAutoStart
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalTCP
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalTCP
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalTCP
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPortalTCP
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalViewDimsAuto
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPortalViewDimsAuto
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalViewDimsAuto
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalViewDimsAuto
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalViewDims
 * Signature: (ILjava/lang/String;Ljava/lang/String;IIII)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setPortalViewDims
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getStreamLock
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getStreamLock
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    releaseStreamLock
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_releaseStreamLock
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    receiveStreamPack
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_hcm_environs_Environs_receiveStreamPack
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getBufferHeaderSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getBufferHeaderSize
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getBufferHeaderBytesToSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getBufferHeaderBytesToSize
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getBufferHeaderBytesToType
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getBufferHeaderBytesToType
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    sendMsg
 * Signature: (ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_sendMsg
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    sendBuffer
 * Signature: (ILjava/lang/String;Ljava/lang/String;IILjava/lang/String;[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_sendBuffer
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint, jstring, jbyteArray, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    sendFile
 * Signature: (ILjava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_sendFile
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setOrientations
 * Signature: (FFF)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setOrientations
  (JNIEnv *, jclass, jfloat, jfloat, jfloat);

/*
 * Class:     hcm_environs_Environs
 * Method:    setAccelerometers
 * Signature: (FFF)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_setAccelerometers
  (JNIEnv *, jclass, jfloat, jfloat, jfloat);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceWidth
 * Signature: (ILjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceWidth
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceHeight
 * Signature: (ILjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceHeight
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    initRequestPortalStream
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_initRequestPortalStream
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    providePortalStream1
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_providePortalStream1
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    startPortalStream1
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_startPortalStream1
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    pausePortalStream
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_pausePortalStream
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    stopPortalStream
 * Signature: (ILjava/lang/String;Ljava/lang/String;II)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_stopPortalStream
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getActivePortalID
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getActivePortalID
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getRequestedPortalID
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getRequestedPortalID
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getPortalInfo
 * Signature: (Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_getPortalInfo
  (JNIEnv *, jclass, jobject, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    setPortalInfo
 * Signature: (Ljava/nio/ByteBuffer;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_hcm_environs_Environs_setPortalInfo
  (JNIEnv *, jclass, jobject, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    touch
 * Signature: (ILjava/nio/ByteBuffer;IZ)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_touch
  (JNIEnv *, jclass, jint, jobject, jint, jboolean);

/*
 * Class:     hcm_environs_Environs
 * Method:    getSizeOfInputPack
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getSizeOfInputPack
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    BridgeForNotifier
 * Signature: (ILjava/lang/String;Ljava/lang/String;III)V
 */
JNIEXPORT void JNICALL Java_hcm_environs_Environs_BridgeForNotifier
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jint, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDevicesCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDevicesCount
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDevices
 * Signature: (I)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_hcm_environs_Environs_getDevices
  (JNIEnv *, jclass, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDevice
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_hcm_environs_Environs_getDevice
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceInstanceSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDeviceInstanceSize
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDevicesHeaderSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getDevicesHeaderSize
  (JNIEnv *, jclass);

/*
 * Class:     hcm_environs_Environs
 * Method:    getFilePath
 * Signature: (ILjava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_hcm_environs_Environs_getFilePath
  (JNIEnv *, jclass, jint, jstring, jstring, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getFile
 * Signature: (ILjava/lang/String;Ljava/lang/String;I[BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_hcm_environs_Environs_getFile
  (JNIEnv *, jclass, jint, jstring, jstring, jint, jbyteArray, jint);

/*
 * Class:     hcm_environs_Environs
 * Method:    getDeviceScreenProps
 * Signature: (ILjava/lang/String;Ljava/lang/String;)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_hcm_environs_Environs_getDeviceScreenProps
  (JNIEnv *, jclass, jint, jstring, jstring);

/*
 * Class:     hcm_environs_Environs
 * Method:    getNetworkStatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_hcm_environs_Environs_getNetworkStatus
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
